(self['webpackChunksas_booking'] = self['webpackChunksas_booking'] || []).push([["vendors-node_modules_pnpm_react-navigation_native-stack_7_1_14__react-navigation_native_7_0_1-71f058"], {
"13182": (function (module, __unused_webpack_exports, __webpack_require__) {
var AssetRegistry = __webpack_require__(27828);
module.exports = AssetRegistry.registerAsset({
  __packager_asset: true,
  scales: [1],
  name: "back-icon-mask",
  type: "png",
  hash: "0a328cd9c1afd0afe8e3b1ec5165b1b4",
  httpServerLocation: "assets/node_modules/.pnpm/@react-navigation+elements@2.2.4_@react-navigation+native@7.0.13_react-native@0.76.3_@babel+c_5fskrcxtpvutpgnz6teznunzz4/node_modules/@react-navigation/elements/lib/commonjs/assets",
  
  height: 85,
  width: 50,
});

}),
"24296": (function (module, __unused_webpack_exports, __webpack_require__) {
var AssetRegistry = __webpack_require__(27828);
module.exports = AssetRegistry.registerAsset({
  __packager_asset: true,
  scales: [1,2,3,4],
  name: "back-icon",
  type: "png",
  hash: "778ffc9fe8773a878e9c30a6304784de,c79c3606a1cf168006ad3979763c7e0c,02bc1fa7c0313217bde2d65ccbff40c9,35ba0eaec5a4f5ed12ca16fabeae451d",
  httpServerLocation: "assets/node_modules/.pnpm/@react-navigation+elements@2.2.4_@react-navigation+native@7.0.13_react-native@0.76.3_@babel+c_5fskrcxtpvutpgnz6teznunzz4/node_modules/@react-navigation/elements/lib/commonjs/assets",
  
  height: 24,
  width: 24,
});

}),
"91665": (function (module, __unused_webpack_exports, __webpack_require__) {
var AssetRegistry = __webpack_require__(27828);
module.exports = AssetRegistry.registerAsset({
  __packager_asset: true,
  scales: [1,2,3,4],
  name: "clear-icon",
  type: "png",
  hash: "61ca7e64b7d605716c57706cef640b9a,aff2c65b39a296d4f7e96d0f58169170,d8e7601e3df962f83c62371ac14964d8,3cd68ccdb8938e3711da2e8831b85493",
  httpServerLocation: "assets/node_modules/.pnpm/@react-navigation+elements@2.2.4_@react-navigation+native@7.0.13_react-native@0.76.3_@babel+c_5fskrcxtpvutpgnz6teznunzz4/node_modules/@react-navigation/elements/lib/commonjs/assets",
  
  height: 16,
  width: 16,
});

}),
"67325": (function (module, __unused_webpack_exports, __webpack_require__) {
var AssetRegistry = __webpack_require__(27828);
module.exports = AssetRegistry.registerAsset({
  __packager_asset: true,
  scales: [1,2,3,4],
  name: "close-icon",
  type: "png",
  hash: "d84e297c3b3e49a614248143d53e40ca,1190ab078c57159f4245a328118fcd9a,78c625386b4d0690b421eb0fc78f7b9c,0747a1317bbe9c6fc340b889ef8ab3ae",
  httpServerLocation: "assets/node_modules/.pnpm/@react-navigation+elements@2.2.4_@react-navigation+native@7.0.13_react-native@0.76.3_@babel+c_5fskrcxtpvutpgnz6teznunzz4/node_modules/@react-navigation/elements/lib/commonjs/assets",
  
  height: 24,
  width: 24,
});

}),
"40129": (function (module, __unused_webpack_exports, __webpack_require__) {
var AssetRegistry = __webpack_require__(27828);
module.exports = AssetRegistry.registerAsset({
  __packager_asset: true,
  scales: [1,2,3,4],
  name: "search-icon",
  type: "png",
  hash: "4403c6117ec30c859bc95d70ce4a71d3,069d99eb1fa6712c0b9034a58c6b57dd,c3273c9e5321f20d1e42c2efae2578c4,286d67d3f74808a60a78d3ebf1a5fb57",
  httpServerLocation: "assets/node_modules/.pnpm/@react-navigation+elements@2.2.4_@react-navigation+native@7.0.13_react-native@0.76.3_@babel+c_5fskrcxtpvutpgnz6teznunzz4/node_modules/@react-navigation/elements/lib/commonjs/assets",
  
  height: 24,
  width: 24,
});

}),
"17990": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(88410);
var _object_without_properties_loose = __webpack_require__(56242);
var _type_of = __webpack_require__(15576);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Background = Background;
var _native = __webpack_require__(31326);
var React = _interopRequireWildcard(__webpack_require__(84816));
var _reactNative = __webpack_require__(44963);
var _jsxRuntime = __webpack_require__(31549);
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _type_of._(e)) && "function" != typeof e) return {
        "default": e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && ({}).hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n["default"] = e, t && t.set(e, n), n;
}
function Background(_param) {
    var style = _param.style, rest = _object_without_properties_loose._(_param, [
        "style"
    ]);
    var colors = (0, _native.useTheme)().colors;
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.Animated.View, _extends._({}, rest, {
        style: [
            {
                flex: 1,
                backgroundColor: colors.background
            },
            style
        ]
    }));
} //# sourceMappingURL=Background.js.map


}),
"35238": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(88410);
var _object_without_properties_loose = __webpack_require__(56242);
var _type_of = __webpack_require__(15576);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Button = Button;
var _native = __webpack_require__(31326);
var _color = _interopRequireDefault(__webpack_require__(80204));
var React = _interopRequireWildcard(__webpack_require__(84816));
var _reactNative = __webpack_require__(44963);
var _PlatformPressable = __webpack_require__(7536);
var _Text = __webpack_require__(94540);
var _jsxRuntime = __webpack_require__(31549);
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _type_of._(e)) && "function" != typeof e) return {
        "default": e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && ({}).hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n["default"] = e, t && t.set(e, n), n;
}
function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
        "default": e
    };
}
var BUTTON_RADIUS = 40;
function Button(props) {
    if ('screen' in props || 'action' in props) {
        // @ts-expect-error: This is already type-checked by the prop types
        return /*#__PURE__*/ (0, _jsxRuntime.jsx)(ButtonLink, _extends._({}, props));
    } else {
        return /*#__PURE__*/ (0, _jsxRuntime.jsx)(ButtonBase, _extends._({}, props));
    }
}
function ButtonLink(_param) {
    var screen = _param.screen, params = _param.params, action = _param.action, href = _param.href, rest = _object_without_properties_loose._(_param, [
        "screen",
        "params",
        "action",
        "href"
    ]);
    // @ts-expect-error: This is already type-checked by the prop types
    var props = (0, _native.useLinkProps)({
        screen: screen,
        params: params,
        action: action,
        href: href
    });
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(ButtonBase, _extends._({}, rest, props));
}
function ButtonBase(_param) {
    var _param_variant = _param.variant, variant = _param_variant === void 0 ? 'tinted' : _param_variant, customColor = _param.color, android_ripple = _param.android_ripple, style = _param.style, children = _param.children, rest = _object_without_properties_loose._(_param, [
        "variant",
        "color",
        "android_ripple",
        "style",
        "children"
    ]);
    var _ref = (0, _native.useTheme)(), colors = _ref.colors, fonts = _ref.fonts;
    var color = customColor != null ? customColor : colors.primary;
    var backgroundColor;
    var textColor;
    switch(variant){
        case 'plain':
            backgroundColor = 'transparent';
            textColor = color;
            break;
        case 'tinted':
            backgroundColor = (0, _color["default"])(color).fade(0.85).string();
            textColor = color;
            break;
        case 'filled':
            backgroundColor = color;
            textColor = (0, _color["default"])(color).isDark() ? 'white' : (0, _color["default"])(color).darken(0.71).string();
            break;
    }
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_PlatformPressable.PlatformPressable, _extends._({}, rest, {
        android_ripple: _extends._({
            radius: BUTTON_RADIUS,
            color: (0, _color["default"])(textColor).fade(0.85).string()
        }, android_ripple),
        pressOpacity: _reactNative.Platform.OS === 'ios' ? undefined : 1,
        hoverEffect: {
            color: textColor
        },
        style: [
            {
                backgroundColor: backgroundColor
            },
            styles.button,
            style
        ],
        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_Text.Text, {
            style: [
                {
                    color: textColor
                },
                fonts.regular,
                styles.text
            ],
            children: children
        })
    }));
}
var styles = _reactNative.StyleSheet.create({
    button: {
        paddingHorizontal: 24,
        paddingVertical: 10,
        borderRadius: BUTTON_RADIUS
    },
    text: {
        fontSize: 14,
        lineHeight: 20,
        letterSpacing: 0.1,
        textAlign: 'center'
    }
}); //# sourceMappingURL=Button.js.map


}),
"75303": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(88410);
var _object_without_properties_loose = __webpack_require__(56242);
var _sliced_to_array = __webpack_require__(38097);
var _type_of = __webpack_require__(15576);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Header = Header;
var _native = __webpack_require__(31326);
var _color = _interopRequireDefault(__webpack_require__(80204));
var React = _interopRequireWildcard(__webpack_require__(84816));
var _reactNative = __webpack_require__(44963);
var _reactNativeSafeAreaContext = __webpack_require__(24144);
var _searchIcon = _interopRequireDefault(__webpack_require__(40129));
var _getDefaultHeaderHeight = __webpack_require__(8960);
var _HeaderBackButton = __webpack_require__(72615);
var _HeaderBackground = __webpack_require__(84180);
var _HeaderButton = __webpack_require__(27873);
var _HeaderIcon = __webpack_require__(5664);
var _HeaderSearchBar = __webpack_require__(30641);
var _HeaderShownContext = __webpack_require__(98213);
var _HeaderTitle = __webpack_require__(3354);
var _jsxRuntime = __webpack_require__(31549);
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _type_of._(e)) && "function" != typeof e) return {
        "default": e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && ({}).hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n["default"] = e, t && t.set(e, n), n;
}
function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
        "default": e
    };
}
// Width of the screen in split layout on portrait mode on iPad Mini
var IPAD_MINI_MEDIUM_WIDTH = 414;
var warnIfHeaderStylesDefined = function(styles) {
    Object.keys(styles).forEach(function(styleProp) {
        var value = styles[styleProp];
        if (styleProp === 'position' && value === 'absolute') {
            console.warn("position: 'absolute' is not supported on headerStyle. If you would like to render content under the header, use the 'headerTransparent' option.");
        } else if (value !== undefined) {
            console.warn(styleProp + " was given a value of " + value + ", this has no effect on headerStyle.");
        }
    });
};
function Header(props) {
    var insets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)();
    var frame = (0, _reactNativeSafeAreaContext.useSafeAreaFrame)();
    var colors = (0, _native.useTheme)().colors;
    var navigation = (0, _native.useNavigation)();
    var isParentHeaderShown = React.useContext(_HeaderShownContext.HeaderShownContext);
    var _React_useState = _sliced_to_array._(React.useState(false), 2), searchBarVisible = _React_useState[0], setSearchBarVisible = _React_useState[1];
    var _React_useState1 = _sliced_to_array._(React.useState(undefined), 2), titleLayout = _React_useState1[0], setTitleLayout = _React_useState1[1];
    var onTitleLayout = function(e) {
        var _e_nativeEvent_layout = e.nativeEvent.layout, height = _e_nativeEvent_layout.height, width = _e_nativeEvent_layout.width;
        setTitleLayout(function(titleLayout) {
            if (titleLayout && height === titleLayout.height && width === titleLayout.width) {
                return titleLayout;
            }
            return {
                height: height,
                width: width
            };
        });
    };
    var _props_layout = props.// eslint-disable-next-line @eslint-react/no-unstable-default-props
    layout, layout = _props_layout === void 0 ? frame : _props_layout, _props_modal = props.modal, modal = _props_modal === void 0 ? false : _props_modal, back = props.back, title = props.title, customTitle = props.headerTitle, _props_headerTitleAlign = props.headerTitleAlign, headerTitleAlign = _props_headerTitleAlign === void 0 ? _reactNative.Platform.OS === 'ios' ? 'center' : 'left' : _props_headerTitleAlign, _props_headerLeft = props.headerLeft, headerLeft = _props_headerLeft === void 0 ? back ? function(props) {
        return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_HeaderBackButton.HeaderBackButton, _extends._({}, props));
    } : undefined : _props_headerLeft, headerSearchBarOptions = props.headerSearchBarOptions, headerTransparent = props.headerTransparent, headerTintColor = props.headerTintColor, headerBackground = props.headerBackground, headerRight = props.headerRight, titleAllowFontScaling = props.headerTitleAllowFontScaling, titleStyle = props.headerTitleStyle, leftContainerStyle = props.headerLeftContainerStyle, rightContainerStyle = props.headerRightContainerStyle, titleContainerStyle = props.headerTitleContainerStyle, _props_headerBackButtonDisplayMode = props.headerBackButtonDisplayMode, headerBackButtonDisplayMode = _props_headerBackButtonDisplayMode === void 0 ? _reactNative.Platform.OS === 'ios' ? 'default' : 'minimal' : _props_headerBackButtonDisplayMode, headerBackTitleStyle = props.headerBackTitleStyle, backgroundContainerStyle = props.headerBackgroundContainerStyle, customHeaderStyle = props.headerStyle, headerShadowVisible = props.headerShadowVisible, headerPressColor = props.headerPressColor, headerPressOpacity = props.headerPressOpacity, _props_headerStatusBarHeight = props.// eslint-disable-next-line @eslint-react/no-unstable-default-props
    headerStatusBarHeight, headerStatusBarHeight = _props_headerStatusBarHeight === void 0 ? isParentHeaderShown ? 0 : insets.top : _props_headerStatusBarHeight;
    var defaultHeight = (0, _getDefaultHeaderHeight.getDefaultHeaderHeight)(layout, modal, headerStatusBarHeight);
    var _reactNative_StyleSheet_flatten = _reactNative.StyleSheet.flatten(customHeaderStyle || {}), _reactNative_StyleSheet_flatten_height = _reactNative_StyleSheet_flatten.height, height = _reactNative_StyleSheet_flatten_height === void 0 ? defaultHeight : _reactNative_StyleSheet_flatten_height, minHeight = _reactNative_StyleSheet_flatten.minHeight, maxHeight = _reactNative_StyleSheet_flatten.maxHeight, backgroundColor = _reactNative_StyleSheet_flatten.backgroundColor, borderBottomColor = _reactNative_StyleSheet_flatten.borderBottomColor, borderBottomEndRadius = _reactNative_StyleSheet_flatten.borderBottomEndRadius, borderBottomLeftRadius = _reactNative_StyleSheet_flatten.borderBottomLeftRadius, borderBottomRightRadius = _reactNative_StyleSheet_flatten.borderBottomRightRadius, borderBottomStartRadius = _reactNative_StyleSheet_flatten.borderBottomStartRadius, borderBottomWidth = _reactNative_StyleSheet_flatten.borderBottomWidth, borderColor = _reactNative_StyleSheet_flatten.borderColor, borderEndColor = _reactNative_StyleSheet_flatten.borderEndColor, borderEndWidth = _reactNative_StyleSheet_flatten.borderEndWidth, borderLeftColor = _reactNative_StyleSheet_flatten.borderLeftColor, borderLeftWidth = _reactNative_StyleSheet_flatten.borderLeftWidth, borderRadius = _reactNative_StyleSheet_flatten.borderRadius, borderRightColor = _reactNative_StyleSheet_flatten.borderRightColor, borderRightWidth = _reactNative_StyleSheet_flatten.borderRightWidth, borderStartColor = _reactNative_StyleSheet_flatten.borderStartColor, borderStartWidth = _reactNative_StyleSheet_flatten.borderStartWidth, borderStyle = _reactNative_StyleSheet_flatten.borderStyle, borderTopColor = _reactNative_StyleSheet_flatten.borderTopColor, borderTopEndRadius = _reactNative_StyleSheet_flatten.borderTopEndRadius, borderTopLeftRadius = _reactNative_StyleSheet_flatten.borderTopLeftRadius, borderTopRightRadius = _reactNative_StyleSheet_flatten.borderTopRightRadius, borderTopStartRadius = _reactNative_StyleSheet_flatten.borderTopStartRadius, borderTopWidth = _reactNative_StyleSheet_flatten.borderTopWidth, borderWidth = _reactNative_StyleSheet_flatten.borderWidth, boxShadow = _reactNative_StyleSheet_flatten.boxShadow, elevation = _reactNative_StyleSheet_flatten.elevation, shadowColor = _reactNative_StyleSheet_flatten.shadowColor, shadowOffset = _reactNative_StyleSheet_flatten.shadowOffset, shadowOpacity = _reactNative_StyleSheet_flatten.shadowOpacity, shadowRadius = _reactNative_StyleSheet_flatten.shadowRadius, opacity = _reactNative_StyleSheet_flatten.opacity, transform = _reactNative_StyleSheet_flatten.transform, unsafeStyles = _object_without_properties_loose._(_reactNative_StyleSheet_flatten, [
        "height",
        "minHeight",
        "maxHeight",
        "backgroundColor",
        "borderBottomColor",
        "borderBottomEndRadius",
        "borderBottomLeftRadius",
        "borderBottomRightRadius",
        "borderBottomStartRadius",
        "borderBottomWidth",
        "borderColor",
        "borderEndColor",
        "borderEndWidth",
        "borderLeftColor",
        "borderLeftWidth",
        "borderRadius",
        "borderRightColor",
        "borderRightWidth",
        "borderStartColor",
        "borderStartWidth",
        "borderStyle",
        "borderTopColor",
        "borderTopEndRadius",
        "borderTopLeftRadius",
        "borderTopRightRadius",
        "borderTopStartRadius",
        "borderTopWidth",
        "borderWidth",
        "boxShadow",
        "elevation",
        "shadowColor",
        "shadowOffset",
        "shadowOpacity",
        "shadowRadius",
        "opacity",
        "transform"
    ]);
    if (false) {}
    var safeStyles = {
        backgroundColor: backgroundColor,
        borderBottomColor: borderBottomColor,
        borderBottomEndRadius: borderBottomEndRadius,
        borderBottomLeftRadius: borderBottomLeftRadius,
        borderBottomRightRadius: borderBottomRightRadius,
        borderBottomStartRadius: borderBottomStartRadius,
        borderBottomWidth: borderBottomWidth,
        borderColor: borderColor,
        borderEndColor: borderEndColor,
        borderEndWidth: borderEndWidth,
        borderLeftColor: borderLeftColor,
        borderLeftWidth: borderLeftWidth,
        borderRadius: borderRadius,
        borderRightColor: borderRightColor,
        borderRightWidth: borderRightWidth,
        borderStartColor: borderStartColor,
        borderStartWidth: borderStartWidth,
        borderStyle: borderStyle,
        borderTopColor: borderTopColor,
        borderTopEndRadius: borderTopEndRadius,
        borderTopLeftRadius: borderTopLeftRadius,
        borderTopRightRadius: borderTopRightRadius,
        borderTopStartRadius: borderTopStartRadius,
        borderTopWidth: borderTopWidth,
        borderWidth: borderWidth,
        boxShadow: boxShadow,
        elevation: elevation,
        shadowColor: shadowColor,
        shadowOffset: shadowOffset,
        shadowOpacity: shadowOpacity,
        shadowRadius: shadowRadius,
        opacity: opacity,
        transform: transform
    };
    // Setting a property to undefined triggers default style
    // So we need to filter them out
    // Users can use `null` instead
    for(var styleProp in safeStyles){
        // @ts-expect-error: typescript wrongly complains that styleProp cannot be used to index safeStyles
        if (safeStyles[styleProp] === undefined) {
            // @ts-expect-error don't need to care about index signature for deletion
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete safeStyles[styleProp];
        }
    }
    var backgroundStyle = _extends._({}, headerTransparent && {
        backgroundColor: 'transparent'
    }, (headerTransparent || headerShadowVisible === false) && _extends._({
        borderBottomWidth: 0
    }, _reactNative.Platform.select({
        android: {
            elevation: 0
        },
        web: {
            boxShadow: 'none'
        },
        "default": {
            shadowOpacity: 0
        }
    })), safeStyles);
    var iconTintColor = headerTintColor != null ? headerTintColor : _reactNative.Platform.select({
        ios: colors.primary,
        "default": colors.text
    });
    var leftButton = headerLeft ? headerLeft({
        tintColor: iconTintColor,
        pressColor: headerPressColor,
        pressOpacity: headerPressOpacity,
        displayMode: headerBackButtonDisplayMode,
        titleLayout: titleLayout,
        screenLayout: layout,
        canGoBack: Boolean(back),
        onPress: back ? navigation.goBack : undefined,
        label: back == null ? void 0 : back.title,
        labelStyle: headerBackTitleStyle,
        href: back == null ? void 0 : back.href
    }) : null;
    var rightButton = headerRight ? headerRight({
        tintColor: iconTintColor,
        pressColor: headerPressColor,
        pressOpacity: headerPressOpacity,
        canGoBack: Boolean(back)
    }) : null;
    var headerTitle = typeof customTitle !== 'function' ? function(props) {
        return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_HeaderTitle.HeaderTitle, _extends._({}, props));
    } : customTitle;
    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
        pointerEvents: "box-none",
        style: [
            {
                height: height,
                minHeight: minHeight,
                maxHeight: maxHeight,
                opacity: opacity,
                transform: transform
            }
        ],
        children: [
            /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
                pointerEvents: "box-none",
                style: [
                    _reactNative.StyleSheet.absoluteFill,
                    backgroundContainerStyle
                ],
                children: headerBackground ? headerBackground({
                    style: backgroundStyle
                }) : /*#__PURE__*/ (0, _jsxRuntime.jsx)(_HeaderBackground.HeaderBackground, {
                    pointerEvents: // Allow touch through the header when background color is transparent
                    headerTransparent && (backgroundStyle.backgroundColor === 'transparent' || (0, _color["default"])(backgroundStyle.backgroundColor).alpha() === 0) ? 'none' : 'auto',
                    style: backgroundStyle
                })
            }),
            /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.View, {
                pointerEvents: "none",
                style: {
                    height: headerStatusBarHeight
                }
            }),
            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(_reactNative.View, {
                pointerEvents: "box-none",
                style: [
                    styles.content,
                    _reactNative.Platform.OS === 'ios' && frame.width >= IPAD_MINI_MEDIUM_WIDTH ? styles.large : null
                ],
                children: [
                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
                        pointerEvents: "box-none",
                        style: [
                            styles.start,
                            headerTitleAlign === 'center' && styles.expand,
                            {
                                marginStart: insets.left
                            },
                            leftContainerStyle
                        ],
                        children: leftButton
                    }),
                    _reactNative.Platform.OS === 'ios' || !searchBarVisible ? /*#__PURE__*/ (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
                        children: [
                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
                                pointerEvents: "box-none",
                                style: [
                                    styles.title,
                                    {
                                        // Avoid the title from going offscreen or overlapping buttons
                                        maxWidth: headerTitleAlign === 'center' ? layout.width - ((leftButton ? headerBackButtonDisplayMode !== 'minimal' ? 80 : 32 : 16) + (rightButton || headerSearchBarOptions ? 16 : 0) + Math.max(insets.left, insets.right)) * 2 : layout.width - ((leftButton ? 52 : 16) + (rightButton || headerSearchBarOptions ? 52 : 16) + insets.left - insets.right)
                                    },
                                    headerTitleAlign === 'left' && leftButton ? {
                                        marginStart: 4
                                    } : {
                                        marginHorizontal: 16
                                    },
                                    titleContainerStyle
                                ],
                                children: headerTitle({
                                    children: title,
                                    allowFontScaling: titleAllowFontScaling,
                                    tintColor: headerTintColor,
                                    onLayout: onTitleLayout,
                                    style: titleStyle
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
                                pointerEvents: "box-none",
                                style: [
                                    styles.end,
                                    styles.expand,
                                    {
                                        marginEnd: insets.right
                                    },
                                    rightContainerStyle
                                ],
                                children: [
                                    rightButton,
                                    headerSearchBarOptions ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(_HeaderButton.HeaderButton, {
                                        tintColor: iconTintColor,
                                        pressColor: headerPressColor,
                                        pressOpacity: headerPressOpacity,
                                        onPress: function() {
                                            return setSearchBarVisible(true);
                                        },
                                        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_HeaderIcon.HeaderIcon, {
                                            source: _searchIcon["default"],
                                            tintColor: iconTintColor
                                        })
                                    }) : null
                                ]
                            })
                        ]
                    }) : null,
                    _reactNative.Platform.OS === 'ios' || searchBarVisible ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(_HeaderSearchBar.HeaderSearchBar, _extends._({}, headerSearchBarOptions, {
                        visible: searchBarVisible,
                        onClose: function() {
                            var _headerSearchBarOptions_onClose;
                            setSearchBarVisible(false);
                            headerSearchBarOptions == null ? void 0 : (_headerSearchBarOptions_onClose = headerSearchBarOptions.onClose) == null ? void 0 : _headerSearchBarOptions_onClose.call(headerSearchBarOptions);
                        },
                        style: [
                            _reactNative.Platform.OS === 'ios' ? [
                                _reactNative.StyleSheet.absoluteFill,
                                {
                                    backgroundColor: colors.card
                                }
                            ] : !leftButton && {
                                marginStart: 8
                            }
                        ]
                    })) : null
                ]
            })
        ]
    });
}
var styles = _reactNative.StyleSheet.create({
    content: {
        flex: 1,
        flexDirection: 'row',
        alignItems: 'stretch'
    },
    large: {
        marginHorizontal: 5
    },
    title: {
        justifyContent: 'center'
    },
    start: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'flex-start'
    },
    end: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'flex-end'
    },
    expand: {
        flexGrow: 1,
        flexBasis: 0
    }
}); //# sourceMappingURL=Header.js.map


}),
"72615": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(88410);
var _sliced_to_array = __webpack_require__(38097);
var _type_of = __webpack_require__(15576);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.HeaderBackButton = HeaderBackButton;
var _native = __webpack_require__(31326);
var React = _interopRequireWildcard(__webpack_require__(84816));
var _reactNative = __webpack_require__(44963);
var _backIcon = _interopRequireDefault(__webpack_require__(24296));
var _backIconMask = _interopRequireDefault(__webpack_require__(13182));
var _MaskedView = __webpack_require__(13357);
var _HeaderButton = __webpack_require__(27873);
var _HeaderIcon = __webpack_require__(5664);
var _jsxRuntime = __webpack_require__(31549);
function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
        "default": e
    };
}
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _type_of._(e)) && "function" != typeof e) return {
        "default": e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && ({}).hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n["default"] = e, t && t.set(e, n), n;
}
function HeaderBackButton(param) {
    var disabled = param.disabled, allowFontScaling = param.allowFontScaling, backImage = param.backImage, label = param.label, labelStyle = param.labelStyle, _param_displayMode = param.displayMode, displayMode = _param_displayMode === void 0 ? _reactNative.Platform.OS === 'ios' ? 'default' : 'minimal' : _param_displayMode, onLabelLayout = param.onLabelLayout, onPress = param.onPress, pressColor = param.pressColor, pressOpacity = param.pressOpacity, screenLayout = param.screenLayout, tintColor = param.tintColor, titleLayout = param.titleLayout, _param_truncatedLabel = param.truncatedLabel, truncatedLabel = _param_truncatedLabel === void 0 ? 'Back' : _param_truncatedLabel, _param_accessibilityLabel = param.accessibilityLabel, accessibilityLabel = _param_accessibilityLabel === void 0 ? label && label !== 'Back' ? "" + label + ", back" : 'Go back' : _param_accessibilityLabel, testID = param.testID, style = param.style, href = param.href;
    var _ref = (0, _native.useTheme)(), colors = _ref.colors, fonts = _ref.fonts;
    var direction = (0, _native.useLocale)().direction;
    var _React_useState = _sliced_to_array._(React.useState(null), 2), labelWidth = _React_useState[0], setLabelWidth = _React_useState[1];
    var _React_useState1 = _sliced_to_array._(React.useState(null), 2), truncatedLabelWidth = _React_useState1[0], setTruncatedLabelWidth = _React_useState1[1];
    var renderBackImage = function() {
        if (backImage) {
            return backImage({
                tintColor: tintColor != null ? tintColor : colors.text
            });
        } else {
            return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_HeaderIcon.HeaderIcon, {
                source: _backIcon["default"],
                tintColor: tintColor,
                style: [
                    styles.icon,
                    displayMode !== 'minimal' && styles.iconWithLabel
                ]
            });
        }
    };
    var renderLabel = function() {
        if (displayMode === 'minimal') {
            return null;
        }
        var availableSpace = titleLayout && screenLayout ? (screenLayout.width - titleLayout.width) / 2 - (ICON_WIDTH + _HeaderIcon.ICON_MARGIN) : null;
        var potentialLabelText = displayMode === 'default' ? label : truncatedLabel;
        var finalLabelText = availableSpace && labelWidth && truncatedLabelWidth ? availableSpace > labelWidth ? potentialLabelText : availableSpace > truncatedLabelWidth ? truncatedLabel : null : potentialLabelText;
        var commonStyle = [
            fonts.regular,
            styles.label,
            labelStyle
        ];
        var hiddenStyle = [
            commonStyle,
            {
                position: 'absolute',
                top: 0,
                left: 0,
                opacity: 0
            }
        ];
        var labelElement = /*#__PURE__*/ (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.labelWrapper,
            children: [
                label && displayMode === 'default' ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.Animated.Text, {
                    style: hiddenStyle,
                    numberOfLines: 1,
                    onLayout: function(e) {
                        return setLabelWidth(e.nativeEvent.layout.width);
                    },
                    children: label
                }) : null,
                truncatedLabel ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.Animated.Text, {
                    style: hiddenStyle,
                    numberOfLines: 1,
                    onLayout: function(e) {
                        return setTruncatedLabelWidth(e.nativeEvent.layout.width);
                    },
                    children: truncatedLabel
                }) : null,
                finalLabelText ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.Animated.Text, {
                    accessible: false,
                    onLayout: onLabelLayout,
                    style: [
                        tintColor ? {
                            color: tintColor
                        } : null,
                        commonStyle
                    ],
                    numberOfLines: 1,
                    allowFontScaling: !!allowFontScaling,
                    children: finalLabelText
                }) : null
            ]
        });
        if (backImage || _reactNative.Platform.OS !== 'ios') {
            // When a custom backimage is specified, we can't mask the label
            // Otherwise there might be weird effect due to our mask not being the same as the image
            return labelElement;
        }
        return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_MaskedView.MaskedView, {
            maskElement: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: [
                    styles.iconMaskContainer,
                    // Extend the mask to the center of the screen so that label isn't clipped during animation
                    screenLayout ? {
                        minWidth: screenLayout.width / 2 - 27
                    } : null
                ],
                children: [
                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.Image, {
                        source: _backIconMask["default"],
                        resizeMode: "contain",
                        style: [
                            styles.iconMask,
                            direction === 'rtl' && styles.flip
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.View, {
                        style: styles.iconMaskFillerRect
                    })
                ]
            }),
            children: labelElement
        });
    };
    var handlePress = function() {
        if (onPress) {
            requestAnimationFrame(function() {
                return onPress();
            });
        }
    };
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_HeaderButton.HeaderButton, {
        disabled: disabled,
        href: href,
        accessibilityLabel: accessibilityLabel,
        testID: testID,
        onPress: handlePress,
        pressColor: pressColor,
        pressOpacity: pressOpacity,
        style: [
            styles.container,
            style
        ],
        children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(React.Fragment, {
            children: [
                renderBackImage(),
                renderLabel()
            ]
        })
    });
}
var ICON_WIDTH = _reactNative.Platform.OS === 'ios' ? 13 : 24;
var ICON_MARGIN_END = _reactNative.Platform.OS === 'ios' ? 22 : 3;
var styles = _reactNative.StyleSheet.create({
    container: _extends._({
        paddingHorizontal: 0,
        minWidth: _reactNative.StyleSheet.hairlineWidth
    }, _reactNative.Platform.select({
        ios: null,
        "default": {
            marginVertical: 3,
            marginHorizontal: 11
        }
    })),
    label: {
        fontSize: 17,
        // Title and back label are a bit different width due to title being bold
        // Adjusting the letterSpacing makes them coincide better
        letterSpacing: 0.35
    },
    labelWrapper: {
        // These styles will make sure that the label doesn't fill the available space
        // Otherwise it messes with the measurement of the label
        flexDirection: 'row',
        alignItems: 'flex-start',
        marginEnd: _HeaderIcon.ICON_MARGIN
    },
    icon: {
        width: ICON_WIDTH,
        marginEnd: ICON_MARGIN_END
    },
    iconWithLabel: _reactNative.Platform.OS === 'ios' ? {
        marginEnd: 6
    } : {},
    iconMaskContainer: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center'
    },
    iconMaskFillerRect: {
        flex: 1,
        backgroundColor: '#000'
    },
    iconMask: {
        height: 21,
        width: 13,
        marginStart: -14.5,
        marginVertical: 12,
        alignSelf: 'center'
    },
    flip: {
        transform: 'scaleX(-1)'
    }
}); //# sourceMappingURL=HeaderBackButton.js.map


}),
"2617": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.HeaderBackContext = void 0;
var _getNamedContext = __webpack_require__(53232);
var HeaderBackContext = exports.HeaderBackContext = (0, _getNamedContext.getNamedContext)('HeaderBackContext', undefined); //# sourceMappingURL=HeaderBackContext.js.map


}),
"84180": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(88410);
var _object_without_properties_loose = __webpack_require__(56242);
var _type_of = __webpack_require__(15576);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.HeaderBackground = HeaderBackground;
var _native = __webpack_require__(31326);
var React = _interopRequireWildcard(__webpack_require__(84816));
var _reactNative = __webpack_require__(44963);
var _jsxRuntime = __webpack_require__(31549);
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _type_of._(e)) && "function" != typeof e) return {
        "default": e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && ({}).hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n["default"] = e, t && t.set(e, n), n;
}
function HeaderBackground(_param) {
    var style = _param.style, rest = _object_without_properties_loose._(_param, [
        "style"
    ]);
    var _ref = (0, _native.useTheme)(), colors = _ref.colors, dark = _ref.dark;
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.Animated.View, _extends._({
        style: [
            styles.container,
            _extends._({
                backgroundColor: colors.card,
                borderBottomColor: colors.border
            }, _reactNative.Platform.OS === 'ios' && {
                shadowColor: dark ? 'rgba(255, 255, 255, 0.45)' : 'rgba(0, 0, 0, 1)'
            }),
            style
        ]
    }, rest));
}
var styles = _reactNative.StyleSheet.create({
    container: _extends._({
        flex: 1
    }, _reactNative.Platform.select({
        android: {
            elevation: 4
        },
        ios: {
            shadowOpacity: 0.3,
            shadowRadius: 0,
            shadowOffset: {
                width: 0,
                height: _reactNative.StyleSheet.hairlineWidth
            }
        },
        "default": {
            borderBottomWidth: _reactNative.StyleSheet.hairlineWidth
        }
    }))
}); //# sourceMappingURL=HeaderBackground.js.map


}),
"27873": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.HeaderButton = HeaderButton;
var _reactNative = __webpack_require__(44963);
var _PlatformPressable = __webpack_require__(7536);
var _jsxRuntime = __webpack_require__(31549);
function HeaderButton(param) {
    var disabled = param.disabled, onPress = param.onPress, pressColor = param.pressColor, pressOpacity = param.pressOpacity, accessibilityLabel = param.accessibilityLabel, testID = param.testID, style = param.style, href = param.href, children = param.children;
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_PlatformPressable.PlatformPressable, {
        disabled: disabled,
        href: href,
        accessibilityLabel: accessibilityLabel,
        testID: testID,
        onPress: onPress,
        pressColor: pressColor,
        pressOpacity: pressOpacity,
        android_ripple: androidRipple,
        style: [
            styles.container,
            disabled && styles.disabled,
            style
        ],
        hitSlop: _reactNative.Platform.select({
            ios: undefined,
            "default": {
                top: 16,
                right: 16,
                bottom: 16,
                left: 16
            }
        }),
        children: children
    });
}
var androidRipple = {
    borderless: true,
    foreground: _reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= 23,
    radius: 20
};
var styles = _reactNative.StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: 8,
        // Roundness for iPad hover effect
        borderRadius: 10
    },
    disabled: {
        opacity: 0.5
    }
}); //# sourceMappingURL=HeaderButton.js.map


}),
"38475": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.HeaderHeightContext = void 0;
var _getNamedContext = __webpack_require__(53232);
var HeaderHeightContext = exports.HeaderHeightContext = (0, _getNamedContext.getNamedContext)('HeaderHeightContext', undefined); //# sourceMappingURL=HeaderHeightContext.js.map


}),
"5664": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(88410);
var _object_without_properties_loose = __webpack_require__(56242);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.HeaderIcon = HeaderIcon;
exports.ICON_SIZE = exports.ICON_MARGIN = void 0;
var _native = __webpack_require__(31326);
var _reactNative = __webpack_require__(44963);
var _jsxRuntime = __webpack_require__(31549);
function HeaderIcon(_param) {
    var source = _param.source, style = _param.style, rest = _object_without_properties_loose._(_param, [
        "source",
        "style"
    ]);
    var colors = (0, _native.useTheme)().colors;
    var direction = (0, _native.useLocale)().direction;
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.Image, _extends._({
        source: source,
        resizeMode: "contain",
        fadeDuration: 0,
        tintColor: colors.text,
        style: [
            styles.icon,
            direction === 'rtl' && styles.flip,
            style
        ]
    }, rest));
}
var ICON_SIZE = exports.ICON_SIZE = _reactNative.Platform.OS === 'ios' ? 21 : 24;
var ICON_MARGIN = exports.ICON_MARGIN = _reactNative.Platform.OS === 'ios' ? 8 : 3;
var styles = _reactNative.StyleSheet.create({
    icon: {
        width: ICON_SIZE,
        height: ICON_SIZE,
        margin: ICON_MARGIN
    },
    flip: {
        transform: 'scaleX(-1)'
    }
}); //# sourceMappingURL=HeaderIcon.js.map


}),
"30641": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(88410);
var _object_without_properties_loose = __webpack_require__(56242);
var _sliced_to_array = __webpack_require__(38097);
var _type_of = __webpack_require__(15576);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.HeaderSearchBar = void 0;
var _native = __webpack_require__(31326);
var _color = _interopRequireDefault(__webpack_require__(80204));
var React = _interopRequireWildcard(__webpack_require__(84816));
var _reactNative = __webpack_require__(44963);
var _clearIcon = _interopRequireDefault(__webpack_require__(91665));
var _closeIcon = _interopRequireDefault(__webpack_require__(67325));
var _searchIcon = _interopRequireDefault(__webpack_require__(40129));
var _PlatformPressable = __webpack_require__(7536);
var _Text = __webpack_require__(94540);
var _HeaderButton = __webpack_require__(27873);
var _HeaderIcon = __webpack_require__(5664);
var _jsxRuntime = __webpack_require__(31549);
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _type_of._(e)) && "function" != typeof e) return {
        "default": e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && ({}).hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n["default"] = e, t && t.set(e, n), n;
}
function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
        "default": e
    };
}
var INPUT_TYPE_TO_MODE = {
    text: 'text',
    number: 'numeric',
    phone: 'tel',
    email: 'email'
};
var useNativeDriver = _reactNative.Platform.OS !== 'web';
function HeaderSearchBarInternal(_param, ref) {
    var visible = _param.visible, inputType = _param.inputType, _param_autoFocus = _param.autoFocus, autoFocus = _param_autoFocus === void 0 ? true : _param_autoFocus, _param_placeholder = _param.placeholder, placeholder = _param_placeholder === void 0 ? 'Search' : _param_placeholder, _param_cancelButtonText = _param.cancelButtonText, cancelButtonText = _param_cancelButtonText === void 0 ? 'Cancel' : _param_cancelButtonText, onChangeText = _param.onChangeText, onClose = _param.onClose, style = _param.style, rest = _object_without_properties_loose._(_param, [
        "visible",
        "inputType",
        "autoFocus",
        "placeholder",
        "cancelButtonText",
        "onChangeText",
        "onClose",
        "style"
    ]);
    var navigation = (0, _native.useNavigation)();
    var _ref = (0, _native.useTheme)(), dark = _ref.dark, colors = _ref.colors, fonts = _ref.fonts;
    var _React_useState = _sliced_to_array._(React.useState(''), 2), value = _React_useState[0], setValue = _React_useState[1];
    var _React_useState1 = _sliced_to_array._(React.useState(visible), 2), rendered = _React_useState1[0], setRendered = _React_useState1[1];
    var _React_useState2 = _sliced_to_array._(React.useState(function() {
        return new _reactNative.Animated.Value(visible ? 1 : 0);
    }), 1), visibleAnim = _React_useState2[0];
    var _React_useState3 = _sliced_to_array._(React.useState(function() {
        return new _reactNative.Animated.Value(0);
    }), 1), clearVisibleAnim = _React_useState3[0];
    var visibleValueRef = React.useRef(visible);
    var clearVisibleValueRef = React.useRef(false);
    var inputRef = React.useRef(null);
    React.useEffect(function() {
        // Avoid act warning in tests just by rendering header
        if (visible === visibleValueRef.current) {
            return;
        }
        _reactNative.Animated.timing(visibleAnim, {
            toValue: visible ? 1 : 0,
            duration: 100,
            useNativeDriver: useNativeDriver
        }).start(function(param) {
            var finished = param.finished;
            if (finished) {
                setRendered(visible);
                visibleValueRef.current = visible;
            }
        });
        return function() {
            visibleAnim.stopAnimation();
        };
    }, [
        visible,
        visibleAnim
    ]);
    var hasText = value !== '';
    React.useEffect(function() {
        if (clearVisibleValueRef.current === hasText) {
            return;
        }
        _reactNative.Animated.timing(clearVisibleAnim, {
            toValue: hasText ? 1 : 0,
            duration: 100,
            useNativeDriver: useNativeDriver
        }).start(function(param) {
            var finished = param.finished;
            if (finished) {
                clearVisibleValueRef.current = hasText;
            }
        });
    }, [
        clearVisibleAnim,
        hasText
    ]);
    var clearText = React.useCallback(function() {
        var _inputRef_current, _inputRef_current1;
        (_inputRef_current = inputRef.current) == null ? void 0 : _inputRef_current.clear();
        (_inputRef_current1 = inputRef.current) == null ? void 0 : _inputRef_current1.focus();
        setValue('');
    }, []);
    var onClear = React.useCallback(function() {
        clearText();
        // FIXME: figure out how to create a SyntheticEvent
        // @ts-expect-error: we don't have the native event here
        onChangeText == null ? void 0 : onChangeText({
            nativeEvent: {
                text: ''
            }
        });
    }, [
        clearText,
        onChangeText
    ]);
    var cancelSearch = React.useCallback(function() {
        onClear();
        onClose();
    }, [
        onClear,
        onClose
    ]);
    React.useEffect(function() {
        return navigation == null ? void 0 : navigation.addListener('blur', cancelSearch);
    }, [
        cancelSearch,
        navigation
    ]);
    React.useImperativeHandle(ref, function() {
        return {
            focus: function() {
                var _inputRef_current;
                (_inputRef_current = inputRef.current) == null ? void 0 : _inputRef_current.focus();
            },
            blur: function() {
                var _inputRef_current;
                (_inputRef_current = inputRef.current) == null ? void 0 : _inputRef_current.blur();
            },
            setText: function(text) {
                var _inputRef_current;
                (_inputRef_current = inputRef.current) == null ? void 0 : _inputRef_current.setNativeProps({
                    text: text
                });
                setValue(text);
            },
            clearText: clearText,
            cancelSearch: cancelSearch
        };
    }, [
        cancelSearch,
        clearText
    ]);
    if (!visible && !rendered) {
        return null;
    }
    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
        pointerEvents: visible ? 'auto' : 'none',
        accessibilityLiveRegion: "polite",
        accessibilityElementsHidden: !visible,
        importantForAccessibility: visible ? 'auto' : 'no-hide-descendants',
        style: [
            styles.container,
            {
                opacity: visibleAnim
            },
            style
        ],
        children: [
            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.searchbarContainer,
                children: [
                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(_HeaderIcon.HeaderIcon, {
                        source: _searchIcon["default"],
                        style: styles.inputSearchIcon
                    }),
                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.TextInput, _extends._({}, rest, {
                        ref: inputRef,
                        onChange: onChangeText,
                        onChangeText: setValue,
                        autoFocus: autoFocus,
                        inputMode: INPUT_TYPE_TO_MODE[inputType != null ? inputType : 'text'],
                        placeholder: placeholder,
                        placeholderTextColor: (0, _color["default"])(colors.text).alpha(0.5).string(),
                        cursorColor: colors.primary,
                        selectionHandleColor: colors.primary,
                        selectionColor: (0, _color["default"])(colors.primary).alpha(0.3).string(),
                        style: [
                            fonts.regular,
                            styles.searchbar,
                            {
                                backgroundColor: _reactNative.Platform.select({
                                    ios: dark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)',
                                    "default": 'transparent'
                                }),
                                color: colors.text,
                                borderBottomColor: colors.border
                            }
                        ]
                    })),
                    _reactNative.Platform.OS === 'ios' ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(_PlatformPressable.PlatformPressable, {
                        onPress: onClear,
                        style: [
                            {
                                opacity: clearVisibleAnim,
                                transform: [
                                    {
                                        scale: clearVisibleAnim
                                    }
                                ]
                            },
                            styles.clearButton
                        ],
                        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.Image, {
                            source: _clearIcon["default"],
                            resizeMode: "contain",
                            tintColor: colors.text,
                            style: styles.clearIcon
                        })
                    }) : null
                ]
            }),
            _reactNative.Platform.OS !== 'ios' ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(_HeaderButton.HeaderButton, {
                onPress: function() {
                    if (value) {
                        onClear();
                    } else {
                        onClose();
                    }
                },
                style: styles.closeButton,
                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_HeaderIcon.HeaderIcon, {
                    source: _closeIcon["default"]
                })
            }) : null,
            _reactNative.Platform.OS === 'ios' ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(_PlatformPressable.PlatformPressable, {
                onPress: cancelSearch,
                style: styles.cancelButton,
                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_Text.Text, {
                    style: [
                        fonts.regular,
                        {
                            color: colors.primary
                        },
                        styles.cancelText
                    ],
                    children: cancelButtonText
                })
            }) : null
        ]
    });
}
var styles = _reactNative.StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'row',
        alignItems: 'stretch'
    },
    inputSearchIcon: _extends._({
        position: 'absolute',
        opacity: 0.5,
        left: _reactNative.Platform.select({
            ios: 16,
            "default": 4
        }),
        top: _reactNative.Platform.select({
            ios: -1,
            "default": 17
        })
    }, _reactNative.Platform.select({
        ios: {
            height: 18,
            width: 18
        },
        "default": {}
    })),
    closeButton: {
        position: 'absolute',
        opacity: 0.5,
        right: _reactNative.Platform.select({
            ios: 0,
            "default": 8
        }),
        top: _reactNative.Platform.select({
            ios: -2,
            "default": 17
        })
    },
    clearButton: {
        position: 'absolute',
        right: 0,
        top: -7,
        bottom: 0,
        justifyContent: 'center',
        padding: 8
    },
    clearIcon: {
        height: 16,
        width: 16,
        opacity: 0.5
    },
    cancelButton: {
        alignSelf: 'center',
        top: -4
    },
    cancelText: {
        fontSize: 17,
        marginHorizontal: 12
    },
    searchbarContainer: {
        flex: 1
    },
    searchbar: _reactNative.Platform.select({
        ios: {
            flex: 1,
            fontSize: 17,
            paddingHorizontal: 32,
            marginLeft: 16,
            marginTop: -2,
            marginBottom: 5,
            borderRadius: 8
        },
        "default": {
            flex: 1,
            fontSize: 18,
            paddingHorizontal: 36,
            marginRight: 8,
            marginTop: 8,
            marginBottom: 8,
            borderBottomWidth: 1
        }
    })
});
var HeaderSearchBar = exports.HeaderSearchBar = /*#__PURE__*/ React.forwardRef(HeaderSearchBarInternal); //# sourceMappingURL=HeaderSearchBar.js.map


}),
"98213": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.HeaderShownContext = void 0;
var _getNamedContext = __webpack_require__(53232);
var HeaderShownContext = exports.HeaderShownContext = (0, _getNamedContext.getNamedContext)('HeaderShownContext', false); //# sourceMappingURL=HeaderShownContext.js.map


}),
"3354": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(88410);
var _object_without_properties_loose = __webpack_require__(56242);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.HeaderTitle = HeaderTitle;
var _native = __webpack_require__(31326);
var _reactNative = __webpack_require__(44963);
var _jsxRuntime = __webpack_require__(31549);
function HeaderTitle(_param) {
    var tintColor = _param.tintColor, style = _param.style, rest = _object_without_properties_loose._(_param, [
        "tintColor",
        "style"
    ]);
    var _ref = (0, _native.useTheme)(), colors = _ref.colors, fonts = _ref.fonts;
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.Animated.Text, _extends._({
        accessibilityRole: "header",
        "aria-level": "1",
        numberOfLines: 1
    }, rest, {
        style: [
            {
                color: tintColor === undefined ? colors.text : tintColor
            },
            _reactNative.Platform.select({
                ios: fonts.bold,
                "default": fonts.medium
            }),
            styles.title,
            style
        ]
    }));
}
var styles = _reactNative.StyleSheet.create({
    title: _reactNative.Platform.select({
        ios: {
            fontSize: 17
        },
        android: {
            fontSize: 20
        },
        "default": {
            fontSize: 18
        }
    })
}); //# sourceMappingURL=HeaderTitle.js.map


}),
"8960": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getDefaultHeaderHeight = getDefaultHeaderHeight;
var _reactNative = __webpack_require__(44963);
function getDefaultHeaderHeight(layout, modalPresentation, topInset) {
    var headerHeight;
    // On models with Dynamic Island the status bar height is smaller than the safe area top inset.
    var hasDynamicIsland = _reactNative.Platform.OS === 'ios' && topInset > 50;
    var statusBarHeight = hasDynamicIsland ? topInset - (5 + 1 / _reactNative.PixelRatio.get()) : topInset;
    var isLandscape = layout.width > layout.height;
    if (_reactNative.Platform.OS === 'ios') {
        if (_reactNative.Platform.isPad || _reactNative.Platform.isTV) {
            if (modalPresentation) {
                headerHeight = 56;
            } else {
                headerHeight = 50;
            }
        } else {
            if (isLandscape) {
                headerHeight = 32;
            } else {
                if (modalPresentation) {
                    headerHeight = 56;
                } else {
                    headerHeight = 44;
                }
            }
        }
    } else {
        headerHeight = 64;
    }
    return headerHeight + statusBarHeight;
} //# sourceMappingURL=getDefaultHeaderHeight.js.map


}),
"26295": (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getHeaderTitle = getHeaderTitle;
function getHeaderTitle(options, fallback) {
    return typeof options.headerTitle === 'string' ? options.headerTitle : options.title !== undefined ? options.title : fallback;
} //# sourceMappingURL=getHeaderTitle.js.map


}),
"92642": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _type_of = __webpack_require__(15576);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.useHeaderHeight = useHeaderHeight;
var React = _interopRequireWildcard(__webpack_require__(84816));
var _HeaderHeightContext = __webpack_require__(38475);
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _type_of._(e)) && "function" != typeof e) return {
        "default": e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && ({}).hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n["default"] = e, t && t.set(e, n), n;
}
function useHeaderHeight() {
    var height = React.useContext(_HeaderHeightContext.HeaderHeightContext);
    if (height === undefined) {
        throw new Error("Couldn't find the header height. Are you inside a screen in a navigator with a header?");
    }
    return height;
} //# sourceMappingURL=useHeaderHeight.js.map


}),
"1982": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(88410);
var _object_without_properties_loose = __webpack_require__(56242);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Label = Label;
var _reactNative = __webpack_require__(44963);
var _Text = __webpack_require__(94540);
var _jsxRuntime = __webpack_require__(31549);
function Label(_param) {
    var tintColor = _param.tintColor, style = _param.style, rest = _object_without_properties_loose._(_param, [
        "tintColor",
        "style"
    ]);
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_Text.Text, _extends._({
        numberOfLines: 1
    }, rest, {
        style: [
            styles.label,
            tintColor != null && {
                color: tintColor
            },
            style
        ]
    }));
}
var styles = _reactNative.StyleSheet.create({
    label: {
        textAlign: 'center',
        backgroundColor: 'transparent'
    }
}); //# sourceMappingURL=Label.js.map


}),
"13310": (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getLabel = getLabel;
function getLabel(options, fallback) {
    return options.label !== undefined ? options.label : options.title !== undefined ? options.title : fallback;
} //# sourceMappingURL=getLabel.js.map


}),
"13357": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "MaskedView", ({
    enumerable: true,
    get: function get() {
        return _MaskedViewNative.MaskedView;
    }
}));
var _MaskedViewNative = __webpack_require__(24754); //# sourceMappingURL=MaskedView.android.js.map


}),
"24754": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(88410);
var _object_without_properties_loose = __webpack_require__(56242);
var _type_of = __webpack_require__(15576);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.MaskedView = MaskedView;
var React = _interopRequireWildcard(__webpack_require__(84816));
var _reactNative = __webpack_require__(44963);
var _jsxRuntime = __webpack_require__(31549);
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _type_of._(e)) && "function" != typeof e) return {
        "default": e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && ({}).hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n["default"] = e, t && t.set(e, n), n;
}
/**
 * The native MaskedView that we explicitly re-export for supported platforms: Android, iOS.
 */ var RNCMaskedView;
try {
    // Add try/catch to support usage even if it's not installed, since it's optional.
    // Newer versions of Metro will handle it properly.
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    RNCMaskedView = __webpack_require__(Object(function webpackMissingModule() { var e = new Error("Cannot find module '@react-native-masked-view/masked-view'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
} catch (e) {
// Ignore
}
var isMaskedViewAvailable = _reactNative.UIManager.getViewManagerConfig('RNCMaskedView') != null;
function MaskedView(_param) {
    var children = _param.children, rest = _object_without_properties_loose._(_param, [
        "children"
    ]);
    if (isMaskedViewAvailable && RNCMaskedView) {
        return /*#__PURE__*/ (0, _jsxRuntime.jsx)(RNCMaskedView, _extends._({}, rest, {
            children: children
        }));
    }
    return children;
} //# sourceMappingURL=MaskedViewNative.js.map


}),
"73476": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.MissingIcon = MissingIcon;
var _reactNative = __webpack_require__(44963);
var _Text = __webpack_require__(94540);
var _jsxRuntime = __webpack_require__(31549);
function MissingIcon(param) {
    var color = param.color, size = param.size, style = param.style;
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_Text.Text, {
        style: [
            styles.icon,
            {
                color: color,
                fontSize: size
            },
            style
        ],
        children: "\u23F7"
    });
}
var styles = _reactNative.StyleSheet.create({
    icon: {
        backgroundColor: 'transparent'
    }
}); //# sourceMappingURL=MissingIcon.js.map


}),
"7536": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(88410);
var _object_without_properties_loose = __webpack_require__(56242);
var _sliced_to_array = __webpack_require__(38097);
var _tagged_template_literal_loose = __webpack_require__(35158);
var _type_of = __webpack_require__(15576);
function _templateObject() {
    var data = _tagged_template_literal_loose._([
        "\n  .",
        " {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-radius: inherit;\n    background-color: var(--overlay-color);\n    opacity: 0;\n    transition: opacity 0.15s;\n  }\n\n  a:hover > .",
        ", button:hover > .",
        " {\n    opacity: var(--overlay-hover-opacity);\n  }\n\n  a:active > .",
        ", button:active > .",
        " {\n    opacity: var(--overlay-active-opacity);\n  }\n"
    ]);
    _templateObject = function _templateObject() {
        return data;
    };
    return data;
}
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.PlatformPressable = PlatformPressable;
var _native = __webpack_require__(31326);
var React = _interopRequireWildcard(__webpack_require__(84816));
var _reactNative = __webpack_require__(44963);
var _jsxRuntime = __webpack_require__(31549);
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _type_of._(e)) && "function" != typeof e) return {
        "default": e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && ({}).hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n["default"] = e, t && t.set(e, n), n;
}
var AnimatedPressable = _reactNative.Animated.createAnimatedComponent(_reactNative.Pressable);
var ANDROID_VERSION_LOLLIPOP = 21;
var ANDROID_SUPPORTS_RIPPLE = _reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_LOLLIPOP;
var useNativeDriver = _reactNative.Platform.OS !== 'web';
/**
 * PlatformPressable provides an abstraction on top of Pressable to handle platform differences.
 */ function PlatformPressable(_param) {
    var disabled = _param.disabled, onPress = _param.onPress, onPressIn = _param.onPressIn, onPressOut = _param.onPressOut, android_ripple = _param.android_ripple, pressColor = _param.pressColor, _param_pressOpacity = _param.pressOpacity, pressOpacity = _param_pressOpacity === void 0 ? 0.3 : _param_pressOpacity, hoverEffect = _param.hoverEffect, style = _param.style, children = _param.children, rest = _object_without_properties_loose._(_param, [
        "disabled",
        "onPress",
        "onPressIn",
        "onPressOut",
        "android_ripple",
        "pressColor",
        "pressOpacity",
        "hoverEffect",
        "style",
        "children"
    ]);
    var dark = (0, _native.useTheme)().dark;
    var _React_useState = _sliced_to_array._(React.useState(function() {
        return new _reactNative.Animated.Value(1);
    }), 1), opacity = _React_useState[0];
    var animateTo = function(toValue, duration) {
        if (ANDROID_SUPPORTS_RIPPLE) {
            return;
        }
        _reactNative.Animated.timing(opacity, {
            toValue: toValue,
            duration: duration,
            easing: _reactNative.Easing.inOut(_reactNative.Easing.quad),
            useNativeDriver: useNativeDriver
        }).start();
    };
    var handlePress = function(e) {
        if (_reactNative.Platform.OS === 'web' && rest.href != null) {
            var // @ts-expect-error: these properties exist on web, but not in React Native
            _e_currentTarget;
            // @ts-expect-error: these properties exist on web, but not in React Native
            var hasModifierKey = e.metaKey || e.altKey || e.ctrlKey || e.shiftKey; // ignore clicks with modifier keys
            // @ts-expect-error: these properties exist on web, but not in React Native
            var isLeftClick = e.button == null || e.button === 0; // only handle left clicks
            var isSelfTarget = [
                undefined,
                null,
                '',
                'self'
            ].includes((_e_currentTarget = e.currentTarget) == null ? void 0 : _e_currentTarget.target); // let browser handle "target=_blank" etc.
            if (!hasModifierKey && isLeftClick && isSelfTarget) {
                e.preventDefault();
                onPress == null ? void 0 : onPress(e);
            }
        } else {
            onPress == null ? void 0 : onPress(e);
        }
    };
    var handlePressIn = function(e) {
        animateTo(pressOpacity, 0);
        onPressIn == null ? void 0 : onPressIn(e);
    };
    var handlePressOut = function(e) {
        animateTo(1, 200);
        onPressOut == null ? void 0 : onPressOut(e);
    };
    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(AnimatedPressable, _extends._({
        accessible: true,
        accessibilityRole: _reactNative.Platform.OS === 'web' && rest.href != null ? 'link' : 'button',
        onPress: disabled ? undefined : handlePress,
        onPressIn: handlePressIn,
        onPressOut: handlePressOut,
        android_ripple: ANDROID_SUPPORTS_RIPPLE ? _extends._({
            color: pressColor !== undefined ? pressColor : dark ? 'rgba(255, 255, 255, .32)' : 'rgba(0, 0, 0, .32)'
        }, android_ripple) : undefined,
        style: [
            {
                cursor: _reactNative.Platform.OS === 'web' || _reactNative.Platform.OS === 'ios' ? // Pointer cursor on web
                // Hover effect on iPad and visionOS
                'pointer' : 'auto',
                opacity: !ANDROID_SUPPORTS_RIPPLE ? opacity : 1
            },
            style
        ]
    }, rest, {
        children: [
            /*#__PURE__*/ (0, _jsxRuntime.jsx)(HoverEffect, _extends._({}, hoverEffect)),
            children
        ]
    }));
}
var css = String.raw;
var CLASS_NAME = "__react-navigation_elements_Pressable_hover";
var CSS_TEXT = css(_templateObject(), CLASS_NAME, CLASS_NAME, CLASS_NAME, CLASS_NAME, CLASS_NAME);
var HoverEffect = function(param) {
    var color = param.color, _param_hoverOpacity = param.hoverOpacity, hoverOpacity = _param_hoverOpacity === void 0 ? 0.08 : _param_hoverOpacity, _param_activeOpacity = param.activeOpacity, activeOpacity = _param_activeOpacity === void 0 ? 0.16 : _param_activeOpacity;
    if (_reactNative.Platform.OS !== 'web' || color == null) {
        return null;
    }
    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxRuntime.jsx)("style", {
                // @ts-expect-error: href and precedence are only available on React 19
                href: CLASS_NAME,
                precedence: "elements",
                children: CSS_TEXT
            }),
            /*#__PURE__*/ (0, _jsxRuntime.jsx)("div", {
                className: CLASS_NAME,
                style: {
                    // @ts-expect-error: CSS variables are not typed
                    '--overlay-color': color,
                    '--overlay-hover-opacity': hoverOpacity,
                    '--overlay-active-opacity': activeOpacity
                }
            })
        ]
    });
}; //# sourceMappingURL=PlatformPressable.js.map


}),
"68334": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(88410);
var _object_without_properties_loose = __webpack_require__(56242);
var _type_of = __webpack_require__(15576);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ResourceSavingView = ResourceSavingView;
var React = _interopRequireWildcard(__webpack_require__(84816));
var _reactNative = __webpack_require__(44963);
var _jsxRuntime = __webpack_require__(31549);
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _type_of._(e)) && "function" != typeof e) return {
        "default": e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && ({}).hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n["default"] = e, t && t.set(e, n), n;
}
var FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container
function ResourceSavingView(_param) {
    var visible = _param.visible, children = _param.children, style = _param.style, rest = _object_without_properties_loose._(_param, [
        "visible",
        "children",
        "style"
    ]);
    if (_reactNative.Platform.OS === 'web') {
        return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.View, _extends._({
            hidden: !visible,
            style: [
                {
                    display: visible ? 'flex' : 'none'
                },
                styles.container,
                style
            ],
            pointerEvents: visible ? 'auto' : 'none'
        }, rest, {
            children: children
        }));
    }
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [
            styles.container,
            style
        ],
        pointerEvents: visible ? 'auto' : 'none',
        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.View, {
            collapsable: false,
            removeClippedSubviews: // On iOS & macOS, set removeClippedSubviews to true only when not focused
            // This is an workaround for a bug where the clipped view never re-appears
            _reactNative.Platform.OS === 'ios' || _reactNative.Platform.OS === 'macos' ? !visible : true,
            pointerEvents: visible ? 'auto' : 'none',
            style: visible ? styles.attached : styles.detached,
            children: children
        })
    });
}
var styles = _reactNative.StyleSheet.create({
    container: {
        flex: 1,
        overflow: 'hidden'
    },
    attached: {
        flex: 1
    },
    detached: {
        flex: 1,
        top: FAR_FAR_AWAY
    }
}); //# sourceMappingURL=ResourceSavingView.js.map


}),
"27101": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(88410);
var _sliced_to_array = __webpack_require__(38097);
var _type_of = __webpack_require__(15576);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.SafeAreaProviderCompat = SafeAreaProviderCompat;
var React = _interopRequireWildcard(__webpack_require__(84816));
var _reactNative = __webpack_require__(44963);
var _reactNativeSafeAreaContext = __webpack_require__(24144);
var _jsxRuntime = __webpack_require__(31549);
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _type_of._(e)) && "function" != typeof e) return {
        "default": e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && ({}).hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n["default"] = e, t && t.set(e, n), n;
}
var _reactNative_Dimensions_get = _reactNative.Dimensions.get('window'), _reactNative_Dimensions_get_width = _reactNative_Dimensions_get.width, width = _reactNative_Dimensions_get_width === void 0 ? 0 : _reactNative_Dimensions_get_width, _reactNative_Dimensions_get_height = _reactNative_Dimensions_get.height, height = _reactNative_Dimensions_get_height === void 0 ? 0 : _reactNative_Dimensions_get_height;
// To support SSR on web, we need to have empty insets for initial values
// Otherwise there can be mismatch between SSR and client output
// We also need to specify empty values to support tests environments
var initialMetrics = _reactNative.Platform.OS === 'web' || _reactNativeSafeAreaContext.initialWindowMetrics == null ? {
    frame: {
        x: 0,
        y: 0,
        width: width,
        height: height
    },
    insets: {
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
    }
} : _reactNativeSafeAreaContext.initialWindowMetrics;
function SafeAreaProviderCompat(param) {
    var children = param.children, style = param.style;
    var insets = React.useContext(_reactNativeSafeAreaContext.SafeAreaInsetsContext);
    if (insets) {
        // If we already have insets, don't wrap the stack in another safe area provider
        // This avoids an issue with updates at the cost of potentially incorrect values
        // https://github.com/react-navigation/react-navigation/issues/174
        return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [
                styles.container,
                style
            ],
            children: children
        });
    }
    if (_reactNative.Platform.OS === 'web') {
        children = /*#__PURE__*/ (0, _jsxRuntime.jsx)(SafeAreaFrameProvider, {
            initialMetrics: initialMetrics,
            children: children
        });
    }
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNativeSafeAreaContext.SafeAreaProvider, {
        initialMetrics: initialMetrics,
        style: style,
        children: children
    });
}
// FIXME: On the Web, the safe area frame value doesn't update on resize
// So we workaround this by measuring the frame on resize
var SafeAreaFrameProvider = function(param) {
    var initialMetrics = param.initialMetrics, children = param.children;
    var element = React.useRef(null);
    var _React_useState = _sliced_to_array._(React.useState(initialMetrics.frame), 2), frame = _React_useState[0], setFrame = _React_useState[1];
    React.useEffect(function() {
        if (element.current == null) {
            return;
        }
        var rect = element.current.getBoundingClientRect();
        // eslint-disable-next-line @eslint-react/hooks-extra/no-direct-set-state-in-use-effect
        setFrame({
            x: rect.x,
            y: rect.y,
            width: rect.width,
            height: rect.height
        });
        var timeout;
        var observer = new ResizeObserver(function(entries) {
            var entry = entries[0];
            if (entry) {
                var _entry_contentRect = entry.contentRect, x = _entry_contentRect.x, y = _entry_contentRect.y, width = _entry_contentRect.width, height = _entry_contentRect.height;
                // Debounce the frame updates to avoid too many updates in a short time
                clearTimeout(timeout);
                timeout = setTimeout(function() {
                    setFrame({
                        x: x,
                        y: y,
                        width: width,
                        height: height
                    });
                }, 100);
            }
        });
        observer.observe(element.current);
        return function() {
            observer.disconnect();
            clearTimeout(timeout);
        };
    }, []);
    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(_reactNativeSafeAreaContext.SafeAreaFrameContext.Provider, {
        value: frame,
        children: [
            /*#__PURE__*/ (0, _jsxRuntime.jsx)("div", {
                ref: element,
                style: _extends._({}, _reactNative.StyleSheet.absoluteFillObject, {
                    pointerEvents: 'none',
                    visibility: 'hidden'
                })
            }),
            children
        ]
    });
};
SafeAreaProviderCompat.initialMetrics = initialMetrics;
var styles = _reactNative.StyleSheet.create({
    container: {
        flex: 1
    }
}); //# sourceMappingURL=SafeAreaProviderCompat.js.map


}),
"94311": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _sliced_to_array = __webpack_require__(38097);
var _type_of = __webpack_require__(15576);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Screen = Screen;
var _native = __webpack_require__(31326);
var React = _interopRequireWildcard(__webpack_require__(84816));
var _reactNative = __webpack_require__(44963);
var _reactNativeSafeAreaContext = __webpack_require__(24144);
var _Background = __webpack_require__(17990);
var _getDefaultHeaderHeight = __webpack_require__(8960);
var _HeaderHeightContext = __webpack_require__(38475);
var _HeaderShownContext = __webpack_require__(98213);
var _jsxRuntime = __webpack_require__(31549);
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _type_of._(e)) && "function" != typeof e) return {
        "default": e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && ({}).hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n["default"] = e, t && t.set(e, n), n;
}
function Screen(props) {
    var dimensions = (0, _reactNativeSafeAreaContext.useSafeAreaFrame)();
    var insets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)();
    var isParentHeaderShown = React.useContext(_HeaderShownContext.HeaderShownContext);
    var parentHeaderHeight = React.useContext(_HeaderHeightContext.HeaderHeightContext);
    var focused = props.focused, _props_modal = props.modal, modal = _props_modal === void 0 ? false : _props_modal, header = props.header, _props_headerShown = props.headerShown, headerShown = _props_headerShown === void 0 ? true : _props_headerShown, headerTransparent = props.headerTransparent, _props_headerStatusBarHeight = props.// eslint-disable-next-line @eslint-react/no-unstable-default-props
    headerStatusBarHeight, headerStatusBarHeight = _props_headerStatusBarHeight === void 0 ? isParentHeaderShown ? 0 : insets.top : _props_headerStatusBarHeight, navigation = props.navigation, route = props.route, children = props.children, style = props.style;
    var _React_useState = _sliced_to_array._(React.useState(function() {
        return (0, _getDefaultHeaderHeight.getDefaultHeaderHeight)(dimensions, modal, headerStatusBarHeight);
    }), 2), headerHeight = _React_useState[0], setHeaderHeight = _React_useState[1];
    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(_Background.Background, {
        accessibilityElementsHidden: !focused,
        importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',
        style: [
            styles.container,
            style
        ],
        collapsable: false,
        children: [
            headerShown ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(_native.NavigationContext.Provider, {
                value: navigation,
                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_native.NavigationRouteContext.Provider, {
                    value: route,
                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.View, {
                        pointerEvents: "box-none",
                        onLayout: function(e) {
                            var height = e.nativeEvent.layout.height;
                            setHeaderHeight(height);
                        },
                        style: [
                            styles.header,
                            headerTransparent ? styles.absolute : null
                        ],
                        children: header
                    })
                })
            }) : null,
            /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: styles.content,
                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_HeaderShownContext.HeaderShownContext.Provider, {
                    value: isParentHeaderShown || headerShown !== false,
                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_HeaderHeightContext.HeaderHeightContext.Provider, {
                        value: headerShown ? headerHeight : parentHeaderHeight != null ? parentHeaderHeight : 0,
                        children: children
                    })
                })
            })
        ]
    });
}
var styles = _reactNative.StyleSheet.create({
    container: {
        flex: 1
    },
    content: {
        flex: 1
    },
    header: {
        zIndex: 1
    },
    absolute: {
        position: 'absolute',
        top: 0,
        start: 0,
        end: 0
    }
}); //# sourceMappingURL=Screen.js.map


}),
"94540": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(88410);
var _object_without_properties_loose = __webpack_require__(56242);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Text = Text;
var _native = __webpack_require__(31326);
var _reactNative = __webpack_require__(44963);
var _jsxRuntime = __webpack_require__(31549);
// eslint-disable-next-line no-restricted-imports
function Text(_param) {
    var style = _param.style, rest = _object_without_properties_loose._(_param, [
        "style"
    ]);
    var _ref = (0, _native.useTheme)(), colors = _ref.colors, fonts = _ref.fonts;
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.Text, _extends._({}, rest, {
        style: [
            {
                color: colors.text
            },
            fonts.regular,
            style
        ]
    }));
} //# sourceMappingURL=Text.js.map


}),
"3098": (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getDefaultSidebarWidth = void 0;
var APPROX_APP_BAR_HEIGHT = 56;
var DEFAULT_DRAWER_WIDTH = 360;
var getDefaultSidebarWidth = function(param) {
    var width = param.width;
    /**
   * Default sidebar width is 360dp
   * On screens smaller than 320dp, ideally the drawer would collapse to a tab bar
   * https://m3.material.io/components/navigation-drawer/specs
   */ if (width - APPROX_APP_BAR_HEIGHT <= 360) {
        return width - APPROX_APP_BAR_HEIGHT;
    }
    return DEFAULT_DRAWER_WIDTH;
};
exports.getDefaultSidebarWidth = getDefaultSidebarWidth; //# sourceMappingURL=getDefaultSidebarWidth.js.map


}),
"53232": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _type_of = __webpack_require__(15576);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getNamedContext = getNamedContext;
var React = _interopRequireWildcard(__webpack_require__(84816));
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _type_of._(e)) && "function" != typeof e) return {
        "default": e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && ({}).hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n["default"] = e, t && t.set(e, n), n;
}
var contexts = '__react_navigation__elements_contexts';
var _globalThis_contexts;
// We use a global variable to keep our contexts so that we can reuse same contexts across packages
globalThis[contexts] = (_globalThis_contexts = globalThis[contexts]) != null ? _globalThis_contexts : new Map();
function getNamedContext(name, initialValue) {
    var context = globalThis[contexts].get(name);
    if (context) {
        return context;
    }
    context = /*#__PURE__*/ React.createContext(initialValue);
    context.displayName = name;
    globalThis[contexts].set(name, context);
    return context;
} //# sourceMappingURL=getNamedContext.js.map


}),
"52477": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _exportNames = {
    Assets: true,
    Background: true,
    Button: true,
    getDefaultSidebarWidth: true,
    getDefaultHeaderHeight: true,
    getHeaderTitle: true,
    Header: true,
    HeaderBackButton: true,
    HeaderBackContext: true,
    HeaderBackground: true,
    HeaderButton: true,
    HeaderHeightContext: true,
    HeaderShownContext: true,
    HeaderTitle: true,
    useHeaderHeight: true,
    getLabel: true,
    Label: true,
    MissingIcon: true,
    PlatformPressable: true,
    ResourceSavingView: true,
    SafeAreaProviderCompat: true,
    Screen: true,
    Text: true
};
exports.Assets = void 0;
Object.defineProperty(exports, "Background", ({
    enumerable: true,
    get: function get() {
        return _Background.Background;
    }
}));
Object.defineProperty(exports, "Button", ({
    enumerable: true,
    get: function get() {
        return _Button.Button;
    }
}));
Object.defineProperty(exports, "Header", ({
    enumerable: true,
    get: function get() {
        return _Header.Header;
    }
}));
Object.defineProperty(exports, "HeaderBackButton", ({
    enumerable: true,
    get: function get() {
        return _HeaderBackButton.HeaderBackButton;
    }
}));
Object.defineProperty(exports, "HeaderBackContext", ({
    enumerable: true,
    get: function get() {
        return _HeaderBackContext.HeaderBackContext;
    }
}));
Object.defineProperty(exports, "HeaderBackground", ({
    enumerable: true,
    get: function get() {
        return _HeaderBackground.HeaderBackground;
    }
}));
Object.defineProperty(exports, "HeaderButton", ({
    enumerable: true,
    get: function get() {
        return _HeaderButton.HeaderButton;
    }
}));
Object.defineProperty(exports, "HeaderHeightContext", ({
    enumerable: true,
    get: function get() {
        return _HeaderHeightContext.HeaderHeightContext;
    }
}));
Object.defineProperty(exports, "HeaderShownContext", ({
    enumerable: true,
    get: function get() {
        return _HeaderShownContext.HeaderShownContext;
    }
}));
Object.defineProperty(exports, "HeaderTitle", ({
    enumerable: true,
    get: function get() {
        return _HeaderTitle.HeaderTitle;
    }
}));
Object.defineProperty(exports, "Label", ({
    enumerable: true,
    get: function get() {
        return _Label.Label;
    }
}));
Object.defineProperty(exports, "MissingIcon", ({
    enumerable: true,
    get: function get() {
        return _MissingIcon.MissingIcon;
    }
}));
Object.defineProperty(exports, "PlatformPressable", ({
    enumerable: true,
    get: function get() {
        return _PlatformPressable.PlatformPressable;
    }
}));
Object.defineProperty(exports, "ResourceSavingView", ({
    enumerable: true,
    get: function get() {
        return _ResourceSavingView.ResourceSavingView;
    }
}));
Object.defineProperty(exports, "SafeAreaProviderCompat", ({
    enumerable: true,
    get: function get() {
        return _SafeAreaProviderCompat.SafeAreaProviderCompat;
    }
}));
Object.defineProperty(exports, "Screen", ({
    enumerable: true,
    get: function get() {
        return _Screen.Screen;
    }
}));
Object.defineProperty(exports, "Text", ({
    enumerable: true,
    get: function get() {
        return _Text.Text;
    }
}));
Object.defineProperty(exports, "getDefaultHeaderHeight", ({
    enumerable: true,
    get: function get() {
        return _getDefaultHeaderHeight.getDefaultHeaderHeight;
    }
}));
Object.defineProperty(exports, "getDefaultSidebarWidth", ({
    enumerable: true,
    get: function get() {
        return _getDefaultSidebarWidth.getDefaultSidebarWidth;
    }
}));
Object.defineProperty(exports, "getHeaderTitle", ({
    enumerable: true,
    get: function get() {
        return _getHeaderTitle.getHeaderTitle;
    }
}));
Object.defineProperty(exports, "getLabel", ({
    enumerable: true,
    get: function get() {
        return _getLabel.getLabel;
    }
}));
Object.defineProperty(exports, "useHeaderHeight", ({
    enumerable: true,
    get: function get() {
        return _useHeaderHeight.useHeaderHeight;
    }
}));
var _backIcon = _interopRequireDefault(__webpack_require__(24296));
var _backIconMask = _interopRequireDefault(__webpack_require__(13182));
var _clearIcon = _interopRequireDefault(__webpack_require__(91665));
var _closeIcon = _interopRequireDefault(__webpack_require__(67325));
var _searchIcon = _interopRequireDefault(__webpack_require__(40129));
var _Background = __webpack_require__(17990);
var _Button = __webpack_require__(35238);
var _getDefaultSidebarWidth = __webpack_require__(3098);
var _getDefaultHeaderHeight = __webpack_require__(8960);
var _getHeaderTitle = __webpack_require__(26295);
var _Header = __webpack_require__(75303);
var _HeaderBackButton = __webpack_require__(72615);
var _HeaderBackContext = __webpack_require__(2617);
var _HeaderBackground = __webpack_require__(84180);
var _HeaderButton = __webpack_require__(27873);
var _HeaderHeightContext = __webpack_require__(38475);
var _HeaderShownContext = __webpack_require__(98213);
var _HeaderTitle = __webpack_require__(3354);
var _useHeaderHeight = __webpack_require__(92642);
var _getLabel = __webpack_require__(13310);
var _Label = __webpack_require__(1982);
var _MissingIcon = __webpack_require__(73476);
var _PlatformPressable = __webpack_require__(7536);
var _ResourceSavingView = __webpack_require__(68334);
var _SafeAreaProviderCompat = __webpack_require__(27101);
var _Screen = __webpack_require__(94311);
var _Text = __webpack_require__(94540);
var _types = __webpack_require__(14256);
Object.keys(_types).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _types[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _types[key];
        }
    });
});
function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
        "default": e
    };
}
var Assets = exports.Assets = [
    _backIcon["default"],
    _backIconMask["default"],
    _searchIcon["default"],
    _closeIcon["default"],
    _clearIcon["default"]
]; //# sourceMappingURL=index.js.map


}),
"14256": (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
})); //# sourceMappingURL=types.js.map


}),
"60682": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "NativeStackView", ({
    enumerable: true,
    get: function get() {
        return _NativeStackView.NativeStackView;
    }
}));
Object.defineProperty(exports, "createNativeStackNavigator", ({
    enumerable: true,
    get: function get() {
        return _createNativeStackNavigator.createNativeStackNavigator;
    }
}));
Object.defineProperty(exports, "useAnimatedHeaderHeight", ({
    enumerable: true,
    get: function get() {
        return _useAnimatedHeaderHeight.useAnimatedHeaderHeight;
    }
}));
var _createNativeStackNavigator = __webpack_require__(58575);
var _NativeStackView = __webpack_require__(83444);
var _useAnimatedHeaderHeight = __webpack_require__(66655); //# sourceMappingURL=index.js.map


}),
"58575": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(88410);
var _object_without_properties_loose = __webpack_require__(56242);
var _type_of = __webpack_require__(15576);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.createNativeStackNavigator = createNativeStackNavigator;
var _native = __webpack_require__(31326);
var React = _interopRequireWildcard(__webpack_require__(84816));
var _NativeStackView = __webpack_require__(83444);
var _jsxRuntime = __webpack_require__(31549);
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _type_of._(e)) && "function" != typeof e) return {
        "default": e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && ({}).hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n["default"] = e, t && t.set(e, n), n;
}
function NativeStackNavigator(_param) {
    var id = _param.id, initialRouteName = _param.initialRouteName, children = _param.children, layout = _param.layout, screenListeners = _param.screenListeners, screenOptions = _param.screenOptions, screenLayout = _param.screenLayout, UNSTABLE_getStateForRouteNamesChange = _param.UNSTABLE_getStateForRouteNamesChange, rest = _object_without_properties_loose._(_param, [
        "id",
        "initialRouteName",
        "children",
        "layout",
        "screenListeners",
        "screenOptions",
        "screenLayout",
        "UNSTABLE_getStateForRouteNamesChange"
    ]);
    var _ref = (0, _native.useNavigationBuilder)(_native.StackRouter, {
        id: id,
        initialRouteName: initialRouteName,
        children: children,
        layout: layout,
        screenListeners: screenListeners,
        screenOptions: screenOptions,
        screenLayout: screenLayout,
        UNSTABLE_getStateForRouteNamesChange: UNSTABLE_getStateForRouteNamesChange
    }), state = _ref.state, describe = _ref.describe, descriptors = _ref.descriptors, navigation = _ref.navigation, NavigationContent = _ref.NavigationContent;
    React.useEffect(function() {
        var // @ts-expect-error: there may not be a tab navigator in parent
        _navigation_addListener;
        return navigation == null ? void 0 : (_navigation_addListener = navigation.addListener) == null ? void 0 : _navigation_addListener.call(navigation, 'tabPress', function(e) {
            var isFocused = navigation.isFocused();
            // Run the operation in the next frame so we're sure all listeners have been run
            // This is necessary to know if preventDefault() has been called
            requestAnimationFrame(function() {
                if (state.index > 0 && isFocused && !e.defaultPrevented) {
                    // When user taps on already focused tab and we're inside the tab,
                    // reset the stack to replicate native behaviour
                    navigation.dispatch(_extends._({}, _native.StackActions.popToTop(), {
                        target: state.key
                    }));
                }
            });
        });
    }, [
        navigation,
        state.index,
        state.key
    ]);
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(NavigationContent, {
        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_NativeStackView.NativeStackView, _extends._({}, rest, {
            state: state,
            navigation: navigation,
            descriptors: descriptors,
            describe: describe
        }))
    });
}
function createNativeStackNavigator(config) {
    return (0, _native.createNavigatorFactory)(NativeStackNavigator)(config);
} //# sourceMappingURL=createNativeStackNavigator.js.map


}),
"45764": (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.debounce = debounce;
function debounce(func, duration) {
    var timeout;
    return function() {
        var _this = this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        clearTimeout(timeout);
        timeout = setTimeout(function() {
            func.apply(_this, args);
        }, duration);
    };
} //# sourceMappingURL=debounce.js.map


}),
"14387": (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getModalRouteKeys = void 0;
var getModalRouteKeys = function(routes, descriptors) {
    return routes.reduce(function(acc, route) {
        var _descriptors_route_key;
        var _descriptors_route_key_options;
        var presentation = ((_descriptors_route_key_options = (_descriptors_route_key = descriptors[route.key]) == null ? void 0 : _descriptors_route_key.options) != null ? _descriptors_route_key_options : {}).presentation;
        if (acc.length && !presentation || presentation === 'modal' || presentation === 'transparentModal') {
            acc.push(route.key);
        }
        return acc;
    }, []);
};
exports.getModalRouteKeys = getModalRouteKeys; //# sourceMappingURL=getModalRoutesKeys.js.map


}),
"66655": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _type_of = __webpack_require__(15576);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.AnimatedHeaderHeightContext = void 0;
exports.useAnimatedHeaderHeight = useAnimatedHeaderHeight;
var React = _interopRequireWildcard(__webpack_require__(84816));
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _type_of._(e)) && "function" != typeof e) return {
        "default": e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && ({}).hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n["default"] = e, t && t.set(e, n), n;
}
var AnimatedHeaderHeightContext = exports.AnimatedHeaderHeightContext = /*#__PURE__*/ React.createContext(undefined);
function useAnimatedHeaderHeight() {
    var animatedValue = React.useContext(AnimatedHeaderHeightContext);
    if (animatedValue === undefined) {
        throw new Error("Couldn't find the header height. Are you inside a screen in a native stack navigator?");
    }
    return animatedValue;
} //# sourceMappingURL=useAnimatedHeaderHeight.js.map


}),
"75325": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _sliced_to_array = __webpack_require__(38097);
var _type_of = __webpack_require__(15576);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.useDismissedRouteError = useDismissedRouteError;
var React = _interopRequireWildcard(__webpack_require__(84816));
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _type_of._(e)) && "function" != typeof e) return {
        "default": e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && ({}).hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n["default"] = e, t && t.set(e, n), n;
}
function useDismissedRouteError(state) {
    var _state_routes_find;
    var _React_useState = _sliced_to_array._(React.useState(null), 2), nextDismissedKey = _React_useState[0], setNextDismissedKey = _React_useState[1];
    var dismissedRouteName = nextDismissedKey ? (_state_routes_find = state.routes.find(function(route) {
        return route.key === nextDismissedKey;
    })) == null ? void 0 : _state_routes_find.name : null;
    React.useEffect(function() {
        if (dismissedRouteName) {
            var message = "The screen '" + dismissedRouteName + "' was removed natively but didn't get removed from JS state. " + "This can happen if the action was prevented in a 'beforeRemove' listener, which is not fully supported in native-stack.\n\n" + "Consider using a 'usePreventRemove' hook with 'headerBackButtonMenuEnabled: false' to prevent users from natively going back multiple screens.";
            console.error(message);
        }
    }, [
        dismissedRouteName
    ]);
    return {
        setNextDismissedKey: setNextDismissedKey
    };
} //# sourceMappingURL=useDismissedRouteError.js.map


}),
"95812": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _type_of = __webpack_require__(15576);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.useInvalidPreventRemoveError = useInvalidPreventRemoveError;
var _native = __webpack_require__(31326);
var React = _interopRequireWildcard(__webpack_require__(84816));
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _type_of._(e)) && "function" != typeof e) return {
        "default": e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && ({}).hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n["default"] = e, t && t.set(e, n), n;
}
function useInvalidPreventRemoveError(descriptors) {
    var _preventedDescriptor_options, _preventedDescriptor_route;
    var preventedRoutes = (0, _native.usePreventRemoveContext)().preventedRoutes;
    var preventedRouteKey = Object.keys(preventedRoutes)[0];
    var preventedDescriptor = descriptors[preventedRouteKey];
    var isHeaderBackButtonMenuEnabledOnPreventedScreen = preventedDescriptor == null ? void 0 : (_preventedDescriptor_options = preventedDescriptor.options) == null ? void 0 : _preventedDescriptor_options.headerBackButtonMenuEnabled;
    var preventedRouteName = preventedDescriptor == null ? void 0 : (_preventedDescriptor_route = preventedDescriptor.route) == null ? void 0 : _preventedDescriptor_route.name;
    React.useEffect(function() {
        if (preventedRouteKey != null && isHeaderBackButtonMenuEnabledOnPreventedScreen) {
            var message = "The screen " + preventedRouteName + " uses 'usePreventRemove' hook alongside 'headerBackButtonMenuEnabled: true', which is not supported. \n\n" + ("Consider removing 'headerBackButtonMenuEnabled: true' from " + preventedRouteName + " screen to get rid of this error.");
            console.error(message);
        }
    }, [
        preventedRouteKey,
        isHeaderBackButtonMenuEnabledOnPreventedScreen,
        preventedRouteName
    ]);
} //# sourceMappingURL=useInvalidPreventRemoveError.js.map


}),
"57873": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.processFonts = processFonts;
var _ReactNativeStyleAttributes = _interopRequireDefault(__webpack_require__(22093));
function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
        "default": e
    };
}
// @ts-expect-error importing private module
function processFonts(fontFamilies) {
    var _ReactNativeStyleAttributes_default_fontFamily;
    var fontFamilyProcessor = (_ReactNativeStyleAttributes_default_fontFamily = _ReactNativeStyleAttributes["default"].fontFamily) == null ? void 0 : _ReactNativeStyleAttributes_default_fontFamily.process;
    if (typeof fontFamilyProcessor === 'function') {
        return fontFamilies.map(fontFamilyProcessor);
    }
    return fontFamilies;
} //# sourceMappingURL=FontProcessor.native.js.map


}),
"83444": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(88410);
var _sliced_to_array = __webpack_require__(38097);
var _type_of = __webpack_require__(15576);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.NativeStackView = NativeStackView;
var _elements = __webpack_require__(52477);
var _native = __webpack_require__(31326);
var React = _interopRequireWildcard(__webpack_require__(84816));
var _reactNative = __webpack_require__(44963);
var _reactNativeSafeAreaContext = __webpack_require__(24144);
var _reactNativeScreens = __webpack_require__(53919);
var _debounce = __webpack_require__(45764);
var _getModalRoutesKeys = __webpack_require__(14387);
var _useAnimatedHeaderHeight = __webpack_require__(66655);
var _useDismissedRouteError = __webpack_require__(75325);
var _useInvalidPreventRemoveError = __webpack_require__(95812);
var _useHeaderConfigProps = __webpack_require__(70987);
var _jsxRuntime = __webpack_require__(31549);
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != (typeof e === "undefined" ? "undefined" : _type_of._(e)) && "function" != typeof e) return {
        "default": e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && ({}).hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n["default"] = e, t && t.set(e, n), n;
}
var ANDROID_DEFAULT_HEADER_HEIGHT = 56;
var useNativeDriver = _reactNative.Platform.OS !== 'web';
var SceneView = function(param) {
    var index = param.index, focused = param.focused, descriptor = param.descriptor, previousDescriptor = param.previousDescriptor, nextDescriptor = param.nextDescriptor, isPresentationModal = param.isPresentationModal, isPreloaded = param.isPreloaded, onWillDisappear = param.onWillDisappear, onWillAppear = param.onWillAppear, onAppear = param.onAppear, onDisappear = param.onDisappear, onDismissed = param.onDismissed, onHeaderBackButtonClicked = param.onHeaderBackButtonClicked, onNativeDismissCancelled = param.onNativeDismissCancelled, onGestureCancel = param.onGestureCancel, onSheetDetentChanged = param.onSheetDetentChanged;
    var _preventedRoutes_route_key;
    var route = descriptor.route, navigation = descriptor.navigation, options = descriptor.options, render = descriptor.render;
    var animation = options.animation, animationMatchesGesture = options.animationMatchesGesture, _options_presentation = options.presentation, presentation = _options_presentation === void 0 ? isPresentationModal ? 'modal' : 'card' : _options_presentation, fullScreenGestureEnabled = options.fullScreenGestureEnabled;
    var animationDuration = options.animationDuration, _options_animationTypeForReplace = options.animationTypeForReplace, animationTypeForReplace = _options_animationTypeForReplace === void 0 ? 'push' : _options_animationTypeForReplace, _options_fullScreenGestureShadowEnabled = options.fullScreenGestureShadowEnabled, fullScreenGestureShadowEnabled = _options_fullScreenGestureShadowEnabled === void 0 ? true : _options_fullScreenGestureShadowEnabled, gestureEnabled = options.gestureEnabled, _options_gestureDirection = options.gestureDirection, gestureDirection = _options_gestureDirection === void 0 ? presentation === 'card' ? 'horizontal' : 'vertical' : _options_gestureDirection, gestureResponseDistance = options.gestureResponseDistance, header = options.header, headerBackButtonMenuEnabled = options.headerBackButtonMenuEnabled, headerShown = options.headerShown, headerBackground = options.headerBackground, headerTransparent = options.headerTransparent, autoHideHomeIndicator = options.autoHideHomeIndicator, keyboardHandlingEnabled = options.keyboardHandlingEnabled, navigationBarColor = options.navigationBarColor, navigationBarTranslucent = options.navigationBarTranslucent, navigationBarHidden = options.navigationBarHidden, orientation = options.orientation, _options_sheetAllowedDetents = options.sheetAllowedDetents, sheetAllowedDetents = _options_sheetAllowedDetents === void 0 ? [
        1.0
    ] : _options_sheetAllowedDetents, _options_sheetLargestUndimmedDetentIndex = options.sheetLargestUndimmedDetentIndex, sheetLargestUndimmedDetentIndex = _options_sheetLargestUndimmedDetentIndex === void 0 ? -1 : _options_sheetLargestUndimmedDetentIndex, _options_sheetGrabberVisible = options.sheetGrabberVisible, sheetGrabberVisible = _options_sheetGrabberVisible === void 0 ? false : _options_sheetGrabberVisible, _options_sheetCornerRadius = options.sheetCornerRadius, sheetCornerRadius = _options_sheetCornerRadius === void 0 ? -1.0 : _options_sheetCornerRadius, _options_sheetElevation = options.sheetElevation, sheetElevation = _options_sheetElevation === void 0 ? 24 : _options_sheetElevation, _options_sheetExpandsWhenScrolledToEdge = options.sheetExpandsWhenScrolledToEdge, sheetExpandsWhenScrolledToEdge = _options_sheetExpandsWhenScrolledToEdge === void 0 ? true : _options_sheetExpandsWhenScrolledToEdge, _options_sheetInitialDetentIndex = options.sheetInitialDetentIndex, sheetInitialDetentIndex = _options_sheetInitialDetentIndex === void 0 ? 0 : _options_sheetInitialDetentIndex, statusBarAnimation = options.statusBarAnimation, statusBarHidden = options.statusBarHidden, statusBarStyle = options.statusBarStyle, statusBarTranslucent = options.statusBarTranslucent, statusBarBackgroundColor = options.statusBarBackgroundColor, unstable_sheetFooter = options.unstable_sheetFooter, freezeOnBlur = options.freezeOnBlur, contentStyle = options.contentStyle;
    if (gestureDirection === 'vertical' && _reactNative.Platform.OS === 'ios') {
        // for `vertical` direction to work, we need to set `fullScreenGestureEnabled` to `true`
        // so the screen can be dismissed from any point on screen.
        // `animationMatchesGesture` needs to be set to `true` so the `animation` set by user can be used,
        // otherwise `simple_push` will be used.
        // Also, the default animation for this direction seems to be `slide_from_bottom`.
        if (fullScreenGestureEnabled === undefined) {
            fullScreenGestureEnabled = true;
        }
        if (animationMatchesGesture === undefined) {
            animationMatchesGesture = true;
        }
        if (animation === undefined) {
            animation = 'slide_from_bottom';
        }
    }
    // workaround for rn-screens where gestureDirection has to be set on both
    // current and previous screen - software-mansion/react-native-screens/pull/1509
    var nextGestureDirection = nextDescriptor == null ? void 0 : nextDescriptor.options.gestureDirection;
    var gestureDirectionOverride = nextGestureDirection != null ? nextGestureDirection : gestureDirection;
    if (index === 0) {
        // first screen should always be treated as `card`, it resolves problems with no header animation
        // for navigator with first screen as `modal` and the next as `card`
        presentation = 'card';
    }
    var colors = (0, _native.useTheme)().colors;
    var insets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)();
    var frame = (0, _reactNativeSafeAreaContext.useSafeAreaFrame)();
    // `modal` and `formSheet` presentations do not take whole screen, so should not take the inset.
    var isModal = presentation === 'modal' || presentation === 'formSheet';
    // Modals are fullscreen in landscape only on iPhone
    var isIPhone = _reactNative.Platform.OS === 'ios' && !(_reactNative.Platform.isPad || _reactNative.Platform.isTV);
    var isLandscape = frame.width > frame.height;
    var isParentHeaderShown = React.useContext(_elements.HeaderShownContext);
    var parentHeaderHeight = React.useContext(_elements.HeaderHeightContext);
    var parentHeaderBack = React.useContext(_elements.HeaderBackContext);
    var topInset = isParentHeaderShown || _reactNative.Platform.OS === 'ios' && isModal || isIPhone && isLandscape ? 0 : insets.top;
    var preventedRoutes = (0, _native.usePreventRemoveContext)().preventedRoutes;
    var defaultHeaderHeight = _reactNative.Platform.select({
        // FIXME: Currently screens isn't using Material 3
        // So our `getDefaultHeaderHeight` doesn't return the correct value
        // So we hardcode the value here for now until screens is updated
        android: ANDROID_DEFAULT_HEADER_HEIGHT + topInset,
        "default": (0, _elements.getDefaultHeaderHeight)(frame, isModal, topInset)
    });
    var _React_useState = _sliced_to_array._(React.useState(defaultHeaderHeight), 2), headerHeight = _React_useState[0], setHeaderHeight = _React_useState[1];
    // eslint-disable-next-line react-hooks/exhaustive-deps
    var setHeaderHeightDebounced = React.useCallback(// Debounce the header height updates to avoid excessive re-renders
    (0, _debounce.debounce)(setHeaderHeight, 100), []);
    var hasCustomHeader = header !== undefined;
    var headerHeightCorrectionOffset = 0;
    if (_reactNative.Platform.OS === 'android' && !hasCustomHeader) {
        var _reactNative_StatusBar_currentHeight;
        var statusBarHeight = (_reactNative_StatusBar_currentHeight = _reactNative.StatusBar.currentHeight) != null ? _reactNative_StatusBar_currentHeight : 0;
        // FIXME: On Android, the native header height is not correctly calculated
        // It includes status bar height even if statusbar is not translucent
        // And the statusbar value itself doesn't match the actual status bar height
        // So we subtract the bogus status bar height and add the actual top inset
        headerHeightCorrectionOffset = -statusBarHeight + topInset;
    }
    var rawAnimatedHeaderHeight = (0, _reactNative.useAnimatedValue)(defaultHeaderHeight);
    var animatedHeaderHeight = React.useMemo(function() {
        return _reactNative.Animated.add(rawAnimatedHeaderHeight, headerHeightCorrectionOffset);
    }, [
        headerHeightCorrectionOffset,
        rawAnimatedHeaderHeight
    ]);
    // During the very first render topInset is > 0 when running
    // in non edge-to-edge mode on Android, while on every consecutive render
    // topInset === 0, causing header content to jump, as we add padding on the first frame,
    // just to remove it in next one. To prevent this, when statusBarTranslucent is set,
    // we apply additional padding in header only if its true.
    // For more details see: https://github.com/react-navigation/react-navigation/pull/12014
    var headerTopInsetEnabled = typeof statusBarTranslucent === 'boolean' ? statusBarTranslucent : topInset !== 0;
    var canGoBack = previousDescriptor != null || parentHeaderBack != null;
    var backTitle = previousDescriptor ? (0, _elements.getHeaderTitle)(previousDescriptor.options, previousDescriptor.route.name) : parentHeaderBack == null ? void 0 : parentHeaderBack.title;
    var headerBack = React.useMemo(function() {
        if (canGoBack) {
            return {
                href: undefined,
                // No href needed for native
                title: backTitle
            };
        }
        return undefined;
    }, [
        canGoBack,
        backTitle
    ]);
    var isRemovePrevented = (_preventedRoutes_route_key = preventedRoutes[route.key]) == null ? void 0 : _preventedRoutes_route_key.preventRemove;
    var headerConfig = (0, _useHeaderConfigProps.useHeaderConfigProps)(_extends._({}, options, {
        route: route,
        headerBackButtonMenuEnabled: isRemovePrevented !== undefined ? !isRemovePrevented : headerBackButtonMenuEnabled,
        headerBackTitle: options.headerBackTitle !== undefined ? options.headerBackTitle : undefined,
        headerHeight: headerHeight,
        headerShown: header !== undefined ? false : headerShown,
        headerTopInsetEnabled: headerTopInsetEnabled,
        headerBack: headerBack
    }));
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_native.NavigationContext.Provider, {
        value: navigation,
        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_native.NavigationRouteContext.Provider, {
            value: route,
            children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNativeScreens.ScreenStackItem, {
                screenId: route.key,
                activityState: isPreloaded ? 0 : 2,
                style: _reactNative.StyleSheet.absoluteFill,
                accessibilityElementsHidden: !focused,
                importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',
                customAnimationOnSwipe: animationMatchesGesture,
                fullScreenSwipeEnabled: fullScreenGestureEnabled,
                fullScreenSwipeShadowEnabled: fullScreenGestureShadowEnabled,
                freezeOnBlur: freezeOnBlur,
                gestureEnabled: _reactNative.Platform.OS === 'android' ? // This prop enables handling of system back gestures on Android
                // Since we handle them in JS side, we disable this
                false : gestureEnabled,
                homeIndicatorHidden: autoHideHomeIndicator,
                hideKeyboardOnSwipe: keyboardHandlingEnabled,
                navigationBarColor: navigationBarColor,
                navigationBarTranslucent: navigationBarTranslucent,
                navigationBarHidden: navigationBarHidden,
                replaceAnimation: animationTypeForReplace,
                stackPresentation: presentation === 'card' ? 'push' : presentation,
                stackAnimation: animation,
                screenOrientation: orientation,
                sheetAllowedDetents: sheetAllowedDetents,
                sheetLargestUndimmedDetentIndex: sheetLargestUndimmedDetentIndex,
                sheetGrabberVisible: sheetGrabberVisible,
                sheetInitialDetentIndex: sheetInitialDetentIndex,
                sheetCornerRadius: sheetCornerRadius,
                sheetElevation: sheetElevation,
                sheetExpandsWhenScrolledToEdge: sheetExpandsWhenScrolledToEdge,
                statusBarAnimation: statusBarAnimation,
                statusBarHidden: statusBarHidden,
                statusBarStyle: statusBarStyle,
                statusBarColor: statusBarBackgroundColor,
                statusBarTranslucent: statusBarTranslucent,
                swipeDirection: gestureDirectionOverride,
                transitionDuration: animationDuration,
                onWillAppear: onWillAppear,
                onWillDisappear: onWillDisappear,
                onAppear: onAppear,
                onDisappear: onDisappear,
                onDismissed: onDismissed,
                onGestureCancel: onGestureCancel,
                onSheetDetentChanged: onSheetDetentChanged,
                gestureResponseDistance: gestureResponseDistance,
                nativeBackButtonDismissalEnabled: false // on Android
                ,
                onHeaderBackButtonClicked: onHeaderBackButtonClicked,
                preventNativeDismiss: isRemovePrevented // on iOS
                ,
                onNativeDismissCancelled: onNativeDismissCancelled,
                onHeaderHeightChange: _reactNative.Animated.event([
                    {
                        nativeEvent: {
                            headerHeight: rawAnimatedHeaderHeight
                        }
                    }
                ], {
                    useNativeDriver: useNativeDriver,
                    listener: function(e) {
                        if (_reactNative.Platform.OS === 'android' && (options.headerBackground != null || options.headerTransparent)) {
                            // FIXME: On Android, we get 0 if the header is translucent
                            // So we set a default height in that case
                            setHeaderHeight(ANDROID_DEFAULT_HEADER_HEIGHT + topInset);
                            return;
                        }
                        if (e.nativeEvent && _type_of._(e.nativeEvent) === 'object' && 'headerHeight' in e.nativeEvent && typeof e.nativeEvent.headerHeight === 'number') {
                            var headerHeight = e.nativeEvent.headerHeight + headerHeightCorrectionOffset;
                            // Only debounce if header has large title or search bar
                            // As it's the only case where the header height can change frequently
                            var doesHeaderAnimate = _reactNative.Platform.OS === 'ios' && (options.headerLargeTitle || options.headerSearchBarOptions);
                            if (doesHeaderAnimate) {
                                setHeaderHeightDebounced(headerHeight);
                            } else {
                                setHeaderHeight(headerHeight);
                            }
                        }
                    }
                }),
                contentStyle: [
                    presentation !== 'transparentModal' && presentation !== 'containedTransparentModal' && {
                        backgroundColor: colors.background
                    },
                    contentStyle
                ],
                headerConfig: headerConfig,
                unstable_sheetFooter: unstable_sheetFooter,
                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_useAnimatedHeaderHeight.AnimatedHeaderHeightContext.Provider, {
                    value: animatedHeaderHeight,
                    children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(_elements.HeaderHeightContext.Provider, {
                        value: headerShown !== false ? headerHeight : parentHeaderHeight != null ? parentHeaderHeight : 0,
                        children: [
                            headerBackground != null ? /*#__PURE__*/ /**
             * To show a custom header background, we render it at the top of the screen below the header
             * The header also needs to be positioned absolutely (with `translucent` style)
             */ (0, _jsxRuntime.jsx)(_reactNative.View, {
                                style: [
                                    styles.background,
                                    headerTransparent ? styles.translucent : null,
                                    {
                                        height: headerHeight
                                    }
                                ],
                                children: headerBackground()
                            }) : null,
                            header !== undefined && headerShown !== false ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.View, {
                                onLayout: function(e) {
                                    var headerHeight = e.nativeEvent.layout.height;
                                    setHeaderHeight(headerHeight);
                                    rawAnimatedHeaderHeight.setValue(headerHeight);
                                },
                                style: [
                                    styles.header,
                                    headerTransparent ? styles.absolute : null
                                ],
                                children: header({
                                    back: headerBack,
                                    options: options,
                                    route: route,
                                    navigation: navigation
                                })
                            }) : null,
                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(_elements.HeaderShownContext.Provider, {
                                value: isParentHeaderShown || headerShown !== false,
                                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_elements.HeaderBackContext.Provider, {
                                    value: headerBack,
                                    children: render()
                                })
                            })
                        ]
                    })
                })
            }, route.key)
        })
    });
};
function NativeStackView(param) {
    var state = param.state, navigation = param.navigation, descriptors = param.descriptors, describe = param.describe;
    var setNextDismissedKey = (0, _useDismissedRouteError.useDismissedRouteError)(state).setNextDismissedKey;
    (0, _useInvalidPreventRemoveError.useInvalidPreventRemoveError)(descriptors);
    var modalRouteKeys = (0, _getModalRoutesKeys.getModalRouteKeys)(state.routes, descriptors);
    var preloadedDescriptors = state.preloadedRoutes.reduce(function(acc, route) {
        acc[route.key] = acc[route.key] || describe(route, true);
        return acc;
    }, {});
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_elements.SafeAreaProviderCompat, {
        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNativeScreens.ScreenStack, {
            style: styles.container,
            children: state.routes.concat(state.preloadedRoutes).map(function(route, index) {
                var _state_routes_, _state_routes_1;
                var _descriptors_route_key;
                var descriptor = (_descriptors_route_key = descriptors[route.key]) != null ? _descriptors_route_key : preloadedDescriptors[route.key];
                var isFocused = state.index === index;
                var previousKey = (_state_routes_ = state.routes[index - 1]) == null ? void 0 : _state_routes_.key;
                var nextKey = (_state_routes_1 = state.routes[index + 1]) == null ? void 0 : _state_routes_1.key;
                var previousDescriptor = previousKey ? descriptors[previousKey] : undefined;
                var nextDescriptor = nextKey ? descriptors[nextKey] : undefined;
                var isModal = modalRouteKeys.includes(route.key);
                var isPreloaded = preloadedDescriptors[route.key] !== undefined && descriptors[route.key] === undefined;
                return /*#__PURE__*/ (0, _jsxRuntime.jsx)(SceneView, {
                    index: index,
                    focused: isFocused,
                    descriptor: descriptor,
                    previousDescriptor: previousDescriptor,
                    nextDescriptor: nextDescriptor,
                    isPresentationModal: isModal,
                    isPreloaded: isPreloaded,
                    onWillDisappear: function() {
                        navigation.emit({
                            type: 'transitionStart',
                            data: {
                                closing: true
                            },
                            target: route.key
                        });
                    },
                    onWillAppear: function() {
                        navigation.emit({
                            type: 'transitionStart',
                            data: {
                                closing: false
                            },
                            target: route.key
                        });
                    },
                    onAppear: function() {
                        navigation.emit({
                            type: 'transitionEnd',
                            data: {
                                closing: false
                            },
                            target: route.key
                        });
                    },
                    onDisappear: function() {
                        navigation.emit({
                            type: 'transitionEnd',
                            data: {
                                closing: true
                            },
                            target: route.key
                        });
                    },
                    onDismissed: function(event) {
                        navigation.dispatch(_extends._({}, _native.StackActions.pop(event.nativeEvent.dismissCount), {
                            source: route.key,
                            target: state.key
                        }));
                        setNextDismissedKey(route.key);
                    },
                    onHeaderBackButtonClicked: function() {
                        navigation.dispatch(_extends._({}, _native.StackActions.pop(), {
                            source: route.key,
                            target: state.key
                        }));
                    },
                    onNativeDismissCancelled: function(event) {
                        navigation.dispatch(_extends._({}, _native.StackActions.pop(event.nativeEvent.dismissCount), {
                            source: route.key,
                            target: state.key
                        }));
                    },
                    onGestureCancel: function() {
                        navigation.emit({
                            type: 'gestureCancel',
                            target: route.key
                        });
                    },
                    onSheetDetentChanged: function(event) {
                        navigation.emit({
                            type: 'sheetDetentChange',
                            target: route.key,
                            data: {
                                index: event.nativeEvent.index,
                                stable: event.nativeEvent.isStable
                            }
                        });
                    }
                }, route.key);
            })
        })
    });
}
var styles = _reactNative.StyleSheet.create({
    container: {
        flex: 1
    },
    header: {
        zIndex: 1
    },
    absolute: {
        position: 'absolute',
        top: 0,
        start: 0,
        end: 0
    },
    translucent: {
        position: 'absolute',
        top: 0,
        start: 0,
        end: 0,
        zIndex: 1,
        elevation: 1
    },
    background: {
        overflow: 'hidden'
    }
}); //# sourceMappingURL=NativeStackView.native.js.map


}),
"70987": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _extends = __webpack_require__(88410);
var _sliced_to_array = __webpack_require__(38097);
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.useHeaderConfigProps = useHeaderConfigProps;
var _elements = __webpack_require__(52477);
var _native = __webpack_require__(31326);
var _reactNative = __webpack_require__(44963);
var _reactNativeScreens = __webpack_require__(53919);
var _FontProcessor = __webpack_require__(57873);
var _jsxRuntime = __webpack_require__(31549);
function useHeaderConfigProps(param) {
    var headerBackImageSource = param.headerBackImageSource, headerBackButtonDisplayMode = param.headerBackButtonDisplayMode, headerBackButtonMenuEnabled = param.headerBackButtonMenuEnabled, headerBackTitle = param.headerBackTitle, headerBackTitleStyle = param.headerBackTitleStyle, headerBackVisible = param.headerBackVisible, headerShadowVisible = param.headerShadowVisible, headerLargeStyle = param.headerLargeStyle, headerLargeTitle = param.headerLargeTitle, headerLargeTitleShadowVisible = param.headerLargeTitleShadowVisible, headerLargeTitleStyle = param.headerLargeTitleStyle, headerBackground = param.headerBackground, headerLeft = param.headerLeft, headerRight = param.headerRight, headerShown = param.headerShown, headerStyle = param.headerStyle, headerBlurEffect = param.headerBlurEffect, headerTintColor = param.headerTintColor, headerTitle = param.headerTitle, headerTitleAlign = param.headerTitleAlign, headerTitleStyle = param.headerTitleStyle, headerTransparent = param.headerTransparent, headerSearchBarOptions = param.headerSearchBarOptions, headerTopInsetEnabled = param.headerTopInsetEnabled, headerBack = param.headerBack, route = param.route, title = param.title;
    var direction = (0, _native.useLocale)().direction;
    var _ref = (0, _native.useTheme)(), colors = _ref.colors, fonts = _ref.fonts;
    var tintColor = headerTintColor != null ? headerTintColor : _reactNative.Platform.OS === 'ios' ? colors.primary : colors.text;
    var headerBackTitleStyleFlattened = _reactNative.StyleSheet.flatten([
        fonts.regular,
        headerBackTitleStyle
    ]) || {};
    var headerLargeTitleStyleFlattened = _reactNative.StyleSheet.flatten([
        _reactNative.Platform.select({
            ios: fonts.heavy,
            "default": fonts.medium
        }),
        headerLargeTitleStyle
    ]) || {};
    var headerTitleStyleFlattened = _reactNative.StyleSheet.flatten([
        _reactNative.Platform.select({
            ios: fonts.bold,
            "default": fonts.medium
        }),
        headerTitleStyle
    ]) || {};
    var headerStyleFlattened = _reactNative.StyleSheet.flatten(headerStyle) || {};
    var headerLargeStyleFlattened = _reactNative.StyleSheet.flatten(headerLargeStyle) || {};
    var _ref1 = _sliced_to_array._((0, _FontProcessor.processFonts)([
        headerBackTitleStyleFlattened.fontFamily,
        headerLargeTitleStyleFlattened.fontFamily,
        headerTitleStyleFlattened.fontFamily
    ]), 3), backTitleFontFamily = _ref1[0], largeTitleFontFamily = _ref1[1], titleFontFamily = _ref1[2];
    var backTitleFontSize = 'fontSize' in headerBackTitleStyleFlattened ? headerBackTitleStyleFlattened.fontSize : undefined;
    var titleText = (0, _elements.getHeaderTitle)({
        title: title,
        headerTitle: headerTitle
    }, route.name);
    var titleColor = 'color' in headerTitleStyleFlattened ? headerTitleStyleFlattened.color : headerTintColor != null ? headerTintColor : colors.text;
    var titleFontSize = 'fontSize' in headerTitleStyleFlattened ? headerTitleStyleFlattened.fontSize : undefined;
    var titleFontWeight = headerTitleStyleFlattened.fontWeight;
    var largeTitleBackgroundColor = headerLargeStyleFlattened.backgroundColor;
    var largeTitleColor = 'color' in headerLargeTitleStyleFlattened ? headerLargeTitleStyleFlattened.color : undefined;
    var largeTitleFontSize = 'fontSize' in headerLargeTitleStyleFlattened ? headerLargeTitleStyleFlattened.fontSize : undefined;
    var largeTitleFontWeight = headerLargeTitleStyleFlattened.fontWeight;
    var headerTitleStyleSupported = {
        color: titleColor
    };
    if (headerTitleStyleFlattened.fontFamily != null) {
        headerTitleStyleSupported.fontFamily = headerTitleStyleFlattened.fontFamily;
    }
    if (titleFontSize != null) {
        headerTitleStyleSupported.fontSize = titleFontSize;
    }
    if (titleFontWeight != null) {
        headerTitleStyleSupported.fontWeight = titleFontWeight;
    }
    var _headerStyleFlattened_backgroundColor;
    var headerBackgroundColor = (_headerStyleFlattened_backgroundColor = headerStyleFlattened.backgroundColor) != null ? _headerStyleFlattened_backgroundColor : headerBackground != null || headerTransparent ? 'transparent' : colors.card;
    var canGoBack = headerBack != null;
    var headerLeftElement = headerLeft == null ? void 0 : headerLeft({
        tintColor: tintColor,
        canGoBack: canGoBack,
        label: headerBackTitle != null ? headerBackTitle : headerBack == null ? void 0 : headerBack.title,
        // `href` is only applicable to web
        href: undefined
    });
    var headerRightElement = headerRight == null ? void 0 : headerRight({
        tintColor: tintColor,
        canGoBack: canGoBack
    });
    var headerTitleElement = typeof headerTitle === 'function' ? headerTitle({
        tintColor: tintColor,
        children: titleText
    }) : null;
    var supportsHeaderSearchBar = typeof _reactNativeScreens.isSearchBarAvailableForCurrentPlatform === 'boolean' ? _reactNativeScreens.isSearchBarAvailableForCurrentPlatform : // Fallback for older versions of react-native-screens
    _reactNative.Platform.OS === 'ios' && _reactNativeScreens.SearchBar != null;
    var hasHeaderSearchBar = supportsHeaderSearchBar && headerSearchBarOptions != null;
    if (headerSearchBarOptions != null && !supportsHeaderSearchBar) {
        throw new Error("The current version of 'react-native-screens' doesn't support SearchBar in the header. Please update to the latest version to use this option.");
    }
    /**
   * We need to set this in if:
   * - Back button should stay visible when `headerLeft` is specified
   * - If `headerTitle` for Android is specified, so we only need to remove the title and keep the back button
   */ var backButtonInCustomView = headerBackVisible || _reactNative.Platform.OS === 'android' && headerTitleElement != null && headerLeftElement == null;
    var translucent = headerBackground != null || headerTransparent || // When using a SearchBar or large title, the header needs to be translucent for it to work on iOS
    (hasHeaderSearchBar || headerLargeTitle) && _reactNative.Platform.OS === 'ios' && headerTransparent !== false;
    var isBackButtonDisplayModeAvailable = // On iOS 14+
    _reactNative.Platform.OS === 'ios' && parseInt(_reactNative.Platform.Version, 10) >= 14 && // Doesn't have custom back title
    headerBackTitle == null && // Doesn't have custom styling
    backTitleFontFamily == null && backTitleFontSize == null && // Back button menu is not disabled
    headerBackButtonMenuEnabled !== false;
    var isCenterViewRenderedAndroid = headerTitleAlign === 'center';
    var children = /*#__PURE__*/ (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
        children: [
            _reactNative.Platform.OS === 'ios' ? /*#__PURE__*/ (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
                children: [
                    headerLeftElement != null ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNativeScreens.ScreenStackHeaderLeftView, {
                        children: headerLeftElement
                    }) : null,
                    headerTitleElement != null ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNativeScreens.ScreenStackHeaderCenterView, {
                        children: headerTitleElement
                    }) : null
                ]
            }) : /*#__PURE__*/ (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
                children: [
                    headerLeftElement != null || typeof headerTitle === 'function' ? /*#__PURE__*/ // The style passed to header left, together with title element being wrapped
                    // in flex view is reqruied for proper header layout, in particular,
                    // for the text truncation to work.
                    (0, _jsxRuntime.jsxs)(_reactNativeScreens.ScreenStackHeaderLeftView, {
                        style: !isCenterViewRenderedAndroid ? {
                            flex: 1
                        } : null,
                        children: [
                            headerLeftElement,
                            headerTitleAlign !== 'center' ? typeof headerTitle === 'function' ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.View, {
                                style: {
                                    flex: 1
                                },
                                children: headerTitleElement
                            }) : /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNative.View, {
                                style: {
                                    flex: 1
                                },
                                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_elements.HeaderTitle, {
                                    tintColor: tintColor,
                                    style: headerTitleStyleSupported,
                                    children: titleText
                                })
                            }) : null
                        ]
                    }) : null,
                    isCenterViewRenderedAndroid ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNativeScreens.ScreenStackHeaderCenterView, {
                        children: typeof headerTitle === 'function' ? headerTitleElement : /*#__PURE__*/ (0, _jsxRuntime.jsx)(_elements.HeaderTitle, {
                            tintColor: tintColor,
                            style: headerTitleStyleSupported,
                            children: titleText
                        })
                    }) : null
                ]
            }),
            headerBackImageSource !== undefined ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNativeScreens.ScreenStackHeaderBackButtonImage, {
                source: headerBackImageSource
            }) : null,
            headerRightElement != null ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNativeScreens.ScreenStackHeaderRightView, {
                children: headerRightElement
            }) : null,
            hasHeaderSearchBar ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNativeScreens.ScreenStackHeaderSearchBarView, {
                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(_reactNativeScreens.SearchBar, _extends._({}, headerSearchBarOptions))
            }) : null
        ]
    });
    return {
        backButtonInCustomView: backButtonInCustomView,
        backgroundColor: headerBackgroundColor,
        backTitle: headerBackTitle,
        backTitleVisible: isBackButtonDisplayModeAvailable ? undefined : headerBackButtonDisplayMode !== 'minimal',
        backButtonDisplayMode: isBackButtonDisplayModeAvailable ? headerBackButtonDisplayMode : undefined,
        backTitleFontFamily: backTitleFontFamily,
        backTitleFontSize: backTitleFontSize,
        blurEffect: headerBlurEffect,
        color: tintColor,
        direction: direction,
        disableBackButtonMenu: headerBackButtonMenuEnabled === false,
        hidden: headerShown === false,
        hideBackButton: headerBackVisible === false,
        hideShadow: headerShadowVisible === false || headerBackground != null || headerTransparent && headerShadowVisible !== true,
        largeTitle: headerLargeTitle,
        largeTitleBackgroundColor: largeTitleBackgroundColor,
        largeTitleColor: largeTitleColor,
        largeTitleFontFamily: largeTitleFontFamily,
        largeTitleFontSize: largeTitleFontSize,
        largeTitleFontWeight: largeTitleFontWeight,
        largeTitleHideShadow: headerLargeTitleShadowVisible === false,
        title: titleText,
        titleColor: titleColor,
        titleFontFamily: titleFontFamily,
        titleFontSize: titleFontSize,
        titleFontWeight: String(titleFontWeight),
        topInsetEnabled: headerTopInsetEnabled,
        translucent: translucent === true,
        children: children
    };
} //# sourceMappingURL=useHeaderConfigProps.js.map


}),
"35158": (function (__unused_webpack_module, exports) {
"use strict";

function _tagged_template_literal_loose(strings, raw) {
    if (!raw) raw = strings.slice(0);
    strings.raw = raw;
    return strings;
}
exports._ = _tagged_template_literal_loose;


}),

}]);//# sourceMappingURL=vendors-node_modules_pnpm_react-navigation_native-stack_7_1_14__react-navigation_native_7_0_1-71f058.chunk.bundle.map?platform=android