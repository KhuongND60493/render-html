(self['webpackChunksas_booking'] = self['webpackChunksas_booking'] || []).push([["vendors-node_modules_pnpm_react-native_0_76_3__babel_core_7_26_0__babel_preset-env_7_26_0__ba-3f877b"], {
"92293": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f=__webpack_require__(84816),k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};
function q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=""+g);void 0!==a.key&&(e=""+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;


}),
"31549": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


if (true) {
  module.exports = __webpack_require__(92293);
} else {}


}),
"51015": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _NativeBlobModule = /*#__PURE__*/ _interop_require_default(_export_star(__webpack_require__(82550), exports));
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var _default = _NativeBlobModule.default;


}),
"46980": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _NativeBugReporting = /*#__PURE__*/ _interop_require_default(_export_star(__webpack_require__(60055), exports));
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var _default = _NativeBugReporting.default;


}),
"68342": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return NativeEventEmitter;
    }
}));
var _Platform = /*#__PURE__*/ _interop_require_default(__webpack_require__(78185));
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default(__webpack_require__(99112));
var _invariant = /*#__PURE__*/ _interop_require_default(__webpack_require__(97250));
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var NativeEventEmitter = /*#__PURE__*/ function() {
    function NativeEventEmitter(nativeModule) {
        if (_Platform.default.OS === 'ios') {
            (0, _invariant.default)(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');
        }
        var hasAddListener = !!nativeModule && typeof nativeModule.addListener === 'function';
        var hasRemoveListeners = !!nativeModule && typeof nativeModule.removeListeners === 'function';
        if (nativeModule && hasAddListener && hasRemoveListeners) {
            this._nativeModule = nativeModule;
        } else if (nativeModule != null) {
            if (!hasAddListener) {
                console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.');
            }
            if (!hasRemoveListeners) {
                console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.');
            }
        }
    }
    var _proto = NativeEventEmitter.prototype;
    _proto.addListener = function addListener(eventType, listener, context) {
        var _this = this;
        var _this__nativeModule;
        (_this__nativeModule = this._nativeModule) == null ? void 0 : _this__nativeModule.addListener(eventType);
        var subscription = _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);
        return {
            remove: function() {
                if (subscription != null) {
                    var _this__nativeModule;
                    (_this__nativeModule = _this._nativeModule) == null ? void 0 : _this__nativeModule.removeListeners(1);
                    subscription.remove();
                    subscription = null;
                }
            }
        };
    };
    _proto.emit = function emit(eventType) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
            args[_key - 1] = arguments[_key];
        }
        var _RCTDeviceEventEmitter1;
        (_RCTDeviceEventEmitter1 = _RCTDeviceEventEmitter.default).emit.apply(_RCTDeviceEventEmitter1, [
            eventType
        ].concat(_to_consumable_array(args)));
    };
    _proto.removeAllListeners = function removeAllListeners(eventType) {
        var _this__nativeModule;
        (0, _invariant.default)(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');
        (_this__nativeModule = this._nativeModule) == null ? void 0 : _this__nativeModule.removeListeners(this.listenerCount(eventType));
        _RCTDeviceEventEmitter.default.removeAllListeners(eventType);
    };
    _proto.listenerCount = function listenerCount(eventType) {
        return _RCTDeviceEventEmitter.default.listenerCount(eventType);
    };
    return NativeEventEmitter;
}();


}),
"40434": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _NativeDeviceEventManager = /*#__PURE__*/ _interop_require_default(_export_star(__webpack_require__(66262), exports));
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var _default = _NativeDeviceEventManager.default;


}),
"67921": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _NativeDialogManagerAndroid = /*#__PURE__*/ _interop_require_default(_export_star(__webpack_require__(53907), exports));
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var _default = _NativeDialogManagerAndroid.default;


}),
"12071": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _NativeRedBox = /*#__PURE__*/ _interop_require_default(_export_star(__webpack_require__(9549), exports));
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var _default = _NativeRedBox.default;


}),
"45401": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _NativeNetworkingAndroid = /*#__PURE__*/ _interop_require_default(_export_star(__webpack_require__(27159), exports));
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var _default = _NativeNetworkingAndroid.default;


}),
"14688": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _NativeHeadlessJsTaskSupport = /*#__PURE__*/ _interop_require_default(_export_star(__webpack_require__(75895), exports));
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var _default = _NativeHeadlessJsTaskSupport.default;


}),
"82550": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(46101));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var NativeModule = _TurboModuleRegistry.get('BlobModule');
var constants = null;
var NativeBlobModule = null;
if (NativeModule != null) {
    NativeBlobModule = {
        getConstants: function() {
            if (constants == null) {
                constants = NativeModule.getConstants();
            }
            return constants;
        },
        addNetworkingHandler: function() {
            NativeModule.addNetworkingHandler();
        },
        addWebSocketHandler: function(id) {
            NativeModule.addWebSocketHandler(id);
        },
        removeWebSocketHandler: function(id) {
            NativeModule.removeWebSocketHandler(id);
        },
        sendOverSocket: function(blob, socketID) {
            NativeModule.sendOverSocket(blob, socketID);
        },
        createFromParts: function(parts, withId) {
            NativeModule.createFromParts(parts, withId);
        },
        release: function(blobId) {
            NativeModule.release(blobId);
        }
    };
}
var _default = NativeBlobModule;


}),
"60055": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(46101));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var _default = _TurboModuleRegistry.get('BugReporting');


}),
"66262": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(46101));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var _default = _TurboModuleRegistry.get('DeviceEventManager');


}),
"53907": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(46101));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var _default = _TurboModuleRegistry.get('DialogManagerAndroid');


}),
"75895": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(46101));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var _default = _TurboModuleRegistry.get('HeadlessJsTaskSupport');


}),
"27159": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(46101));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var _default = _TurboModuleRegistry.getEnforcing('Networking');


}),
"9549": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(46101));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var _default = _TurboModuleRegistry.get('RedBox');


}),
"58224": (function (__unused_webpack_module, exports) {
"use strict";

exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4');
    }
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join('');
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength){
        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
    }
    return parts.join('');
}


}),
"69524": (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _Platform = /*#__PURE__*/ _interop_require_default(__webpack_require__(78185));
var _RCTAlertManager = /*#__PURE__*/ _interop_require_default(__webpack_require__(14979));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Launches an alert dialog with the specified title and message.
 *
 * See https://reactnative.dev/docs/alert
 */ var Alert = /*#__PURE__*/ function() {
    "use strict";
    function Alert() {}
    Alert.alert = function alert(title, message, buttons, options) {
        if (_Platform.default.OS === 'ios') {
            Alert.prompt(title, message, buttons, 'default', undefined, undefined, options);
        } else if (_Platform.default.OS === 'android') {
            var NativeDialogManagerAndroid = (__webpack_require__(67921)/* ["default"] */["default"]);
            if (!NativeDialogManagerAndroid) {
                return;
            }
            var constants = NativeDialogManagerAndroid.getConstants();
            var config = {
                title: title || '',
                message: message || '',
                cancelable: false
            };
            if (options && options.cancelable) {
                config.cancelable = options.cancelable;
            }
            // At most three buttons (neutral, negative, positive). Ignore rest.
            // The text 'OK' should be probably localized. iOS Alert does that in native.
            var defaultPositiveText = 'OK';
            var validButtons = buttons ? buttons.slice(0, 3) : [
                {
                    text: defaultPositiveText
                }
            ];
            var buttonPositive = validButtons.pop();
            var buttonNegative = validButtons.pop();
            var buttonNeutral = validButtons.pop();
            if (buttonNeutral) {
                config.buttonNeutral = buttonNeutral.text || '';
            }
            if (buttonNegative) {
                config.buttonNegative = buttonNegative.text || '';
            }
            if (buttonPositive) {
                config.buttonPositive = buttonPositive.text || defaultPositiveText;
            }
            /* $FlowFixMe[missing-local-annot] The type annotation(s) required by
       * Flow's LTI update could not be added via codemod */ var onAction = function(action, buttonKey) {
                if (action === constants.buttonClicked) {
                    if (buttonKey === constants.buttonNeutral) {
                        // $FlowFixMe[incompatible-type]
                        buttonNeutral.onPress && buttonNeutral.onPress();
                    } else if (buttonKey === constants.buttonNegative) {
                        // $FlowFixMe[incompatible-type]
                        buttonNegative.onPress && buttonNegative.onPress();
                    } else if (buttonKey === constants.buttonPositive) {
                        // $FlowFixMe[incompatible-type]
                        buttonPositive.onPress && buttonPositive.onPress();
                    }
                } else if (action === constants.dismissed) {
                    options && options.onDismiss && options.onDismiss();
                }
            };
            var onError = function(errorMessage) {
                return console.warn(errorMessage);
            };
            NativeDialogManagerAndroid.showAlert(config, onError, onAction);
        }
    };
    Alert.prompt = function prompt(title, message, callbackOrButtons, type, defaultValue, keyboardType, options) {
        if (type === void 0) type = 'plain-text';
        if (_Platform.default.OS === 'ios') {
            var callbacks = [];
            var buttons = [];
            var cancelButtonKey;
            var destructiveButtonKey;
            var preferredButtonKey;
            if (typeof callbackOrButtons === 'function') {
                callbacks = [
                    callbackOrButtons
                ];
            } else if (Array.isArray(callbackOrButtons)) {
                callbackOrButtons.forEach(function(btn, index) {
                    callbacks[index] = btn.onPress;
                    if (btn.style === 'cancel') {
                        cancelButtonKey = String(index);
                    } else if (btn.style === 'destructive') {
                        destructiveButtonKey = String(index);
                    }
                    if (btn.isPreferred) {
                        preferredButtonKey = String(index);
                    }
                    if (btn.text || index < (callbackOrButtons || []).length - 1) {
                        var btnDef = {};
                        btnDef[index] = btn.text || '';
                        buttons.push(btnDef);
                    }
                });
            }
            _RCTAlertManager.default.alertWithArgs({
                title: title || '',
                message: message || undefined,
                buttons: buttons,
                type: type || undefined,
                defaultValue: defaultValue,
                cancelButtonKey: cancelButtonKey,
                destructiveButtonKey: destructiveButtonKey,
                preferredButtonKey: preferredButtonKey,
                keyboardType: keyboardType,
                userInterfaceStyle: (options == null ? void 0 : options.userInterfaceStyle) || undefined
            }, function(id, value) {
                var cb = callbacks[id];
                cb && cb(value);
            });
        }
    };
    return Alert;
}();
module.exports = Alert;


}),
"14979": (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _NativeDialogManagerAndroid = /*#__PURE__*/ _interop_require_default(__webpack_require__(67921));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function emptyCallback() {}
module.exports = {
    alertWithArgs: function alertWithArgs(args, callback) {
        // TODO(5998984): Polyfill it correctly with DialogManagerAndroid
        if (!_NativeDialogManagerAndroid.default) {
            return;
        }
        _NativeDialogManagerAndroid.default.showAlert(args, emptyCallback, callback || emptyCallback);
    }
};


}),
"23234": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
/**
 * Opaque JS representation of some binary data in native.
 *
 * The API is modeled after the W3C Blob API, with one caveat
 * regarding explicit deallocation. Refer to the `close()`
 * method for further details.
 *
 * Example usage in a React component:
 *
 *   class WebSocketImage extends React.Component {
 *      state = {blob: null};
 *      componentDidMount() {
 *        let ws = this.ws = new WebSocket(...);
 *        ws.binaryType = 'blob';
 *        ws.onmessage = (event) => {
 *          if (this.state.blob) {
 *            this.state.blob.close();
 *          }
 *          this.setState({blob: event.data});
 *        };
 *      }
 *      componentUnmount() {
 *        if (this.state.blob) {
 *          this.state.blob.close();
 *        }
 *        this.ws.close();
 *      }
 *      render() {
 *        if (!this.state.blob) {
 *          return <View />;
 *        }
 *        return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;
 *      }
 *   }
 *
 * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob
 */ var Blob = /*#__PURE__*/ function() {
    function Blob(parts, options) {
        if (parts === void 0) parts = [];
        var BlobManager = __webpack_require__(61414);
        this.data = BlobManager.createFromParts(parts, options).data;
    }
    var _proto = Blob.prototype;
    _proto.slice = function slice(start, end, contentType) {
        if (contentType === void 0) contentType = '';
        var BlobManager = __webpack_require__(61414);
        var _this_data = this.data, offset = _this_data.offset, size = _this_data.size;
        if (typeof start === 'number') {
            if (start > size) {
                // $FlowFixMe[reassign-const]
                start = size;
            }
            offset += start;
            size -= start;
            if (typeof end === 'number') {
                if (end < 0) {
                    // $FlowFixMe[reassign-const]
                    end = this.size + end;
                }
                if (end > this.size) {
                    // $FlowFixMe[reassign-const]
                    end = this.size;
                }
                size = end - start;
            }
        }
        return BlobManager.createFromOptions({
            blobId: this.data.blobId,
            offset: offset,
            size: size,
            type: contentType,
            /* Since `blob.slice()` creates a new view onto the same binary
       * data as the original blob, we should re-use the same collector
       * object so that the underlying resource gets deallocated when
       * the last view into the data is released, not the first.
       */ __collector: this.data.__collector
        });
    };
    /**
   * This method is in the standard, but not actually implemented by
   * any browsers at this point. It's important for how Blobs work in
   * React Native, however, since we cannot de-allocate resources automatically,
   * so consumers need to explicitly de-allocate them.
   *
   * Note that the semantics around Blobs created via `blob.slice()`
   * and `new Blob([blob])` are different. `blob.slice()` creates a
   * new *view* onto the same binary data, so calling `close()` on any
   * of those views is enough to deallocate the data, whereas
   * `new Blob([blob, ...])` actually copies the data in memory.
   */ _proto.close = function close() {
        var BlobManager = __webpack_require__(61414);
        BlobManager.release(this.data.blobId);
        this.data = null;
    };
    _create_class(Blob, [
        {
            key: "data",
            get: // $FlowFixMe[unsafe-getters-setters]
            function get() {
                if (!this._data) {
                    throw new Error('Blob has been closed and is no longer available');
                }
                return this._data;
            },
            set: /*
   * This method is used to create a new Blob object containing
   * the data in the specified range of bytes of the source Blob.
   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice
   */ // $FlowFixMe[unsafe-getters-setters]
            function set(data) {
                this._data = data;
            }
        },
        {
            key: "size",
            get: /**
   * Size of the data contained in the Blob object, in bytes.
   */ // $FlowFixMe[unsafe-getters-setters]
            function get() {
                return this.data.size;
            }
        },
        {
            key: "type",
            get: /*
   * String indicating the MIME type of the data contained in the Blob.
   * If the type is unknown, this string is empty.
   */ // $FlowFixMe[unsafe-getters-setters]
            function get() {
                return this.data.type || '';
            }
        }
    ]);
    return Blob;
}();
module.exports = Blob;


}),
"61414": (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _NativeBlobModule = /*#__PURE__*/ _interop_require_default(__webpack_require__(51015));
var _invariant = /*#__PURE__*/ _interop_require_default(__webpack_require__(97250));
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var Blob = __webpack_require__(23234);
var BlobRegistry = __webpack_require__(7185);
/*eslint-disable no-bitwise */ /*eslint-disable eqeqeq */ /**
 * Based on the rfc4122-compliant solution posted at
 * http://stackoverflow.com/questions/105034
 */ function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
    });
}
// **Temporary workaround**
// TODO(#24654): Use turbomodules for the Blob module.
// Blob collector is a jsi::HostObject that is used by native to know
// when the a Blob instance is deallocated. This allows to free the
// underlying native resources. This is a hack to workaround the fact
// that the current bridge infra doesn't allow to track js objects
// deallocation. Ideally the whole Blob object should be a jsi::HostObject.
function createBlobCollector(blobId) {
    if (__webpack_require__.g.__blobCollectorProvider == null) {
        return null;
    } else {
        return __webpack_require__.g.__blobCollectorProvider(blobId);
    }
}
/**
 * Module to manage blobs. Wrapper around the native blob module.
 */ var BlobManager = /*#__PURE__*/ function() {
    "use strict";
    function BlobManager() {}
    /**
   * Create blob from existing array of blobs.
   */ BlobManager.createFromParts = function createFromParts(parts, options) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        var blobId = uuidv4();
        var items = parts.map(function(part) {
            if (part instanceof ArrayBuffer || ArrayBuffer.isView(part)) {
                throw new Error("Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported");
            }
            if (part instanceof Blob) {
                return {
                    data: part.data,
                    type: 'blob'
                };
            } else {
                return {
                    data: String(part),
                    type: 'string'
                };
            }
        });
        var size = items.reduce(function(acc, curr) {
            if (curr.type === 'string') {
                return acc + __webpack_require__.g.unescape(encodeURI(curr.data)).length;
            } else {
                return acc + curr.data.size;
            }
        }, 0);
        _NativeBlobModule.default.createFromParts(items, blobId);
        return BlobManager.createFromOptions({
            blobId: blobId,
            offset: 0,
            size: size,
            type: options ? options.type : '',
            lastModified: options ? options.lastModified : Date.now()
        });
    };
    /**
   * Create blob instance from blob data from native.
   * Used internally by modules like XHR, WebSocket, etc.
   */ BlobManager.createFromOptions = function createFromOptions(options) {
        BlobRegistry.register(options.blobId);
        // $FlowFixMe[prop-missing]
        return Object.assign(Object.create(Blob.prototype), {
            data: // Reuse the collector instance when creating from an existing blob.
            // This will make sure that the underlying resource is only deallocated
            // when all blobs that refer to it are deallocated.
            options.__collector == null ? _extends({}, options, {
                __collector: createBlobCollector(options.blobId)
            }) : options
        });
    };
    /**
   * Deallocate resources for a blob.
   */ BlobManager.release = function release(blobId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        BlobRegistry.unregister(blobId);
        if (BlobRegistry.has(blobId)) {
            return;
        }
        _NativeBlobModule.default.release(blobId);
    };
    /**
   * Inject the blob content handler in the networking module to support blob
   * requests and responses.
   */ BlobManager.addNetworkingHandler = function addNetworkingHandler() {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.addNetworkingHandler();
    };
    /**
   * Indicate the websocket should return a blob for incoming binary
   * messages.
   */ BlobManager.addWebSocketHandler = function addWebSocketHandler(socketId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.addWebSocketHandler(socketId);
    };
    /**
   * Indicate the websocket should no longer return a blob for incoming
   * binary messages.
   */ BlobManager.removeWebSocketHandler = function removeWebSocketHandler(socketId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.removeWebSocketHandler(socketId);
    };
    /**
   * Send a blob message to a websocket.
   */ BlobManager.sendOverSocket = function sendOverSocket(blob, socketId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.sendOverSocket(blob.data, socketId);
    };
    return BlobManager;
}();
/**
   * If the native blob module is available.
   */ BlobManager.isAvailable = !!_NativeBlobModule.default;
module.exports = BlobManager;


}),
"7185": (function (module) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ var registry = new Map();
var register = function(id) {
    var used = registry.get(id);
    if (used != null) {
        registry.set(id, used + 1);
    } else {
        registry.set(id, 1);
    }
};
var unregister = function(id) {
    var used = registry.get(id);
    if (used != null) {
        if (used <= 1) {
            registry["delete"](id);
        } else {
            registry.set(id, used - 1);
        }
    }
};
var has = function(id) {
    return registry.get(id) || false;
};
module.exports = {
    register: register,
    unregister: unregister,
    has: has
};


}),
"91283": (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default(__webpack_require__(99112));
var _NativeRedBox = /*#__PURE__*/ _interop_require_default(__webpack_require__(12071));
__webpack_require__(23742);
var _NativeBugReporting = /*#__PURE__*/ _interop_require_default(__webpack_require__(46980));
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function defaultExtras() {
    BugReporting.addFileSource('react_hierarchy.txt', function() {
        return __webpack_require__(29023)();
    });
}
/**
 * A simple class for collecting bug report data. Components can add sources that will be queried when a bug report
 * is created via `collectExtraData`. For example, a list component might add a source that provides the list of rows
 * that are currently visible on screen. Components should also remember to call `remove()` on the object that is
 * returned by `addSource` when they are unmounted.
 */ var BugReporting = /*#__PURE__*/ function() {
    "use strict";
    function BugReporting() {}
    BugReporting._maybeInit = function _maybeInit() {
        if (!BugReporting._subscription) {
            BugReporting._subscription = _RCTDeviceEventEmitter.default.addListener('collectBugExtraData', // $FlowFixMe[method-unbinding]
            BugReporting.collectExtraData, null);
            defaultExtras();
        }
        if (!BugReporting._redboxSubscription) {
            BugReporting._redboxSubscription = _RCTDeviceEventEmitter.default.addListener('collectRedBoxExtraData', // $FlowFixMe[method-unbinding]
            BugReporting.collectExtraData, null);
        }
    };
    /**
   * Maps a string key to a simple callback that should return a string payload to be attached
   * to a bug report. Source callbacks are called when `collectExtraData` is called.
   *
   * Returns an object to remove the source when the component unmounts.
   *
   * Conflicts trample with a warning.
   */ BugReporting.addSource = function addSource(key, callback) {
        return this._addSource(key, callback, BugReporting._extraSources);
    };
    /**
   * Maps a string key to a simple callback that should return a string payload to be attached
   * to a bug report. Source callbacks are called when `collectExtraData` is called.
   *
   * Returns an object to remove the source when the component unmounts.
   *
   * Conflicts trample with a warning.
   */ BugReporting.addFileSource = function addFileSource(key, callback) {
        return this._addSource(key, callback, BugReporting._fileSources);
    };
    BugReporting._addSource = function _addSource(key, callback, source) {
        BugReporting._maybeInit();
        if (source.has(key)) {
            console.warn("BugReporting.add* called multiple times for same key '" + key + "'");
        }
        source.set(key, callback);
        return {
            remove: function() {
                source["delete"](key);
            }
        };
    };
    /**
   * This can be called from a native bug reporting flow, or from JS code.
   *
   * If available, this will call `NativeModules.BugReporting.setExtraData(extraData)`
   * after collecting `extraData`.
   */ BugReporting.collectExtraData = function collectExtraData() {
        var extraData = {};
        for(var _i = 0, _BugReporting__extraSources = BugReporting._extraSources; _i < _BugReporting__extraSources.length; _i++){
            var _BugReporting__extraSources__i = _sliced_to_array(_BugReporting__extraSources[_i], 2), key = _BugReporting__extraSources__i[0], callback = _BugReporting__extraSources__i[1];
            extraData[key] = callback();
        }
        var fileData = {};
        for(var _i1 = 0, _BugReporting__fileSources = BugReporting._fileSources; _i1 < _BugReporting__fileSources.length; _i1++){
            var _BugReporting__fileSources__i = _sliced_to_array(_BugReporting__fileSources[_i1], 2), key1 = _BugReporting__fileSources__i[0], callback1 = _BugReporting__fileSources__i[1];
            fileData[key1] = callback1();
        }
        if (_NativeBugReporting.default != null && _NativeBugReporting.default.setExtraData != null) {
            _NativeBugReporting.default.setExtraData(extraData, fileData);
        }
        if (_NativeRedBox.default != null && _NativeRedBox.default.setExtraData != null) {
            _NativeRedBox.default.setExtraData(extraData, 'From BugReporting.js');
        }
        return {
            extras: extraData,
            files: fileData
        };
    };
    return BugReporting;
}();
BugReporting._extraSources = new Map();
BugReporting._fileSources = new Map();
BugReporting._subscription = null;
BugReporting._redboxSubscription = null;
module.exports = BugReporting;


}),
"29023": (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
/*
const getReactData = require('getReactData');

const INDENTATION_SIZE = 2;
const MAX_DEPTH = 2;
const MAX_STRING_LENGTH = 50;
*/ /**
 * Dump all React Native root views and their content. This function tries
 * it best to get the content but ultimately relies on implementation details
 * of React and will fail in future versions.
 */ function dumpReactTree() {
    try {
        return getReactTree();
    } catch (e) {
        return 'Failed to dump react tree: ' + e;
    }
}
function getReactTree() {
    // TODO(sema): Reenable tree dumps using the Fiber tree structure. #15945684
    return 'React tree dumps have been temporarily disabled while React is ' + 'upgraded to Fiber.';
/*
  let output = '';
  const rootIds = Object.getOwnPropertyNames(ReactNativeMount._instancesByContainerID);
  for (const rootId of rootIds) {
    const instance = ReactNativeMount._instancesByContainerID[rootId];
    output += `============ Root ID: ${rootId} ============\n`;
    output += dumpNode(instance, 0);
    output += `============ End root ID: ${rootId} ============\n`;
  }
  return output;
*/ }
/*
function dumpNode(node: Object, indentation: number) {
  const data = getReactData(node);
  if (data.nodeType === 'Text') {
    return indent(indentation) + data.text + '\n';
  } else if (data.nodeType === 'Empty') {
    return '';
  }
  let output = indent(indentation) + `<${data.name}`;
  if (data.nodeType === 'Composite') {
    for (const propName of Object.getOwnPropertyNames(data.props || {})) {
      if (isNormalProp(propName)) {
        try {
          const value = convertValue(data.props[propName]);
          if (value) {
            output += ` ${propName}=${value}`;
          }
        } catch (e) {
          const message = `[Failed to get property: ${e}]`;
          output += ` ${propName}=${message}`;
        }
      }
    }
  }
  let childOutput = '';
  for (const child of data.children || []) {
    childOutput += dumpNode(child, indentation + 1);
  }

  if (childOutput) {
    output += '>\n' + childOutput + indent(indentation) + `</${data.name}>\n`;
  } else {
    output += ' />\n';
  }

  return output;
}

function isNormalProp(name: string): boolean {
  switch (name) {
    case 'children':
    case 'key':
    case 'ref':
      return false;
    default:
      return true;
  }
}

function convertObject(object: Object, depth: number) {
  if (depth >= MAX_DEPTH) {
    return '[...omitted]';
  }
  let output = '{';
  let first = true;
  for (const key of Object.getOwnPropertyNames(object)) {
    if (!first) {
      output += ', ';
    }
    output += `${key}: ${convertValue(object[key], depth + 1)}`;
    first = false;
  }
  return output + '}';
}

function convertValue(value, depth = 0): ?string {
  if (!value) {
    return null;
  }

  switch (typeof value) {
    case 'string':
      return JSON.stringify(possiblyEllipsis(value).replace('\n', '\\n'));
    case 'boolean':
    case 'number':
      return JSON.stringify(value);
    case 'function':
      return '[function]';
    case 'object':
      return convertObject(value, depth);
    default:
      return null;
  }
}

function possiblyEllipsis(value: string) {
  if (value.length > MAX_STRING_LENGTH) {
    return value.slice(0, MAX_STRING_LENGTH) + '...';
  } else {
    return value;
  }
}

function indent(size: number) {
  return ' '.repeat(size * INDENTATION_SIZE);
}
*/ module.exports = dumpReactTree;


}),
"57376": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var registerCallableModule = function() {
    if (__webpack_require__.g.RN$Bridgeless === true) {
        return function(name, moduleOrFactory) {
            if (typeof moduleOrFactory === 'function') {
                __webpack_require__.g.RN$registerCallableModule(name, moduleOrFactory);
                return;
            }
            __webpack_require__.g.RN$registerCallableModule(name, function() {
                return moduleOrFactory;
            });
        };
    }
    var BatchedBridge = __webpack_require__(2378);
    return function(name, moduleOrFactory) {
        if (typeof moduleOrFactory === 'function') {
            BatchedBridge.registerLazyCallableModule(name, moduleOrFactory);
            return;
        }
        BatchedBridge.registerCallableModule(name, moduleOrFactory);
    };
}();
var _default = registerCallableModule;


}),
"95328": (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default(__webpack_require__(99112));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Deprecated - subclass NativeEventEmitter to create granular event modules instead of
 * adding all event listeners directly to RCTNativeAppEventEmitter.
 */ var RCTNativeAppEventEmitter = _RCTDeviceEventEmitter.default;
module.exports = RCTNativeAppEventEmitter;


}),
"49922": (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
/**
 * Polyfill for XMLHttpRequest2 FormData API, allowing multipart POST requests
 * with mixed data (string, native files) to be submitted via XMLHttpRequest.
 *
 * Example:
 *
 *   var photo = {
 *     uri: uriFromCameraRoll,
 *     type: 'image/jpeg',
 *     name: 'photo.jpg',
 *   };
 *
 *   var body = new FormData();
 *   body.append('authToken', 'secret');
 *   body.append('photo', photo);
 *   body.append('title', 'A beautiful photo!');
 *
 *   xhr.open('POST', serverURL);
 *   xhr.send(body);
 */ var FormData = /*#__PURE__*/ function() {
    function FormData() {
        this._parts = [];
    }
    var _proto = FormData.prototype;
    _proto.append = function append(key, value) {
        // The XMLHttpRequest spec doesn't specify if duplicate keys are allowed.
        // MDN says that any new values should be appended to existing values.
        // In any case, major browsers allow duplicate keys, so that's what we'll do
        // too. They'll simply get appended as additional form data parts in the
        // request body, leaving the server to deal with them.
        this._parts.push([
            key,
            value
        ]);
    };
    _proto.getAll = function getAll(key) {
        return this._parts.filter(function(param) {
            var _param = _sliced_to_array(param, 1), name = _param[0];
            return name === key;
        }).map(function(param) {
            var _param = _sliced_to_array(param, 2), value = _param[1];
            return value;
        });
    };
    _proto.getParts = function getParts() {
        return this._parts.map(function(param) {
            var _param = _sliced_to_array(param, 2), name = _param[0], value = _param[1];
            var contentDisposition = 'form-data; name="' + name + '"';
            var headers = {
                'content-disposition': contentDisposition
            };
            // The body part is a "blob", which in React Native just means
            // an object with a `uri` attribute. Optionally, it can also
            // have a `name` and `type` attribute to specify filename and
            // content type (cf. web Blob interface.)
            if ((typeof value === "undefined" ? "undefined" : _type_of(value)) === 'object' && !Array.isArray(value) && value) {
                if (typeof value.name === 'string') {
                    headers['content-disposition'] += '; filename="' + value.name + "\"; filename*=utf-8''" + encodeURI(value.name);
                }
                if (typeof value.type === 'string') {
                    headers['content-type'] = value.type;
                }
                return _extends({}, value, {
                    headers: headers,
                    fieldName: name
                });
            }
            // Convert non-object values to strings as per FormData.append() spec
            return {
                string: String(value),
                headers: headers,
                fieldName: name
            };
        });
    };
    return FormData;
}();
module.exports = FormData;


}),
"93310": (function (__unused_webpack_module, exports, __webpack_require__) {
var __webpack_unused_export__;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ // Do not require the native RCTNetworking module directly! Use this wrapper module instead.
// It will add the necessary requestId, so that you don't have to generate it yourself.
__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _NativeEventEmitter = /*#__PURE__*/ _interop_require_default(__webpack_require__(68342));
var _Platform = /*#__PURE__*/ _interop_require_default(__webpack_require__(78185));
var _convertRequestBody = /*#__PURE__*/ _interop_require_default(__webpack_require__(20956));
var _NativeNetworkingAndroid = /*#__PURE__*/ _interop_require_default(__webpack_require__(45401));
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
// Convert FormData headers to arrays, which are easier to consume in
// native on Android.
function convertHeadersMapToArray(headers) {
    var headerArray = [];
    for(var name in headers){
        headerArray.push([
            name,
            headers[name]
        ]);
    }
    return headerArray;
}
var _requestId = 1;
function generateRequestId() {
    return _requestId++;
}
/**
 * This class is a wrapper around the native RCTNetworking module. It adds a necessary unique
 * requestId to each network request that can be used to abort that request later on.
 */ // FIXME: use typed events
var RCTNetworking = /*#__PURE__*/ function(NativeEventEmitter) {
    "use strict";
    _inherits(RCTNetworking, NativeEventEmitter);
    function RCTNetworking() {
        return NativeEventEmitter.call(this, // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior
        // If you want to use the native module on other platforms, please remove this condition and test its behavior
        _Platform.default.OS !== 'ios' ? null : _NativeNetworkingAndroid.default) || this;
    }
    var _proto = RCTNetworking.prototype;
    _proto.sendRequest = function sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
        var body = (0, _convertRequestBody.default)(data);
        if (body && body.formData) {
            body.formData = body.formData.map(function(part) {
                return _extends({}, part, {
                    headers: convertHeadersMapToArray(part.headers)
                });
            });
        }
        var requestId = generateRequestId();
        _NativeNetworkingAndroid.default.sendRequest(method, url, requestId, convertHeadersMapToArray(headers), _extends({}, body, {
            trackingName: trackingName
        }), responseType, incrementalUpdates, timeout, withCredentials);
        callback(requestId);
    };
    _proto.abortRequest = function abortRequest(requestId) {
        _NativeNetworkingAndroid.default.abortRequest(requestId);
    };
    _proto.clearCookies = function clearCookies(callback) {
        _NativeNetworkingAndroid.default.clearCookies(callback);
    };
    return RCTNetworking;
}(_NativeEventEmitter.default);
var _default = new RCTNetworking();


}),
"20956": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
var Blob = __webpack_require__(23234);
var binaryToBase64 = __webpack_require__(10652);
var FormData = __webpack_require__(49922);
function convertRequestBody(body) {
    if (typeof body === 'string') {
        return {
            string: body
        };
    }
    if (body instanceof Blob) {
        return {
            blob: body.data
        };
    }
    if (body instanceof FormData) {
        return {
            formData: body.getParts()
        };
    }
    if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
        /* $FlowFixMe[incompatible-call] : no way to assert that 'body' is indeed
     * an ArrayBufferView */ return {
            base64: binaryToBase64(body)
        };
    }
    return body;
}
module.exports = convertRequestBody;


}),
"69962": (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _registerCallableModule = /*#__PURE__*/ _interop_require_default(__webpack_require__(57376));
var _BugReporting = /*#__PURE__*/ _interop_require_default(__webpack_require__(91283));
var _createPerformanceLogger = /*#__PURE__*/ _interop_require_default(__webpack_require__(64156));
var _infoLog = /*#__PURE__*/ _interop_require_default(__webpack_require__(98265));
var _SceneTracker = /*#__PURE__*/ _interop_require_default(__webpack_require__(29338));
var _DisplayMode = __webpack_require__(46537);
var _HeadlessJsTaskError = /*#__PURE__*/ _interop_require_default(__webpack_require__(4367));
var _NativeHeadlessJsTaskSupport = /*#__PURE__*/ _interop_require_default(__webpack_require__(14688));
var _renderApplication = /*#__PURE__*/ _interop_require_default(__webpack_require__(56037));
var _RendererProxy = __webpack_require__(46978);
var _invariant = /*#__PURE__*/ _interop_require_default(__webpack_require__(97250));
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var runnables = {};
var runCount = 1;
var sections = {};
var taskProviders = new Map();
var taskCancelProviders = new Map();
var componentProviderInstrumentationHook = function(component) {
    return component();
};
var wrapperComponentProvider;
var rootViewStyleProvider;
/**
 * `AppRegistry` is the JavaScript entry point to running all React Native apps.
 *
 * See https://reactnative.dev/docs/appregistry
 */ var AppRegistry = {
    setWrapperComponentProvider: function(provider) {
        wrapperComponentProvider = provider;
    },
    setRootViewStyleProvider: function(provider) {
        rootViewStyleProvider = provider;
    },
    registerConfig: function(config) {
        config.forEach(function(appConfig) {
            if (appConfig.run) {
                AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
            } else {
                (0, _invariant.default)(appConfig.component != null, 'AppRegistry.registerConfig(...): Every config is expected to set ' + 'either `run` or `component`, but `%s` has neither.', appConfig.appKey);
                AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
            }
        });
    },
    /**
   * Registers an app's root component.
   *
   * See https://reactnative.dev/docs/appregistry#registercomponent
   */ registerComponent: function(appKey, componentProvider, section) {
        var scopedPerformanceLogger = (0, _createPerformanceLogger.default)();
        runnables[appKey] = function(appParameters, displayMode) {
            var _appParameters_initialProps;
            var concurrentRootEnabled = Boolean(((_appParameters_initialProps = appParameters.initialProps) == null ? void 0 : _appParameters_initialProps.concurrentRoot) || appParameters.concurrentRoot);
            (0, _renderApplication.default)(componentProviderInstrumentationHook(componentProvider, scopedPerformanceLogger), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters), rootViewStyleProvider && rootViewStyleProvider(appParameters), appParameters.fabric, scopedPerformanceLogger, appKey === 'LogBox', appKey, displayMode, concurrentRootEnabled);
        };
        if (section) {
            sections[appKey] = runnables[appKey];
        }
        return appKey;
    },
    registerRunnable: function(appKey, run) {
        runnables[appKey] = run;
        return appKey;
    },
    registerSection: function(appKey, component) {
        AppRegistry.registerComponent(appKey, component, true);
    },
    getAppKeys: function() {
        return Object.keys(runnables);
    },
    getSectionKeys: function() {
        return Object.keys(sections);
    },
    getSections: function() {
        return _extends({}, sections);
    },
    getRunnable: function(appKey) {
        return runnables[appKey];
    },
    getRegistry: function() {
        return {
            sections: AppRegistry.getSectionKeys(),
            runnables: _extends({}, runnables)
        };
    },
    setComponentProviderInstrumentationHook: function(hook) {
        componentProviderInstrumentationHook = hook;
    },
    /**
   * Loads the JavaScript bundle and runs the app.
   *
   * See https://reactnative.dev/docs/appregistry#runapplication
   */ runApplication: function(appKey, appParameters, displayMode) {
        if (appKey !== 'LogBox') {
            var logParams =  false ? 0 : '';
            var msg = 'Running "' + appKey + '"' + logParams;
            (0, _infoLog.default)(msg);
            _BugReporting.default.addSource('AppRegistry.runApplication' + runCount++, function() {
                return msg;
            });
        }
        (0, _invariant.default)(runnables[appKey], '"' + appKey + '" has not been registered. This can happen if:\n' + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\n' + "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.");
        _SceneTracker.default.setActiveScene({
            name: appKey
        });
        runnables[appKey](appParameters, (0, _DisplayMode.coerceDisplayMode)(displayMode));
    },
    /**
   * Update initial props for a surface that's already rendered
   */ setSurfaceProps: function(appKey, appParameters, displayMode) {
        if (appKey !== 'LogBox') {
            var msg = 'Updating props for Surface "' + appKey + '" with ' + JSON.stringify(appParameters);
            (0, _infoLog.default)(msg);
            _BugReporting.default.addSource('AppRegistry.setSurfaceProps' + runCount++, function() {
                return msg;
            });
        }
        (0, _invariant.default)(runnables[appKey], '"' + appKey + '" has not been registered. This can happen if:\n' + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\n' + "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.");
        runnables[appKey](appParameters, (0, _DisplayMode.coerceDisplayMode)(displayMode));
    },
    /**
   * Stops an application when a view should be destroyed.
   *
   * See https://reactnative.dev/docs/appregistry#unmountapplicationcomponentatroottag
   */ unmountApplicationComponentAtRootTag: function(rootTag) {
        (0, _RendererProxy.unmountComponentAtNodeAndRemoveContainer)(rootTag);
    },
    /**
   * Register a headless task. A headless task is a bit of code that runs without a UI.
   *
   * See https://reactnative.dev/docs/appregistry#registerheadlesstask
   */ registerHeadlessTask: function(taskKey, taskProvider) {
        // $FlowFixMe[object-this-reference]
        this.registerCancellableHeadlessTask(taskKey, taskProvider, function() {
            return function() {
            /* Cancel is no-op */ };
        });
    },
    /**
   * Register a cancellable headless task. A headless task is a bit of code that runs without a UI.
   *
   * See https://reactnative.dev/docs/appregistry#registercancellableheadlesstask
   */ registerCancellableHeadlessTask: function(taskKey, taskProvider, taskCancelProvider) {
        if (taskProviders.has(taskKey)) {
            console.warn("registerHeadlessTask or registerCancellableHeadlessTask called multiple times for same key '" + taskKey + "'");
        }
        taskProviders.set(taskKey, taskProvider);
        taskCancelProviders.set(taskKey, taskCancelProvider);
    },
    /**
   * Only called from native code. Starts a headless task.
   *
   * See https://reactnative.dev/docs/appregistry#startheadlesstask
   */ startHeadlessTask: function(taskId, taskKey, data) {
        var taskProvider = taskProviders.get(taskKey);
        if (!taskProvider) {
            console.warn("No task registered for key " + taskKey);
            if (_NativeHeadlessJsTaskSupport.default) {
                _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
            }
            return;
        }
        taskProvider()(data).then(function() {
            if (_NativeHeadlessJsTaskSupport.default) {
                _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
            }
        })["catch"](function(reason) {
            console.error(reason);
            if (_NativeHeadlessJsTaskSupport.default && reason instanceof _HeadlessJsTaskError.default) {
                // $FlowFixMe[unused-promise]
                _NativeHeadlessJsTaskSupport.default.notifyTaskRetry(taskId).then(function(retryPosted) {
                    if (!retryPosted) {
                        _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
                    }
                });
            }
        });
    },
    /**
   * Only called from native code. Cancels a headless task.
   *
   * See https://reactnative.dev/docs/appregistry#cancelheadlesstask
   */ cancelHeadlessTask: function(taskId, taskKey) {
        var taskCancelProvider = taskCancelProviders.get(taskKey);
        if (!taskCancelProvider) {
            throw new Error("No task canceller registered for key '" + taskKey + "'");
        }
        taskCancelProvider()();
    }
};
// Register LogBox as a default surface
AppRegistry.registerComponent('LogBox', function() {
    if (false) {} else {
        return function NoOp() {
            return null;
        };
    }
});
__webpack_require__.g.RN$AppRegistry = AppRegistry;
// Backwards compat with SurfaceRegistry, remove me later
__webpack_require__.g.RN$SurfaceRegistry = {
    renderSurface: AppRegistry.runApplication,
    setSurfaceProps: AppRegistry.setSurfaceProps
};
if (__webpack_require__.g.RN$Bridgeless === true) {
    console.log('Bridgeless mode is enabled');
}
(0, _registerCallableModule.default)('AppRegistry', AppRegistry);
module.exports = AppRegistry;


}),
"46537": (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ /** DisplayMode should be in sync with the method displayModeToInt from
 * react/renderer/uimanager/primitives.h. */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    coerceDisplayMode: function() {
        return coerceDisplayMode;
    },
    default: function() {
        return _default;
    }
});
var DisplayMode = Object.freeze({
    VISIBLE: 1,
    SUSPENDED: 2,
    HIDDEN: 3
});
function coerceDisplayMode(value) {
    switch(value){
        case DisplayMode.SUSPENDED:
            return DisplayMode.SUSPENDED;
        case DisplayMode.HIDDEN:
            return DisplayMode.HIDDEN;
        default:
            return DisplayMode.VISIBLE;
    }
}
var _default = DisplayMode;


}),
"4367": (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return HeadlessJsTaskError;
    }
}));
function _construct(Parent, args, Class) {
    if (_is_native_reflect_construct()) {
        _construct = Reflect.construct;
    } else {
        _construct = function construct(Parent, args, Class) {
            var a = [
                null
            ];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _set_prototype_of(instance, Class.prototype);
            return instance;
        };
    }
    return _construct.apply(null, arguments);
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _is_native_function(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _wrap_native_super(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrap_native_super = function wrapNativeSuper(Class) {
        if (Class === null || !_is_native_function(Class)) return Class;
        if (typeof Class !== "function") {
            throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(Class, arguments, _get_prototype_of(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _set_prototype_of(Wrapper, Class);
    };
    return _wrap_native_super(Class);
}
function _is_native_reflect_construct() {
    try {
        var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
    } catch (_) {}
    return (_is_native_reflect_construct = function() {
        return !!result;
    })();
}
var HeadlessJsTaskError = /*#__PURE__*/ function(Error1) {
    "use strict";
    _inherits(HeadlessJsTaskError, Error1);
    function HeadlessJsTaskError() {
        return Error1.apply(this, arguments) || this;
    }
    return HeadlessJsTaskError;
}(_wrap_native_super(Error));


}),
"37522": (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return getCachedComponentWithDisplayName;
    }
}));
var _react = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(84816));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var cache = new Map();
function getCachedComponentWithDisplayName(displayName) {
    var ComponentWithDisplayName = cache.get(displayName);
    if (!ComponentWithDisplayName) {
        ComponentWithDisplayName = function(param) {
            var children = param.children;
            return children;
        };
        // $FlowFixMe[prop-missing]
        ComponentWithDisplayName.displayName = displayName;
        cache.set(displayName, ComponentWithDisplayName);
    }
    return ComponentWithDisplayName;
}


}),
"56037": (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return renderApplication;
    }
}));
var _jsxruntime = __webpack_require__(31549);
var _GlobalPerformanceLogger = /*#__PURE__*/ _interop_require_default(__webpack_require__(63919));
var _PerformanceLoggerContext = /*#__PURE__*/ _interop_require_default(__webpack_require__(95236));
var _AppContainer = /*#__PURE__*/ _interop_require_default(__webpack_require__(74154));
var _DisplayMode = /*#__PURE__*/ _interop_require_default(__webpack_require__(46537));
var _getCachedComponentWithDebugName = /*#__PURE__*/ _interop_require_default(__webpack_require__(37522));
var _RendererProxy = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(46978));
var _invariant = /*#__PURE__*/ _interop_require_default(__webpack_require__(97250));
var _react = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(84816));
__webpack_require__(42087);
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent, rootViewStyle, fabric, scopedPerformanceLogger, isLogBox, debugName, displayMode, useConcurrentRoot, useOffscreen) {
    (0, _invariant.default)(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
    var performanceLogger = scopedPerformanceLogger != null ? scopedPerformanceLogger : _GlobalPerformanceLogger.default;
    var renderable = /*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceLoggerContext.default.Provider, {
        value: performanceLogger,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AppContainer.default, {
            rootTag: rootTag,
            fabric: fabric,
            WrapperComponent: WrapperComponent,
            rootViewStyle: rootViewStyle,
            initialProps: initialProps != null ? initialProps : Object.freeze({}),
            internal_excludeLogBox: isLogBox,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(RootComponent, _extends({}, initialProps, {
                rootTag: rootTag
            }))
        })
    });
    if (false) { var RootComponentWithMeaningfulName }
    if (useOffscreen && displayMode != null) {
        // $FlowFixMe[incompatible-type]
        // $FlowFixMe[prop-missing]
        var Activity = _react.unstable_Activity;
        renderable = /*#__PURE__*/ (0, _jsxruntime.jsx)(Activity, {
            mode: displayMode === _DisplayMode.default.VISIBLE ? 'visible' : 'hidden',
            children: renderable
        });
    }
    // We want to have concurrentRoot always enabled when you're on Fabric.
    var useConcurrentRootOverride = fabric;
    performanceLogger.startTimespan('renderApplication_React_render');
    performanceLogger.setExtra('usedReactConcurrentRoot', useConcurrentRootOverride ? '1' : '0');
    performanceLogger.setExtra('usedReactFabric', fabric ? '1' : '0');
    performanceLogger.setExtra('usedReactProfiler', _RendererProxy.isProfilingRenderer());
    _RendererProxy.renderElement({
        element: renderable,
        rootTag: rootTag,
        useFabric: Boolean(fabric),
        useConcurrentRoot: Boolean(useConcurrentRootOverride)
    });
    performanceLogger.stopTimespan('renderApplication_React_render');
}


}),
"42087": (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _NativeDeviceEventManager = /*#__PURE__*/ _interop_require_default(__webpack_require__(40434));
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default(__webpack_require__(99112));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var DEVICE_BACK_EVENT = 'hardwareBackPress';
var _backPressSubscriptions = [];
_RCTDeviceEventEmitter.default.addListener(DEVICE_BACK_EVENT, function() {
    for(var i = _backPressSubscriptions.length - 1; i >= 0; i--){
        if (_backPressSubscriptions[i]()) {
            return;
        }
    }
    BackHandler.exitApp();
});
/**
 * Detect hardware button presses for back navigation.
 *
 * Android: Detect hardware back button presses, and programmatically invoke the default back button
 * functionality to exit the app if there are no listeners or if none of the listeners return true.
 *
 * iOS: Not applicable.
 *
 * The event subscriptions are called in reverse order (i.e. last registered subscription first),
 * and if one subscription returns true then subscriptions registered earlier will not be called.
 *
 * Example:
 *
 * ```javascript
 * BackHandler.addEventListener('hardwareBackPress', function() {
 *  // this.onMainScreen and this.goBack are just examples, you need to use your own implementation here
 *  // Typically you would use the navigator here to go to the last state.
 *
 *  if (!this.onMainScreen()) {
 *    this.goBack();
 *    return true;
 *  }
 *  return false;
 * });
 * ```
 */ var BackHandler = {
    exitApp: function exitApp() {
        if (!_NativeDeviceEventManager.default) {
            return;
        }
        _NativeDeviceEventManager.default.invokeDefaultBackPressHandler();
    },
    /**
   * Adds an event handler. Supported events:
   *
   * - `hardwareBackPress`: Fires when the Android hardware back button is pressed.
   */ addEventListener: function addEventListener(eventName, handler) {
        if (_backPressSubscriptions.indexOf(handler) === -1) {
            _backPressSubscriptions.push(handler);
        }
        return {
            remove: function() {
                return BackHandler.removeEventListener(eventName, handler);
            }
        };
    },
    /**
   * Removes the event handler.
   */ removeEventListener: function removeEventListener(eventName, handler) {
        var index = _backPressSubscriptions.indexOf(handler);
        if (index !== -1) {
            _backPressSubscriptions.splice(index, 1);
        }
    }
};
module.exports = BackHandler;


}),
"63919": (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _createPerformanceLogger = /*#__PURE__*/ _interop_require_default(__webpack_require__(64156));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * This is a global shared instance of IPerformanceLogger that is created with
 * createPerformanceLogger().
 * This logger should be used only for global performance metrics like the ones
 * that are logged during loading bundle. If you want to log something from your
 * React component you should use PerformanceLoggerContext instead.
 */ var GlobalPerformanceLogger = (0, _createPerformanceLogger.default)();
module.exports = GlobalPerformanceLogger;


}),
"95236": (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    usePerformanceLogger: function() {
        return usePerformanceLogger;
    }
});
var _GlobalPerformanceLogger = /*#__PURE__*/ _interop_require_default(__webpack_require__(63919));
var _react = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(84816));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
/**
 * This is a React Context that provides a scoped instance of IPerformanceLogger.
 * We wrap every <AppContainer /> with a Provider for this context so the logger
 * should be available in every component.
 * See React docs about using Context: https://react.dev/docs/context.html
 */ var PerformanceLoggerContext = /*#__PURE__*/ _react.createContext(_GlobalPerformanceLogger.default);
if (false) {}
function usePerformanceLogger() {
    return (0, _react.useContext)(PerformanceLoggerContext);
}
var _default = PerformanceLoggerContext;


}),
"94582": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var invariant = __webpack_require__(97250);
var levelsMap = {
    log: 'log',
    info: 'info',
    warn: 'warn',
    error: 'error',
    fatal: 'error'
};
var warningHandler = null;
var RCTLog = {
    // level one of log, info, warn, error, mustfix
    logIfNoNativeHook: function(level) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
            args[_key - 1] = arguments[_key];
        }
        // We already printed in the native console, so only log here if using a js debugger
        if (typeof __webpack_require__.g.nativeLoggingHook === 'undefined') {
            var _RCTLog;
            (_RCTLog = RCTLog).logToConsole.apply(_RCTLog, [
                level
            ].concat(_to_consumable_array(args)));
        } else {
            // Report native warnings to LogBox
            if (warningHandler && level === 'warn') {
                warningHandler.apply(void 0, _to_consumable_array(args));
            }
        }
    },
    // Log to console regardless of nativeLoggingHook
    logToConsole: function(level) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
            args[_key - 1] = arguments[_key];
        }
        var _console;
        // $FlowFixMe[invalid-computed-prop]
        var logFn = levelsMap[level];
        invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap).toString());
        (_console = console)[logFn].apply(_console, _to_consumable_array(args));
    },
    setWarningHandler: function(handler) {
        warningHandler = handler;
    }
};
module.exports = RCTLog;


}),
"29338": (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
var _listeners = [];
var _activeScene = {
    name: 'default'
};
var SceneTracker = {
    setActiveScene: function(scene) {
        _activeScene = scene;
        _listeners.forEach(function(listener) {
            return listener(_activeScene);
        });
    },
    getActiveScene: function() {
        return _activeScene;
    },
    addActiveSceneChangedListener: function(callback) {
        _listeners.push(callback);
        return {
            remove: function() {
                _listeners = _listeners.filter(function(listener) {
                    return callback !== listener;
                });
            }
        };
    }
};
module.exports = SceneTracker;


}),
"10652": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
var base64 = __webpack_require__(58224);
function binaryToBase64(data) {
    if (data instanceof ArrayBuffer) {
        // $FlowFixMe[reassign-const]
        data = new Uint8Array(data);
    }
    if (data instanceof Uint8Array) {
        return base64.fromByteArray(data);
    }
    if (!ArrayBuffer.isView(data)) {
        throw new Error('data must be ArrayBuffer or typed array');
    }
    // Already checked that `data` is `DataView` in `ArrayBuffer.isView(data)`
    var buffer = data.buffer, byteOffset = data.byteOffset, byteLength = data.byteLength;
    return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
}
module.exports = binaryToBase64;


}),
"64156": (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    // Re-exporting for backwards compatibility with all the clients that
    // may still import it from this module.
    /**
 * This function creates performance loggers that can be used to collect and log
 * various performance data such as timespans, points and extras.
 * The loggers need to have minimal overhead since they're used in production.
 */ default: function() {
        return createPerformanceLogger;
    },
    getCurrentTimestamp: function() {
        return getCurrentTimestamp;
    }
});
var _infoLog = /*#__PURE__*/ _interop_require_default(__webpack_require__(98265));
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var PRINT_TO_CONSOLE = false; // Type as false to prevent accidentally committing `true`;
var _global_nativeQPLTimestamp;
var getCurrentTimestamp = (_global_nativeQPLTimestamp = __webpack_require__.g.nativeQPLTimestamp) != null ? _global_nativeQPLTimestamp : function() {
    return __webpack_require__.g.performance.now();
};
var PerformanceLogger = /*#__PURE__*/ function() {
    "use strict";
    function PerformanceLogger() {
        this._timespans = {};
        this._extras = {};
        this._points = {};
        this._pointExtras = {};
        this._closed = false;
    }
    var _proto = PerformanceLogger.prototype;
    _proto.addTimespan = function addTimespan(key, startTime, endTime, startExtras, endExtras) {
        if (this._closed) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        if (this._timespans[key]) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        this._timespans[key] = {
            startTime: startTime,
            endTime: endTime,
            totalTime: endTime - (startTime || 0),
            startExtras: startExtras,
            endExtras: endExtras
        };
    };
    _proto.append = function append(performanceLogger) {
        this._timespans = _extends({}, performanceLogger.getTimespans(), this._timespans);
        this._extras = _extends({}, performanceLogger.getExtras(), this._extras);
        this._points = _extends({}, performanceLogger.getPoints(), this._points);
        this._pointExtras = _extends({}, performanceLogger.getPointExtras(), this._pointExtras);
    };
    _proto.clear = function clear() {
        this._timespans = {};
        this._extras = {};
        this._points = {};
        if (PRINT_TO_CONSOLE) {
            (0, _infoLog.default)('PerformanceLogger.js', 'clear');
        }
    };
    _proto.clearCompleted = function clearCompleted() {
        for(var key in this._timespans){
            var _this__timespans_key;
            if (((_this__timespans_key = this._timespans[key]) == null ? void 0 : _this__timespans_key.totalTime) != null) {
                delete this._timespans[key];
            }
        }
        this._extras = {};
        this._points = {};
        if (PRINT_TO_CONSOLE) {
            (0, _infoLog.default)('PerformanceLogger.js', 'clearCompleted');
        }
    };
    _proto.close = function close() {
        this._closed = true;
    };
    _proto.currentTimestamp = function currentTimestamp() {
        return getCurrentTimestamp();
    };
    _proto.getExtras = function getExtras() {
        return this._extras;
    };
    _proto.getPoints = function getPoints() {
        return this._points;
    };
    _proto.getPointExtras = function getPointExtras() {
        return this._pointExtras;
    };
    _proto.getTimespans = function getTimespans() {
        return this._timespans;
    };
    _proto.hasTimespan = function hasTimespan(key) {
        return !!this._timespans[key];
    };
    _proto.isClosed = function isClosed() {
        return this._closed;
    };
    _proto.logEverything = function logEverything() {
        if (PRINT_TO_CONSOLE) {
            // log timespans
            for(var key in this._timespans){
                var _this__timespans_key;
                if (((_this__timespans_key = this._timespans[key]) == null ? void 0 : _this__timespans_key.totalTime) != null) {
                    (0, _infoLog.default)(key + ': ' + this._timespans[key].totalTime + 'ms');
                }
            }
            // log extras
            (0, _infoLog.default)(this._extras);
            // log points
            for(var key1 in this._points){
                if (this._points[key1] != null) {
                    (0, _infoLog.default)(key1 + ': ' + this._points[key1] + 'ms');
                }
            }
        }
    };
    _proto.markPoint = function markPoint(key, timestamp, extras) {
        if (timestamp === void 0) timestamp = getCurrentTimestamp();
        if (this._closed) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        if (this._points[key] != null) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        this._points[key] = timestamp;
        if (extras) {
            this._pointExtras[key] = extras;
        }
    };
    _proto.removeExtra = function removeExtra(key) {
        var value = this._extras[key];
        delete this._extras[key];
        return value;
    };
    _proto.setExtra = function setExtra(key, value) {
        if (this._closed) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        if (this._extras.hasOwnProperty(key)) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        this._extras[key] = value;
    };
    _proto.startTimespan = function startTimespan(key, timestamp, extras) {
        if (timestamp === void 0) timestamp = getCurrentTimestamp();
        if (this._closed) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        if (this._timespans[key]) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        this._timespans[key] = {
            startTime: timestamp,
            startExtras: extras
        };
        if (PRINT_TO_CONSOLE) {
            (0, _infoLog.default)('PerformanceLogger.js', 'start: ' + key);
        }
    };
    _proto.stopTimespan = function stopTimespan(key, timestamp, extras) {
        if (timestamp === void 0) timestamp = getCurrentTimestamp();
        if (this._closed) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        var timespan = this._timespans[key];
        if (!timespan || timespan.startTime == null) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        if (timespan.endTime != null) {
            if (PRINT_TO_CONSOLE && false) {}
            return;
        }
        timespan.endExtras = extras;
        timespan.endTime = timestamp;
        timespan.totalTime = timespan.endTime - (timespan.startTime || 0);
        if (PRINT_TO_CONSOLE) {
            (0, _infoLog.default)('PerformanceLogger.js', 'end: ' + key);
        }
    };
    return PerformanceLogger;
}();
function createPerformanceLogger() {
    return new PerformanceLogger();
}


}),
"98265": (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
/**
 * Intentional info-level logging for clear separation from ad-hoc console debug logging.
 */ function infoLog() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
        args[_key] = arguments[_key];
    }
    var _console;
    return (_console = console).log.apply(_console, _to_consumable_array(args));
}
module.exports = infoLog;


}),

}]);//# sourceMappingURL=vendors-node_modules_pnpm_react-native_0_76_3__babel_core_7_26_0__babel_preset-env_7_26_0__ba-3f877b.chunk.bundle.map?platform=android