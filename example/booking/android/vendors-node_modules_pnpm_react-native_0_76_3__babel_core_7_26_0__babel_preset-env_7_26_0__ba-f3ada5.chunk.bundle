(self['webpackChunksas_booking'] = self['webpackChunksas_booking'] || []).push([["vendors-node_modules_pnpm_react-native_0_76_3__babel_core_7_26_0__babel_preset-env_7_26_0__ba-f3ada5"], {
"83277": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "unstable_hasComponent", ({
    enumerable: true,
    get: function() {
        return unstable_hasComponent;
    }
}));
var componentNameToExists = new Map();
function unstable_hasComponent(name) {
    var hasNativeComponent = componentNameToExists.get(name);
    if (hasNativeComponent == null) {
        if (__webpack_require__.g.__nativeComponentRegistry__hasComponent) {
            hasNativeComponent = __webpack_require__.g.__nativeComponentRegistry__hasComponent(name);
            componentNameToExists.set(name, hasNativeComponent);
        } else {
            throw "unstable_hasComponent('" + name + "'): Global function is not registered";
        }
    }
    return hasNativeComponent;
}


}),
"62398": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _NativeSourceCode = /*#__PURE__*/ _interop_require_default(_export_star(__webpack_require__(61867), exports));
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var _default = _NativeSourceCode.default;


}),
"20443": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _NativeUIManager = /*#__PURE__*/ _interop_require_default(_export_star(__webpack_require__(12080), exports));
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var _default = _NativeUIManager.default;


}),
"75570": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _NativeDeviceInfo = /*#__PURE__*/ _interop_require_default(_export_star(__webpack_require__(31522), exports));
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var _default = _NativeDeviceInfo.default;


}),
"31522": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(46101));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var NativeModule = _TurboModuleRegistry.getEnforcing('DeviceInfo');
var constants = null;
var NativeDeviceInfo = {
    getConstants: function() {
        if (constants == null) {
            constants = NativeModule.getConstants();
        }
        return constants;
    }
};
var _default = NativeDeviceInfo;


}),
"61867": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(46101));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var NativeModule = _TurboModuleRegistry.getEnforcing('SourceCode');
var constants = null;
var NativeSourceCode = {
    getConstants: function() {
        if (constants == null) {
            constants = NativeModule.getConstants();
        }
        return constants;
    }
};
var _default = NativeSourceCode;


}),
"12080": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(46101));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var _default = _TurboModuleRegistry.getEnforcing('UIManager');


}),
"28074": (function (module) {
"use strict";

function nullthrows(x, message) {
    if (x != null) {
        return x;
    }
    var error = new Error(message !== undefined ? message : 'Got unexpected ' + x);
    error.framesToPop = 1; // Skip nullthrows's own stack frame.
    throw error;
}
module.exports = nullthrows;
module.exports["default"] = nullthrows;
Object.defineProperty(module.exports, "__esModule", ({
    value: true
}));


}),
"99112": (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _Systrace = __webpack_require__(94622);
var _EventEmitter = /*#__PURE__*/ _interop_require_default(__webpack_require__(23742));
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
// FIXME: use typed events
/**
 * Global EventEmitter used by the native platform to emit events to JavaScript.
 * Events are identified by globally unique event names.
 *
 * NativeModules that emit events should instead subclass `NativeEventEmitter`.
 */ var RCTDeviceEventEmitter = /*#__PURE__*/ function(EventEmitter) {
    "use strict";
    _inherits(RCTDeviceEventEmitter, EventEmitter);
    function RCTDeviceEventEmitter() {
        return EventEmitter.apply(this, arguments) || this;
    }
    var _proto = RCTDeviceEventEmitter.prototype;
    // Add systrace to RCTDeviceEventEmitter.emit method for debugging
    _proto.emit = function emit(eventType) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
            args[_key - 1] = arguments[_key];
        }
        var _EventEmitter_prototype_emit;
        (0, _Systrace.beginEvent)(function() {
            return "RCTDeviceEventEmitter.emit#" + eventType;
        });
        (_EventEmitter_prototype_emit = EventEmitter.prototype.emit).call.apply(_EventEmitter_prototype_emit, [
            this,
            eventType
        ].concat(_to_consumable_array(args)));
        (0, _Systrace.endEvent)();
    };
    return RCTDeviceEventEmitter;
}(_EventEmitter.default);
var instance = new RCTDeviceEventEmitter();
Object.defineProperty(__webpack_require__.g, '__rctDeviceEventEmitter', {
    configurable: true,
    value: instance
});
var _default = instance;


}),
"35517": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ 
var PixelRatio = (__webpack_require__(19657)/* ["default"] */["default"]);
var Platform = __webpack_require__(78185);
var pickScale = (__webpack_require__(44852)/* .pickScale */.pickScale);
var _require = __webpack_require__(72665), getAndroidResourceFolderName = _require.getAndroidResourceFolderName, getAndroidResourceIdentifier = _require.getAndroidResourceIdentifier, getBasePath = _require.getBasePath;
var invariant = __webpack_require__(97250);
/**
 * Returns a path like 'assets/AwesomeModule/icon@2x.png'
 */ function getScaledAssetPath(asset) {
    var scale = pickScale(asset.scales, PixelRatio.get());
    var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
    var assetDir = getBasePath(asset);
    return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
}
/**
 * Returns a path like 'drawable-mdpi/icon.png'
 */ function getAssetPathInDrawableFolder(asset) {
    var scale = pickScale(asset.scales, PixelRatio.get());
    var drawableFolder = getAndroidResourceFolderName(asset, scale);
    var fileName = getAndroidResourceIdentifier(asset);
    return drawableFolder + '/' + fileName + '.' + asset.type;
}
var AssetSourceResolver = /*#__PURE__*/ function() {
    function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
        this.serverUrl = serverUrl;
        this.jsbundleUrl = jsbundleUrl;
        this.asset = asset;
    }
    var _proto = AssetSourceResolver.prototype;
    _proto.isLoadedFromServer = function isLoadedFromServer() {
        return !!this.serverUrl;
    };
    _proto.isLoadedFromFileSystem = function isLoadedFromFileSystem() {
        var _this_jsbundleUrl;
        return this.jsbundleUrl != null && ((_this_jsbundleUrl = this.jsbundleUrl) == null ? void 0 : _this_jsbundleUrl.startsWith('file://'));
    };
    _proto.defaultAsset = function defaultAsset() {
        if (this.isLoadedFromServer()) {
            return this.assetServerURL();
        }
        if (this.asset.resolver != null) {
            return this.getAssetUsingResolver(this.asset.resolver);
        }
        if (Platform.OS === 'android') {
            return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
        } else {
            return this.scaledAssetURLNearBundle();
        }
    };
    _proto.getAssetUsingResolver = function getAssetUsingResolver(resolver) {
        switch(resolver){
            case 'android':
                return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
            case 'generic':
                return this.scaledAssetURLNearBundle();
            default:
                throw new Error("Don't know how to get asset via provided resolver: " + resolver + '\nAsset: ' + JSON.stringify(this.asset, null, '\t') + '\nPossible resolvers are:' + JSON.stringify([
                    'android',
                    'generic'
                ], null, '\t'));
        }
    };
    /**
   * Returns an absolute URL which can be used to fetch the asset
   * from the devserver
   */ _proto.assetServerURL = function assetServerURL() {
        invariant(this.serverUrl != null, 'need server to load from');
        return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
    };
    /**
   * Resolves to just the scaled asset filename
   * E.g. 'assets/AwesomeModule/icon@2x.png'
   */ _proto.scaledAssetPath = function scaledAssetPath() {
        return this.fromSource(getScaledAssetPath(this.asset));
    };
    /**
   * Resolves to where the bundle is running from, with a scaled asset filename
   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'
   */ _proto.scaledAssetURLNearBundle = function scaledAssetURLNearBundle() {
        var _this_jsbundleUrl;
        var path = (_this_jsbundleUrl = this.jsbundleUrl) != null ? _this_jsbundleUrl : 'file://';
        return this.fromSource(// Assets can have relative paths outside of the project root.
        // When bundling them we replace `../` with `_` to make sure they
        // don't end up outside of the expected assets directory.
        path + getScaledAssetPath(this.asset).replace(/\.\.\//g, '_'));
    };
    /**
   * The default location of assets bundled with the app, located by
   * resource identifier
   * The Android resource system picks the correct scale.
   * E.g. 'assets_awesomemodule_icon'
   */ _proto.resourceIdentifierWithoutScale = function resourceIdentifierWithoutScale() {
        invariant(Platform.OS === 'android', 'resource identifiers work on Android');
        return this.fromSource(getAndroidResourceIdentifier(this.asset));
    };
    /**
   * If the jsbundle is running from a sideload location, this resolves assets
   * relative to its location
   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'
   */ _proto.drawableFolderInBundle = function drawableFolderInBundle() {
        var _this_jsbundleUrl;
        var path = (_this_jsbundleUrl = this.jsbundleUrl) != null ? _this_jsbundleUrl : 'file://';
        return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
    };
    _proto.fromSource = function fromSource(source) {
        return {
            __packager_asset: true,
            width: this.asset.width,
            height: this.asset.height,
            uri: source,
            scale: pickScale(this.asset.scales, PixelRatio.get())
        };
    };
    return AssetSourceResolver;
}();
AssetSourceResolver.pickScale = pickScale;
module.exports = AssetSourceResolver;


}),
"44852": (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getUrlCacheBreaker: function() {
        return getUrlCacheBreaker;
    },
    pickScale: function() {
        return pickScale;
    },
    setUrlCacheBreaker: function() {
        return setUrlCacheBreaker;
    }
});
var _PixelRatio = /*#__PURE__*/ _interop_require_default(__webpack_require__(19657));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var cacheBreaker;
var warnIfCacheBreakerUnset = true;
function pickScale(scales, deviceScale) {
    var requiredDeviceScale = deviceScale != null ? deviceScale : _PixelRatio.default.get();
    // Packager guarantees that `scales` array is sorted
    for(var i = 0; i < scales.length; i++){
        if (scales[i] >= requiredDeviceScale) {
            return scales[i];
        }
    }
    // If nothing matches, device scale is larger than any available
    // scales, so we return the biggest one. Unless the array is empty,
    // in which case we default to 1
    return scales[scales.length - 1] || 1;
}
function setUrlCacheBreaker(appendage) {
    cacheBreaker = appendage;
}
function getUrlCacheBreaker() {
    if (cacheBreaker == null) {
        if (false) {}
        return '';
    }
    return cacheBreaker;
}


}),
"68420": (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ // Utilities for resolving an asset into a `source` for e.g. `Image`
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _NativeSourceCode = /*#__PURE__*/ _interop_require_default(__webpack_require__(62398));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
var AssetSourceResolver = __webpack_require__(35517);
var pickScale = (__webpack_require__(44852)/* .pickScale */.pickScale);
var AssetRegistry = __webpack_require__(78182);
var _customSourceTransformers = [];
var _serverURL;
var _scriptURL;
var _sourceCodeScriptURL;
function getSourceCodeScriptURL() {
    if (_sourceCodeScriptURL != null) {
        return _sourceCodeScriptURL;
    }
    _sourceCodeScriptURL = _NativeSourceCode.default.getConstants().scriptURL;
    return _sourceCodeScriptURL;
}
function getDevServerURL() {
    if (_serverURL === undefined) {
        var sourceCodeScriptURL = getSourceCodeScriptURL();
        var match = sourceCodeScriptURL == null ? void 0 : sourceCodeScriptURL.match(/^https?:\/\/.*?\//);
        if (match) {
            // jsBundle was loaded from network
            _serverURL = match[0];
        } else {
            // jsBundle was loaded from file
            _serverURL = null;
        }
    }
    return _serverURL;
}
function _coerceLocalScriptURL(scriptURL) {
    var normalizedScriptURL = scriptURL;
    if (normalizedScriptURL != null) {
        if (normalizedScriptURL.startsWith('assets://')) {
            // android: running from within assets, no offline path to use
            return null;
        }
        normalizedScriptURL = normalizedScriptURL.substring(0, normalizedScriptURL.lastIndexOf('/') + 1);
        if (!normalizedScriptURL.includes('://')) {
            // Add file protocol in case we have an absolute file path and not a URL.
            // This shouldn't really be necessary. scriptURL should be a URL.
            normalizedScriptURL = 'file://' + normalizedScriptURL;
        }
    }
    return normalizedScriptURL;
}
function getScriptURL() {
    if (_scriptURL === undefined) {
        _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());
    }
    return _scriptURL;
}
/**
 * `transformer` can optionally be used to apply a custom transformation when
 * resolving an asset source. This methods overrides all other custom transformers
 * that may have been previously registered.
 */ function setCustomSourceTransformer(transformer) {
    _customSourceTransformers = [
        transformer
    ];
}
/**
 * Adds a `transformer` into the chain of custom source transformers, which will
 * be applied in the order registered, until one returns a non-null value.
 */ function addCustomSourceTransformer(transformer) {
    _customSourceTransformers.push(transformer);
}
/**
 * `source` is either a number (opaque type returned by require('./foo.png'))
 * or an `ImageSource` like { uri: '<http location || file path>' }
 */ function resolveAssetSource(source) {
    if (source == null || (typeof source === "undefined" ? "undefined" : _type_of(source)) === 'object') {
        // $FlowFixMe[incompatible-exact] `source` doesn't exactly match `ResolvedAssetSource`
        // $FlowFixMe[incompatible-return] `source` doesn't exactly match `ResolvedAssetSource`
        return source;
    }
    var asset = AssetRegistry.getAssetByID(source);
    if (!asset) {
        return null;
    }
    var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);
    // Apply (chained) custom source transformers, if any
    if (_customSourceTransformers) {
        for(var _i = 0; _i < _customSourceTransformers.length; _i++){
            var customSourceTransformer = _customSourceTransformers[_i];
            var transformedSource = customSourceTransformer(resolver);
            if (transformedSource != null) {
                return transformedSource;
            }
        }
    }
    return resolver.defaultAsset();
}
resolveAssetSource.pickScale = pickScale;
resolveAssetSource.setCustomSourceTransformer = setCustomSourceTransformer;
resolveAssetSource.addCustomSourceTransformer = addCustomSourceTransformer;
module.exports = resolveAssetSource;


}),
"48445": (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _NativeComponentRegistryUnstable = __webpack_require__(83277);
var _defineLazyObjectProperty = /*#__PURE__*/ _interop_require_default(__webpack_require__(97116));
var _Platform = /*#__PURE__*/ _interop_require_default(__webpack_require__(78185));
var _FabricUIManager = __webpack_require__(17318);
var _nullthrows = /*#__PURE__*/ _interop_require_default(__webpack_require__(28074));
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function raiseSoftError(methodName, details) {
    console.error("[ReactNative Architecture][JS] '" + methodName + "' is not available in the new React Native architecture." + (details ? " " + details : ''));
}
var getUIManagerConstants = __webpack_require__.g.RN$LegacyInterop_UIManager_getConstants;
var getUIManagerConstantsCached = function() {
    var wasCalledOnce = false;
    var result = {};
    return function() {
        if (!wasCalledOnce) {
            result = (0, _nullthrows.default)(getUIManagerConstants)();
            wasCalledOnce = true;
        }
        return result;
    };
}();
var getConstantsForViewManager = __webpack_require__.g.RN$LegacyInterop_UIManager_getConstantsForViewManager;
var getDefaultEventTypes = __webpack_require__.g.RN$LegacyInterop_UIManager_getDefaultEventTypes;
var getDefaultEventTypesCached = function() {
    var wasCalledOnce = false;
    var result = null;
    return function() {
        if (!wasCalledOnce) {
            result = (0, _nullthrows.default)(getDefaultEventTypes)();
            wasCalledOnce = true;
        }
        return result;
    };
}();
/**
 * UIManager.js overrides these APIs.
 * Pull them out from the BridgelessUIManager implementation. So, we can ignore them.
 */ var UIManagerJSOverridenAPIs = {
    measure: function(reactTag, callback) {
        raiseSoftError('measure');
    },
    measureInWindow: function(reactTag, callback) {
        raiseSoftError('measureInWindow');
    },
    measureLayout: function(reactTag, ancestorReactTag, errorCallback, callback) {
        raiseSoftError('measureLayout');
    },
    measureLayoutRelativeToParent: function(reactTag, errorCallback, callback) {
        raiseSoftError('measureLayoutRelativeToParent');
    },
    dispatchViewManagerCommand: function(reactTag, commandID, commandArgs) {
        raiseSoftError('dispatchViewManagerCommand');
    }
};
/**
 * Leave Unimplemented: The only thing that called these methods was the paper renderer.
 * In OSS, the New Architecture will just use the Fabric renderer, which uses
 * different APIs.
 */ var UIManagerJSUnusedInNewArchAPIs = {
    createView: function(reactTag, viewName, rootTag, props) {
        raiseSoftError('createView');
    },
    updateView: function(reactTag, viewName, props) {
        raiseSoftError('updateView');
    },
    setChildren: function(containerTag, reactTags) {
        raiseSoftError('setChildren');
    },
    manageChildren: function(containerTag, moveFromIndices, moveToIndices, addChildReactTags, addAtIndices, removeAtIndices) {
        raiseSoftError('manageChildren');
    },
    setJSResponder: function(reactTag, blockNativeResponder) {
        raiseSoftError('setJSResponder');
    },
    clearJSResponder: function() {
        raiseSoftError('clearJSResponder');
    }
};
/**
 * Leave unimplemented: These APIs are deprecated in UIManager. We will eventually remove
 * them from React Native.
 */ var UIManagerJSDeprecatedPlatformAPIs = _Platform.default.select({
    android: {}
});
var UIManagerJSPlatformAPIs = _Platform.default.select({
    android: {
        getConstantsForViewManager: function(viewManagerName) {
            if (getConstantsForViewManager) {
                return getConstantsForViewManager(viewManagerName);
            }
            raiseSoftError('getConstantsForViewManager');
            return {};
        },
        getDefaultEventTypes: function() {
            if (getDefaultEventTypes) {
                return getDefaultEventTypesCached();
            }
            raiseSoftError('getDefaultEventTypes');
            return [];
        },
        setLayoutAnimationEnabledExperimental: function(enabled) {
            /**
       * Layout animations are always enabled in the New Architecture.
       * They cannot be turned off.
       */ if (!enabled) {
                raiseSoftError('setLayoutAnimationEnabledExperimental(false)', 'Layout animations are always enabled in the New Architecture.');
            }
        },
        sendAccessibilityEvent: function(reactTag, eventType) {
            // Keep this in sync with java:FabricUIManager.sendAccessibilityEventFromJS
            // and legacySendAccessibilityEvent.android.js
            var AccessibilityEvent = {
                TYPE_VIEW_FOCUSED: 0x00000008,
                TYPE_WINDOW_STATE_CHANGED: 0x00000020,
                TYPE_VIEW_CLICKED: 0x00000001,
                TYPE_VIEW_HOVER_ENTER: 0x00000080
            };
            var eventName = null;
            if (eventType === AccessibilityEvent.TYPE_VIEW_FOCUSED) {
                eventName = 'focus';
            } else if (eventType === AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {
                eventName = 'windowStateChange';
            } else if (eventType === AccessibilityEvent.TYPE_VIEW_CLICKED) {
                eventName = 'click';
            } else if (eventType === AccessibilityEvent.TYPE_VIEW_HOVER_ENTER) {
                eventName = 'viewHoverEnter';
            } else {
                console.error("sendAccessibilityEvent() dropping event: Called with unsupported eventType: " + eventType);
                return;
            }
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (!shadowNode) {
                console.error("sendAccessibilityEvent() dropping event: Cannot find view with tag #" + reactTag);
                return;
            }
            FabricUIManager.sendAccessibilityEvent(shadowNode, eventName);
        }
    },
    ios: {
        /**
     * TODO(T174674274): Implement lazy loading of legacy view managers in the new architecture.
     *
     * Leave this unimplemented until we implement lazy loading of legacy modules and view managers in the new architecture.
     */ lazilyLoadView: function(name) {
            raiseSoftError('lazilyLoadView');
            return {};
        },
        focus: function(reactTag) {
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (!shadowNode) {
                console.error("focus() noop: Cannot find view with tag #" + reactTag);
                return;
            }
            FabricUIManager.dispatchCommand(shadowNode, 'focus', []);
        },
        blur: function(reactTag) {
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (!shadowNode) {
                console.error("blur() noop: Cannot find view with tag #" + reactTag);
                return;
            }
            FabricUIManager.dispatchCommand(shadowNode, 'blur', []);
        }
    }
});
var UIManagerJS = _extends({}, UIManagerJSOverridenAPIs, UIManagerJSDeprecatedPlatformAPIs, UIManagerJSPlatformAPIs, UIManagerJSUnusedInNewArchAPIs, {
    getViewManagerConfig: function(viewManagerName) {
        if (getUIManagerConstants) {
            var constants = getUIManagerConstantsCached();
            if (!constants[viewManagerName] && UIManagerJS.getConstantsForViewManager) {
                constants[viewManagerName] = UIManagerJS.getConstantsForViewManager(viewManagerName);
            }
            return constants[viewManagerName];
        } else {
            raiseSoftError("getViewManagerConfig('" + viewManagerName + "')", "If '" + viewManagerName + "' has a ViewManager and you want to retrieve its native ViewConfig, please turn on the native ViewConfig interop layer. If you want to see if this component is registered with React Native, please call hasViewManagerConfig('" + viewManagerName + "') instead.");
            return null;
        }
    },
    hasViewManagerConfig: function(viewManagerName) {
        return (0, _NativeComponentRegistryUnstable.unstable_hasComponent)(viewManagerName);
    },
    getConstants: function() {
        if (getUIManagerConstants) {
            return getUIManagerConstantsCached();
        } else {
            raiseSoftError('getConstants');
            return null;
        }
    },
    findSubviewIn: function(reactTag, point, callback) {
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (!shadowNode) {
            console.error("findSubviewIn() noop: Cannot find view with reactTag " + reactTag);
            return;
        }
        FabricUIManager.findNodeAtPoint(shadowNode, point[0], point[1], function(internalInstanceHandle) {
            if (internalInstanceHandle == null) {
                console.error('findSubviewIn(): Cannot find node at point');
                return;
            }
            var instanceHandle = internalInstanceHandle;
            var node = instanceHandle.stateNode.node;
            if (!node) {
                console.error('findSubviewIn(): Cannot find node at point');
                return;
            }
            var nativeViewTag = instanceHandle.stateNode.canonical.nativeTag;
            FabricUIManager.measure(node, function(x, y, width, height, pageX, pageY) {
                callback(nativeViewTag, pageX, pageY, width, height);
            });
        });
    },
    viewIsDescendantOf: function(reactTag, ancestorReactTag, callback) {
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (!shadowNode) {
            console.error("viewIsDescendantOf() noop: Cannot find view with reactTag " + reactTag);
            return;
        }
        var ancestorShadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(ancestorReactTag);
        if (!ancestorShadowNode) {
            console.error("viewIsDescendantOf() noop: Cannot find view with ancestorReactTag " + ancestorReactTag);
            return;
        }
        // Keep this in sync with ReadOnlyNode.js
        var DOCUMENT_POSITION_CONTAINED_BY = 16;
        var result = FabricUIManager.compareDocumentPosition(ancestorShadowNode, shadowNode);
        // eslint-disable-next-line no-bitwise
        var isAncestor = (result & DOCUMENT_POSITION_CONTAINED_BY) !== 0;
        callback([
            isAncestor
        ]);
    },
    configureNextLayoutAnimation: function(config, callback, errorCallback) {
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        FabricUIManager.configureNextLayoutAnimation(config, callback, errorCallback);
    }
});
if (getUIManagerConstants) {
    Object.keys(getUIManagerConstantsCached()).forEach(function(viewConfigName) {
        UIManagerJS[viewConfigName] = getUIManagerConstantsCached()[viewConfigName];
    });
    if (UIManagerJS.getConstants().ViewManagerNames) {
        UIManagerJS.getConstants().ViewManagerNames.forEach(function(viewManagerName) {
            (0, _defineLazyObjectProperty.default)(UIManagerJS, viewManagerName, {
                get: function() {
                    return (0, _nullthrows.default)(UIManagerJS.getConstantsForViewManager)(viewManagerName);
                }
            });
        });
    }
}
module.exports = UIManagerJS;


}),
"17318": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getFabricUIManager", ({
    enumerable: true,
    get: function() {
        return getFabricUIManager;
    }
}));
var _defineLazyObjectProperty = /*#__PURE__*/ _interop_require_default(__webpack_require__(97116));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var nativeFabricUIManagerProxy;
// This is a list of all the methods in global.nativeFabricUIManager that we'll
// cache in JavaScript, as the current implementation of the binding
// creates a new host function every time methods are accessed.
var CACHED_PROPERTIES = [
    'createNode',
    'cloneNode',
    'cloneNodeWithNewChildren',
    'cloneNodeWithNewProps',
    'cloneNodeWithNewChildrenAndProps',
    'createChildSet',
    'appendChild',
    'appendChildToSet',
    'completeRoot',
    'measure',
    'measureInWindow',
    'measureLayout',
    'configureNextLayoutAnimation',
    'sendAccessibilityEvent',
    'findShadowNodeByTag_DEPRECATED',
    'setNativeProps',
    'dispatchCommand',
    'compareDocumentPosition',
    'getBoundingClientRect'
];
function getFabricUIManager() {
    if (nativeFabricUIManagerProxy == null && __webpack_require__.g.nativeFabricUIManager != null) {
        nativeFabricUIManagerProxy = createProxyWithCachedProperties(__webpack_require__.g.nativeFabricUIManager, CACHED_PROPERTIES);
    }
    return nativeFabricUIManagerProxy;
}
/**
 *
 * Returns an object that caches the specified properties the first time they
 * are accessed, and falls back to the original object for other properties.
 */ function createProxyWithCachedProperties(implementation, propertiesToCache) {
    var _loop = function(_i) {
        var propertyName = propertiesToCache[_i];
        (0, _defineLazyObjectProperty.default)(proxy, propertyName, {
            // $FlowExpectedError[prop-missing]
            get: function() {
                return implementation[propertyName];
            }
        });
    };
    var proxy = Object.create(implementation);
    for(var _i = 0; _i < propertiesToCache.length; _i++)_loop(_i);
    return proxy;
}


}),
"63686": (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _NativeUIManager = /*#__PURE__*/ _interop_require_default(__webpack_require__(20443));
var _nullthrows = /*#__PURE__*/ _interop_require_default(__webpack_require__(28074));
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var NativeModules = __webpack_require__(30537);
var defineLazyObjectProperty = __webpack_require__(97116);
var Platform = __webpack_require__(78185);
var UIManagerProperties = __webpack_require__(71600);
var viewManagerConfigs = {};
var triedLoadingConfig = new Set();
var NativeUIManagerConstants = {};
var isNativeUIManagerConstantsSet = false;
function getConstants() {
    if (!isNativeUIManagerConstantsSet) {
        NativeUIManagerConstants = _NativeUIManager.default.getConstants();
        isNativeUIManagerConstantsSet = true;
    }
    return NativeUIManagerConstants;
}
function getViewManagerConfig(viewManagerName) {
    if (viewManagerConfigs[viewManagerName] === undefined && __webpack_require__.g.nativeCallSyncHook && // If we're in the Chrome Debugger, let's not even try calling the sync method
    _NativeUIManager.default.getConstantsForViewManager) {
        try {
            viewManagerConfigs[viewManagerName] = _NativeUIManager.default.getConstantsForViewManager(viewManagerName);
        } catch (e) {
            console.error("NativeUIManager.getConstantsForViewManager('" + viewManagerName + "') threw an exception.", e);
            viewManagerConfigs[viewManagerName] = null;
        }
    }
    var config = viewManagerConfigs[viewManagerName];
    if (config) {
        return config;
    }
    // If we're in the Chrome Debugger, let's not even try calling the sync
    // method.
    if (!__webpack_require__.g.nativeCallSyncHook) {
        return config;
    }
    if (_NativeUIManager.default.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {
        var result = (0, _nullthrows.default)(_NativeUIManager.default.lazilyLoadView)(viewManagerName);
        triedLoadingConfig.add(viewManagerName);
        if (result != null && result.viewConfig != null) {
            getConstants()[viewManagerName] = result.viewConfig;
            lazifyViewManagerConfig(viewManagerName);
        }
    }
    return viewManagerConfigs[viewManagerName];
}
// $FlowFixMe[cannot-spread-interface]
var UIManagerJS = _extends({}, _NativeUIManager.default, {
    createView: function(reactTag, viewName, rootTag, props) {
        if (Platform.OS === 'ios' && viewManagerConfigs[viewName] === undefined) {
            // This is necessary to force the initialization of native viewManager
            // classes in iOS when using static ViewConfigs
            getViewManagerConfig(viewName);
        }
        _NativeUIManager.default.createView(reactTag, viewName, rootTag, props);
    },
    getConstants: function() {
        return getConstants();
    },
    getViewManagerConfig: function(viewManagerName) {
        return getViewManagerConfig(viewManagerName);
    },
    hasViewManagerConfig: function(viewManagerName) {
        return getViewManagerConfig(viewManagerName) != null;
    }
});
// TODO (T45220498): Remove this.
// 3rd party libs may be calling `NativeModules.UIManager.getViewManagerConfig()`
// instead of `UIManager.getViewManagerConfig()` off UIManager.js.
// This is a workaround for now.
// $FlowFixMe[prop-missing]
_NativeUIManager.default.getViewManagerConfig = UIManagerJS.getViewManagerConfig;
function lazifyViewManagerConfig(viewName) {
    var viewConfig = getConstants()[viewName];
    viewManagerConfigs[viewName] = viewConfig;
    if (viewConfig.Manager) {
        defineLazyObjectProperty(viewConfig, 'Constants', {
            get: function() {
                var viewManager = NativeModules[viewConfig.Manager];
                var constants = {};
                viewManager && Object.keys(viewManager).forEach(function(key) {
                    var value = viewManager[key];
                    if (typeof value !== 'function') {
                        constants[key] = value;
                    }
                });
                return constants;
            }
        });
        defineLazyObjectProperty(viewConfig, 'Commands', {
            get: function() {
                var viewManager = NativeModules[viewConfig.Manager];
                var commands = {};
                var index = 0;
                viewManager && Object.keys(viewManager).forEach(function(key) {
                    var value = viewManager[key];
                    if (typeof value === 'function') {
                        commands[key] = index++;
                    }
                });
                return commands;
            }
        });
    }
}
/**
 * Copies the ViewManager constants and commands into UIManager. This is
 * only needed for iOS, which puts the constants in the ViewManager
 * namespace instead of UIManager, unlike Android.
 */ if (Platform.OS === 'ios') {
    Object.keys(getConstants()).forEach(function(viewName) {
        lazifyViewManagerConfig(viewName);
    });
} else if (getConstants().ViewManagerNames) {
    _NativeUIManager.default.getConstants().ViewManagerNames.forEach(function(viewManagerName) {
        defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {
            get: function() {
                return (0, _nullthrows.default)(_NativeUIManager.default.getConstantsForViewManager)(viewManagerName);
            }
        });
    });
}
if (!__webpack_require__.g.nativeCallSyncHook) {
    Object.keys(getConstants()).forEach(function(viewManagerName) {
        if (!UIManagerProperties.includes(viewManagerName)) {
            if (!viewManagerConfigs[viewManagerName]) {
                viewManagerConfigs[viewManagerName] = getConstants()[viewManagerName];
            }
            defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {
                get: function() {
                    console.warn("Accessing view manager configs directly off UIManager via UIManager['" + viewManagerName + "'] " + ("is no longer supported. Use UIManager.getViewManagerConfig('" + viewManagerName + "') instead."));
                    return UIManagerJS.getViewManagerConfig(viewManagerName);
                }
            });
        }
    });
}
module.exports = UIManagerJS;


}),
"59116": (function (module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _FabricUIManager = __webpack_require__(17318);
var _nullthrows = /*#__PURE__*/ _interop_require_default(__webpack_require__(28074));
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function isFabricReactTag(reactTag) {
    // React reserves even numbers for Fabric.
    return reactTag % 2 === 0;
}
var UIManagerImpl = __webpack_require__.g.RN$Bridgeless === true ? __webpack_require__(48445) : __webpack_require__(63686);
// $FlowFixMe[cannot-spread-interface]
var UIManager = _extends({}, UIManagerImpl, {
    measure: function(reactTag, callback) {
        if (isFabricReactTag(reactTag)) {
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (shadowNode) {
                FabricUIManager.measure(shadowNode, callback);
            } else {
                console.warn("measure cannot find view with tag #" + reactTag);
                // $FlowFixMe[incompatible-call]
                callback();
            }
        } else {
            // Paper
            UIManagerImpl.measure(reactTag, callback);
        }
    },
    measureInWindow: function(reactTag, callback) {
        if (isFabricReactTag(reactTag)) {
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (shadowNode) {
                FabricUIManager.measureInWindow(shadowNode, callback);
            } else {
                console.warn("measure cannot find view with tag #" + reactTag);
                // $FlowFixMe[incompatible-call]
                callback();
            }
        } else {
            // Paper
            UIManagerImpl.measureInWindow(reactTag, callback);
        }
    },
    measureLayout: function(reactTag, ancestorReactTag, errorCallback, callback) {
        if (isFabricReactTag(reactTag)) {
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            var ancestorShadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(ancestorReactTag);
            if (!shadowNode || !ancestorShadowNode) {
                return;
            }
            FabricUIManager.measureLayout(shadowNode, ancestorShadowNode, errorCallback, callback);
        } else {
            // Paper
            UIManagerImpl.measureLayout(reactTag, ancestorReactTag, errorCallback, callback);
        }
    },
    measureLayoutRelativeToParent: function(reactTag, errorCallback, callback) {
        if (isFabricReactTag(reactTag)) {
            console.warn('RCTUIManager.measureLayoutRelativeToParent method is deprecated and it will not be implemented in newer versions of RN (Fabric) - T47686450');
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (shadowNode) {
                FabricUIManager.measure(shadowNode, function(left, top, width, height, pageX, pageY) {
                    callback(left, top, width, height);
                });
            }
        } else {
            // Paper
            UIManagerImpl.measureLayoutRelativeToParent(reactTag, errorCallback, callback);
        }
    },
    dispatchViewManagerCommand: function(reactTag, commandName, commandArgs) {
        // Sometimes, libraries directly pass in the output of `findNodeHandle` to
        // this function without checking if it's null. This guards against that
        // case. We throw early here in Javascript so we can get a JS stacktrace
        // instead of a harder-to-debug native Java or Objective-C stacktrace.
        if (typeof reactTag !== 'number') {
            throw new Error('dispatchViewManagerCommand: found null reactTag');
        }
        if (isFabricReactTag(reactTag)) {
            var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
            var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
            if (shadowNode) {
                // Transform the accidental CommandID into a CommandName which is the stringified number.
                // The interop layer knows how to convert this number into the right method name.
                // Stringify a string is a no-op, so it's safe.
                commandName = "" + commandName;
                FabricUIManager.dispatchCommand(shadowNode, commandName, commandArgs);
            }
        } else {
            UIManagerImpl.dispatchViewManagerCommand(reactTag, // We have some legacy components that are actually already using strings. ¯\_(ツ)_/¯
            // $FlowFixMe[incompatible-call]
            commandName, commandArgs);
        }
    }
});
module.exports = UIManager;


}),
"71600": (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ 
/**
 * The list of non-ViewManager related UIManager properties.
 *
 * In an effort to improve startup performance by lazily loading view managers,
 * the interface to access view managers will change from
 * UIManager['viewManagerName'] to UIManager.getViewManagerConfig('viewManagerName').
 * By using a function call instead of a property access, the UIManager will
 * be able to initialize and load the required view manager from native
 * synchronously. All of React Native's core components have been updated to
 * use getViewManagerConfig(). For the next few releases, any usage of
 * UIManager['viewManagerName'] will result in a warning. Because React Native
 * does not support Proxy objects, a view manager access is implied if any of
 * UIManager's properties that are not one of the properties below is being
 * accessed. Once UIManager property accesses for view managers has been fully
 * deprecated, this file will also be removed.
 */ module.exports = [
    'clearJSResponder',
    'configureNextLayoutAnimation',
    'createView',
    'dispatchViewManagerCommand',
    'findSubviewIn',
    'getConstantsForViewManager',
    'getDefaultEventTypes',
    'manageChildren',
    'measure',
    'measureInWindow',
    'measureLayout',
    'measureLayoutRelativeToParent',
    'removeRootView',
    'sendAccessibilityEvent',
    'setChildren',
    'setJSResponder',
    'setLayoutAnimationEnabledExperimental',
    'updateView',
    'viewIsDescendantOf',
    'LazyViewManagersEnabled',
    'ViewManagerNames',
    'StyleConstants',
    'AccessibilityEventTypes',
    'UIView',
    'getViewManagerConfig',
    'hasViewManagerConfig',
    'blur',
    'focus',
    'genericBubblingEventTypes',
    'genericDirectEventTypes',
    'lazilyLoadView'
];


}),
"94604": (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *      
 * @format
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _processBoxShadow = /*#__PURE__*/ _interop_require_default(__webpack_require__(5532));
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
var ReactNativeStyleAttributes = __webpack_require__(1629);
var resolveAssetSource = __webpack_require__(68420);
var processBackgroundImage = (__webpack_require__(90926)/* ["default"] */["default"]);
var processColor = (__webpack_require__(3347)/* ["default"] */["default"]);
var processColorArray = __webpack_require__(87459);
var processFilter = (__webpack_require__(93400)/* ["default"] */["default"]);
var insetsDiffer = __webpack_require__(79872);
var matricesDiffer = __webpack_require__(58839);
var pointsDiffer = __webpack_require__(99180);
var sizesDiffer = __webpack_require__(95967);
var UIManager = __webpack_require__(59116);
var nullthrows = __webpack_require__(28074);
function getNativeComponentAttributes(uiViewClassName) {
    var viewConfig = UIManager.getViewManagerConfig(uiViewClassName);
    if (viewConfig == null) {
        return null;
    }
    // TODO: This seems like a whole lot of runtime initialization for every
    // native component that can be either avoided or simplified.
    var baseModuleName = viewConfig.baseModuleName, bubblingEventTypes = viewConfig.bubblingEventTypes, directEventTypes = viewConfig.directEventTypes;
    var nativeProps = viewConfig.NativeProps;
    bubblingEventTypes = bubblingEventTypes != null ? bubblingEventTypes : {};
    directEventTypes = directEventTypes != null ? directEventTypes : {};
    while(baseModuleName){
        var baseModule = UIManager.getViewManagerConfig(baseModuleName);
        if (!baseModule) {
            baseModuleName = null;
        } else {
            bubblingEventTypes = _extends({}, baseModule.bubblingEventTypes, bubblingEventTypes);
            directEventTypes = _extends({}, baseModule.directEventTypes, directEventTypes);
            nativeProps = _extends({}, baseModule.NativeProps, nativeProps);
            baseModuleName = baseModule.baseModuleName;
        }
    }
    var validAttributes = {};
    for(var key in nativeProps){
        var typeName = nativeProps[key];
        var diff = getDifferForType(typeName);
        var process = getProcessorForType(typeName);
        // If diff or process == null, omit the corresponding property from the Attribute
        // Why:
        //  1. Consistency with AttributeType flow type
        //  2. Consistency with Static View Configs, which omit the null properties
        validAttributes[key] = diff == null ? process == null ? true : {
            process: process
        } : process == null ? {
            diff: diff
        } : {
            diff: diff,
            process: process
        };
    }
    // Unfortunately, the current setup declares style properties as top-level
    // props. This makes it so we allow style properties in the `style` prop.
    // TODO: Move style properties into a `style` prop and disallow them as
    // top-level props on the native side.
    validAttributes.style = ReactNativeStyleAttributes;
    Object.assign(viewConfig, {
        uiViewClassName: uiViewClassName,
        validAttributes: validAttributes,
        bubblingEventTypes: bubblingEventTypes,
        directEventTypes: directEventTypes
    });
    attachDefaultEventTypes(viewConfig);
    return viewConfig;
}
function attachDefaultEventTypes(viewConfig) {
    // This is supported on UIManager platforms (ex: Android),
    // as lazy view managers are not implemented for all platforms.
    // See [UIManager] for details on constants and implementations.
    var constants = UIManager.getConstants();
    if (constants.ViewManagerNames || constants.LazyViewManagersEnabled) {
        // Lazy view managers enabled.
        viewConfig = merge(viewConfig, nullthrows(UIManager.getDefaultEventTypes)());
    } else {
        viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, constants.genericBubblingEventTypes);
        viewConfig.directEventTypes = merge(viewConfig.directEventTypes, constants.genericDirectEventTypes);
    }
}
// TODO: Figure out how to avoid all this runtime initialization cost.
function merge(destination, source) {
    if (!source) {
        return destination;
    }
    if (!destination) {
        return source;
    }
    for(var key in source){
        if (!source.hasOwnProperty(key)) {
            continue;
        }
        var sourceValue = source[key];
        if (destination.hasOwnProperty(key)) {
            var destinationValue = destination[key];
            if ((typeof sourceValue === "undefined" ? "undefined" : _type_of(sourceValue)) === 'object' && (typeof destinationValue === "undefined" ? "undefined" : _type_of(destinationValue)) === 'object') {
                sourceValue = merge(destinationValue, sourceValue);
            }
        }
        destination[key] = sourceValue;
    }
    return destination;
}
function getDifferForType(typeName) {
    switch(typeName){
        // iOS Types
        case 'CATransform3D':
            return matricesDiffer;
        case 'CGPoint':
            return pointsDiffer;
        case 'CGSize':
            return sizesDiffer;
        case 'UIEdgeInsets':
            return insetsDiffer;
        // Android Types
        case 'Point':
            return pointsDiffer;
        case 'EdgeInsets':
            return insetsDiffer;
    }
    return null;
}
function getProcessorForType(typeName) {
    switch(typeName){
        // iOS Types
        case 'CGColor':
        case 'UIColor':
            return processColor;
        case 'CGColorArray':
        case 'UIColorArray':
            return processColorArray;
        case 'CGImage':
        case 'UIImage':
        case 'RCTImageSource':
            return resolveAssetSource;
        case 'BoxShadowArray':
            return _processBoxShadow.default;
        case 'FilterArray':
            return processFilter;
        // Android Types
        case 'Color':
            return processColor;
        case 'ColorArray':
            return processColorArray;
        case 'Filter':
            return processFilter;
        case 'BackgroundImage':
            return processBackgroundImage;
        case 'ImageSource':
            return resolveAssetSource;
        case 'BoxShadow':
            return _processBoxShadow.default;
    }
    return null;
}
module.exports = getNativeComponentAttributes;


}),
"53750": (function () {
// Empty module as a target for NormalModuleReplacementPlugin.
//# sourceMappingURL=EmptyModule.js.map


}),
"87459": (function (module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _processColor = /*#__PURE__*/ _interop_require_default(__webpack_require__(3347));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var TRANSPARENT = 0; // rgba(0, 0, 0, 0)
function processColorArray(colors) {
    return colors == null ? null : colors.map(processColorElement);
}
function processColorElement(color) {
    var value = (0, _processColor.default)(color);
    // For invalid colors, fallback to transparent.
    if (value == null) {
        console.error('Invalid value in color array:', color);
        return TRANSPARENT;
    }
    return value;
}
module.exports = processColorArray;


}),
"9083": (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _RCTDeviceEventEmitter = /*#__PURE__*/ _interop_require_default(__webpack_require__(99112));
var _EventEmitter = /*#__PURE__*/ _interop_require_default(__webpack_require__(23742));
var _NativeDeviceInfo = /*#__PURE__*/ _interop_require_default(__webpack_require__(75570));
var _invariant = /*#__PURE__*/ _interop_require_default(__webpack_require__(97250));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var eventEmitter = new _EventEmitter.default();
var dimensionsInitialized = false;
var dimensions;
var Dimensions = /*#__PURE__*/ function() {
    "use strict";
    function Dimensions() {}
    /**
   * NOTE: `useWindowDimensions` is the preferred API for React components.
   *
   * Initial dimensions are set before `runApplication` is called so they should
   * be available before any other require's are run, but may be updated later.
   *
   * Note: Although dimensions are available immediately, they may change (e.g
   * due to device rotation) so any rendering logic or styles that depend on
   * these constants should try to call this function on every render, rather
   * than caching the value (for example, using inline styles rather than
   * setting a value in a `StyleSheet`).
   *
   * Example: `const {height, width} = Dimensions.get('window');`
   *
   * @param {string} dim Name of dimension as defined when calling `set`.
   * @returns {DisplayMetrics? | DisplayMetricsAndroid?} Value for the dimension.
   */ Dimensions.get = function get(dim) {
        // $FlowFixMe[invalid-computed-prop]
        (0, _invariant.default)(dimensions[dim], 'No dimension set for key ' + dim);
        return dimensions[dim];
    };
    /**
   * This should only be called from native code by sending the
   * didUpdateDimensions event.
   *
   * @param {DimensionsPayload} dims Simple string-keyed object of dimensions to set
   */ Dimensions.set = function set(dims) {
        // We calculate the window dimensions in JS so that we don't encounter loss of
        // precision in transferring the dimensions (which could be non-integers) over
        // the bridge.
        var screen = dims.screen, window = dims.window;
        var windowPhysicalPixels = dims.windowPhysicalPixels;
        if (windowPhysicalPixels) {
            window = {
                width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
                height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
                scale: windowPhysicalPixels.scale,
                fontScale: windowPhysicalPixels.fontScale
            };
        }
        var screenPhysicalPixels = dims.screenPhysicalPixels;
        if (screenPhysicalPixels) {
            screen = {
                width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
                height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
                scale: screenPhysicalPixels.scale,
                fontScale: screenPhysicalPixels.fontScale
            };
        } else if (screen == null) {
            screen = window;
        }
        dimensions = {
            window: window,
            screen: screen
        };
        if (dimensionsInitialized) {
            // Don't fire 'change' the first time the dimensions are set.
            eventEmitter.emit('change', dimensions);
        } else {
            dimensionsInitialized = true;
        }
    };
    /**
   * Add an event handler. Supported events:
   *
   * - `change`: Fires when a property within the `Dimensions` object changes. The argument
   *   to the event handler is an object with `window` and `screen` properties whose values
   *   are the same as the return values of `Dimensions.get('window')` and
   *   `Dimensions.get('screen')`, respectively.
   */ Dimensions.addEventListener = function addEventListener(type, handler) {
        (0, _invariant.default)(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
        return eventEmitter.addListener(type, handler);
    };
    return Dimensions;
}();
// Subscribe before calling getConstants to make sure we don't miss any updates in between.
_RCTDeviceEventEmitter.default.addListener('didUpdateDimensions', function(update) {
    Dimensions.set(update);
});
Dimensions.set(_NativeDeviceInfo.default.getConstants().Dimensions);
var _default = Dimensions;


}),
"19657": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict-local
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var Dimensions = (__webpack_require__(9083)/* ["default"] */["default"]);
/**
 * PixelRatio class gives access to the device pixel density.
 *
 * ## Fetching a correctly sized image
 *
 * You should get a higher resolution image if you are on a high pixel density
 * device. A good rule of thumb is to multiply the size of the image you display
 * by the pixel ratio.
 *
 * ```
 * var image = getImage({
 *   width: PixelRatio.getPixelSizeForLayoutSize(200),
 *   height: PixelRatio.getPixelSizeForLayoutSize(100),
 * });
 * <Image source={image} style={{width: 200, height: 100}} />
 * ```
 *
 * ## Pixel grid snapping
 *
 * In iOS, you can specify positions and dimensions for elements with arbitrary
 * precision, for example 29.674825. But, ultimately the physical display only
 * have a fixed number of pixels, for example 640×960 for iPhone 4 or 750×1334
 * for iPhone 6. iOS tries to be as faithful as possible to the user value by
 * spreading one original pixel into multiple ones to trick the eye. The
 * downside of this technique is that it makes the resulting element look
 * blurry.
 *
 * In practice, we found out that developers do not want this feature and they
 * have to work around it by doing manual rounding in order to avoid having
 * blurry elements. In React Native, we are rounding all the pixels
 * automatically.
 *
 * We have to be careful when to do this rounding. You never want to work with
 * rounded and unrounded values at the same time as you're going to accumulate
 * rounding errors. Having even one rounding error is deadly because a one
 * pixel border may vanish or be twice as big.
 *
 * In React Native, everything in JavaScript and within the layout engine works
 * with arbitrary precision numbers. It's only when we set the position and
 * dimensions of the native element on the main thread that we round. Also,
 * rounding is done relative to the root rather than the parent, again to avoid
 * accumulating rounding errors.
 *
 */ var PixelRatio = /*#__PURE__*/ function() {
    function PixelRatio() {}
    /**
   * Returns the device pixel density. Some examples:
   *
   *   - PixelRatio.get() === 1
   *     - mdpi Android devices (160 dpi)
   *   - PixelRatio.get() === 1.5
   *     - hdpi Android devices (240 dpi)
   *   - PixelRatio.get() === 2
   *     - iPhone 4, 4S
   *     - iPhone 5, 5c, 5s
   *     - iPhone 6
   *     - iPhone 7
   *     - iPhone 8
   *     - iPhone SE
   *     - xhdpi Android devices (320 dpi)
   *   - PixelRatio.get() === 3
   *     - iPhone 6 Plus
   *     - iPhone 7 Plus
   *     - iPhone 8 Plus
   *     - iPhone X
   *     - xxhdpi Android devices (480 dpi)
   *   - PixelRatio.get() === 3.5
   *     - Nexus 6
   */ PixelRatio.get = function get() {
        return Dimensions.get('window').scale;
    };
    /**
   * Returns the scaling factor for font sizes. This is the ratio that is used to calculate the
   * absolute font size, so any elements that heavily depend on that should use this to do
   * calculations.
   *
   * If a font scale is not set, this returns the device pixel ratio.
   *
   * This reflects the user preference set in:
   *  - Settings > Display > Font size on Android,
   *  - Settings > Display & Brightness > Text Size on iOS.
   */ PixelRatio.getFontScale = function getFontScale() {
        return Dimensions.get('window').fontScale || PixelRatio.get();
    };
    /**
   * Converts a layout size (dp) to pixel size (px).
   *
   * Guaranteed to return an integer number.
   */ PixelRatio.getPixelSizeForLayoutSize = function getPixelSizeForLayoutSize(layoutSize) {
        return Math.round(layoutSize * PixelRatio.get());
    };
    /**
   * Rounds a layout size (dp) to the nearest layout size that corresponds to
   * an integer number of pixels. For example, on a device with a PixelRatio
   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to
   * exactly (8.33 * 3) = 25 pixels.
   */ PixelRatio.roundToNearestPixel = function roundToNearestPixel(layoutSize) {
        var ratio = PixelRatio.get();
        return Math.round(layoutSize * ratio) / ratio;
    };
    // No-op for iOS, but used on the web. Should not be documented.
    PixelRatio.startDetecting = function startDetecting() {};
    return PixelRatio;
}();
var _default = PixelRatio;


}),
"79872": (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
var dummyInsets = {
    top: undefined,
    left: undefined,
    right: undefined,
    bottom: undefined
};
var insetsDiffer = function insetsDiffer(one, two) {
    one = one || dummyInsets;
    two = two || dummyInsets;
    return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
};
module.exports = insetsDiffer;


}),
"58839": (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *       strict
 */ 
/**
 * Unrolls an array comparison specially for matrices. Prioritizes
 * checking of indices that are most likely to change so that the comparison
 * bails as early as possible.
 *
 * @param {MatrixMath.Matrix} one First matrix.
 * @param {MatrixMath.Matrix} two Second matrix.
 * @return {boolean} Whether or not the two matrices differ.
 */ var matricesDiffer = function matricesDiffer(one, two) {
    if (one === two) {
        return false;
    }
    return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[0] !== two[0] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
};
module.exports = matricesDiffer;


}),
"99180": (function (module) {
"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 *      
 */ 
var dummyPoint = {
    x: undefined,
    y: undefined
};
var pointsDiffer = function pointsDiffer(one, two) {
    one = one || dummyPoint;
    two = two || dummyPoint;
    return one !== two && (one.x !== two.x || one.y !== two.y);
};
module.exports = pointsDiffer;


}),
"23742": (function (__unused_webpack_module, exports) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */ /**
 * EventEmitter manages listeners and publishes events to them.
 *
 * EventEmitter accepts a single type parameter that defines the valid events
 * and associated listener argument(s).
 *
 * @example
 *
 *   const emitter = new EventEmitter<{
 *     success: [number, string],
 *     error: [Error],
 *   }>();
 *
 *   emitter.on('success', (statusCode, responseText) => {...});
 *   emitter.emit('success', 200, '...');
 *
 *   emitter.on('error', error => {...});
 *   emitter.emit('error', new Error('Resource not found'));
 *
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return EventEmitter;
    }
}));
function _class_private_field_loose_base(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
        throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
}
var id = 0;
function _class_private_field_loose_key(name) {
    return "__private_" + id++ + "_" + name;
}
var // $FlowFixMe[incompatible-type]
_registry = /*#__PURE__*/ _class_private_field_loose_key("_registry");
var EventEmitter = /*#__PURE__*/ function() {
    "use strict";
    function EventEmitter() {
        Object.defineProperty(this, _registry, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base(this, _registry)[_registry] = {};
    }
    var _proto = EventEmitter.prototype;
    /**
   * Registers a listener that is called when the supplied event is emitted.
   * Returns a subscription that has a `remove` method to undo registration.
   */ _proto.addListener = function addListener(eventType, listener, context) {
        if (typeof listener !== 'function') {
            throw new TypeError('EventEmitter.addListener(...): 2nd argument must be a function.');
        }
        var registrations = allocate(_class_private_field_loose_base(this, _registry)[_registry], eventType);
        var registration = {
            context: context,
            listener: listener,
            remove: function() {
                registrations["delete"](registration);
            }
        };
        registrations.add(registration);
        return registration;
    };
    /**
   * Emits the supplied event. Additional arguments supplied to `emit` will be
   * passed through to each of the registered listeners.
   *
   * If a listener modifies the listeners registered for the same event, those
   * changes will not be reflected in the current invocation of `emit`.
   */ _proto.emit = function emit(eventType) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
            args[_key - 1] = arguments[_key];
        }
        var registrations = _class_private_field_loose_base(this, _registry)[_registry][eventType];
        if (registrations != null) {
            // Copy `registrations` to take a snapshot when we invoke `emit`, in case
            // registrations are added or removed when listeners are invoked.
            for(var _i = 0, _Array_from = Array.from(registrations); _i < _Array_from.length; _i++){
                var registration = _Array_from[_i];
                // $FlowFixMe[incompatible-call]
                registration.listener.apply(registration.context, args);
            }
        }
    };
    /**
   * Removes all registered listeners.
   */ _proto.removeAllListeners = function removeAllListeners(eventType) {
        if (eventType == null) {
            // $FlowFixMe[incompatible-type]
            _class_private_field_loose_base(this, _registry)[_registry] = {};
        } else {
            delete _class_private_field_loose_base(this, _registry)[_registry][eventType];
        }
    };
    /**
   * Returns the number of registered listeners for the supplied event.
   */ _proto.listenerCount = function listenerCount(eventType) {
        var registrations = _class_private_field_loose_base(this, _registry)[_registry][eventType];
        return registrations == null ? 0 : registrations.size;
    };
    return EventEmitter;
}();
function allocate(registry, eventType) {
    var registrations = registry[eventType];
    if (registrations == null) {
        registrations = new Set();
        registry[eventType] = registrations;
    }
    return registrations;
}


}),

}]);//# sourceMappingURL=vendors-node_modules_pnpm_react-native_0_76_3__babel_core_7_26_0__babel_preset-env_7_26_0__ba-f3ada5.chunk.bundle.map?platform=android