(self['webpackChunksas_shopping'] = self['webpackChunksas_shopping'] || []).push([["vendors-node_modules_pnpm_react-native-screens_4_2_0_react-native_0_76_3__babel_core_7_26_0__-15455b"], {
"97025": (function (module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _to_consumable_array = __webpack_require__(2670);
var DEV = "production" !== "production";
var warnings = new Set();
function warnOnce(condition) {
    for(var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        rest[_key - 1] = arguments[_key];
    }
    if (DEV && condition) {
        var _console;
        var key = rest.join(" ");
        if (warnings.has(key)) {
            return;
        }
        warnings.add(key);
        (_console = console).warn.apply(_console, _to_consumable_array._(rest));
    }
}
module.exports = warnOnce;


}),
"56337": (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var NativeComponentRegistry = __webpack_require__(49987);
var nativeComponentName = 'RNSFullWindowOverlay';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSFullWindowOverlay',
    validAttributes: {}
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});


}),
"70188": (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var NativeComponentRegistry = __webpack_require__(49987);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(133)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var nativeComponentName = 'RNSModalScreen';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSModalScreen',
    directEventTypes: {
        topAppear: {
            registrationName: 'onAppear'
        },
        topDisappear: {
            registrationName: 'onDisappear'
        },
        topDismissed: {
            registrationName: 'onDismissed'
        },
        topNativeDismissCancelled: {
            registrationName: 'onNativeDismissCancelled'
        },
        topWillAppear: {
            registrationName: 'onWillAppear'
        },
        topWillDisappear: {
            registrationName: 'onWillDisappear'
        },
        topHeaderHeightChange: {
            registrationName: 'onHeaderHeightChange'
        },
        topTransitionProgress: {
            registrationName: 'onTransitionProgress'
        },
        topGestureCancel: {
            registrationName: 'onGestureCancel'
        },
        topHeaderBackButtonClicked: {
            registrationName: 'onHeaderBackButtonClicked'
        },
        topSheetDetentChanged: {
            registrationName: 'onSheetDetentChanged'
        }
    },
    validAttributes: _extends._({
        sheetAllowedDetents: true,
        sheetLargestUndimmedDetent: true,
        sheetGrabberVisible: true,
        sheetCornerRadius: true,
        sheetExpandsWhenScrolledToEdge: true,
        sheetInitialDetent: true,
        sheetElevation: true,
        customAnimationOnSwipe: true,
        fullScreenSwipeEnabled: true,
        fullScreenSwipeShadowEnabled: true,
        homeIndicatorHidden: true,
        preventNativeDismiss: true,
        gestureEnabled: true,
        statusBarColor: {
            process: (__webpack_require__(40133)/* ["default"] */["default"])
        },
        statusBarHidden: true,
        screenOrientation: true,
        statusBarAnimation: true,
        statusBarStyle: true,
        statusBarTranslucent: true,
        gestureResponseDistance: true,
        stackPresentation: true,
        stackAnimation: true,
        transitionDuration: true,
        replaceAnimation: true,
        swipeDirection: true,
        hideKeyboardOnSwipe: true,
        activityState: true,
        navigationBarColor: {
            process: (__webpack_require__(40133)/* ["default"] */["default"])
        },
        navigationBarTranslucent: true,
        navigationBarHidden: true,
        nativeBackButtonDismissalEnabled: true
    }, ConditionallyIgnoredEventHandlers({
        onAppear: true,
        onDisappear: true,
        onDismissed: true,
        onNativeDismissCancelled: true,
        onWillAppear: true,
        onWillDisappear: true,
        onHeaderHeightChange: true,
        onTransitionProgress: true,
        onGestureCancel: true,
        onHeaderBackButtonClicked: true,
        onSheetDetentChanged: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});


}),
"7085": (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _reactnative = __webpack_require__(44963);
var _default = _reactnative.TurboModuleRegistry.get('RNSModule');


}),
"17564": (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var NativeComponentRegistry = __webpack_require__(49987);
var nativeComponentName = 'RNSScreenContainer';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenContainer',
    validAttributes: {}
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});


}),
"36001": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var NativeComponentRegistry = __webpack_require__(49987);
var nativeComponentName = 'RNSScreenContentWrapper';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenContentWrapper',
    validAttributes: {}
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});


}),
"66578": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var NativeComponentRegistry = __webpack_require__(49987);
var nativeComponentName = 'RNSScreenFooter';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenFooter',
    validAttributes: {}
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});


}),
"68176": (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var NativeComponentRegistry = __webpack_require__(49987);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(133)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var nativeComponentName = 'RNSScreen';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreen',
    directEventTypes: {
        topAppear: {
            registrationName: 'onAppear'
        },
        topDisappear: {
            registrationName: 'onDisappear'
        },
        topDismissed: {
            registrationName: 'onDismissed'
        },
        topNativeDismissCancelled: {
            registrationName: 'onNativeDismissCancelled'
        },
        topWillAppear: {
            registrationName: 'onWillAppear'
        },
        topWillDisappear: {
            registrationName: 'onWillDisappear'
        },
        topHeaderHeightChange: {
            registrationName: 'onHeaderHeightChange'
        },
        topTransitionProgress: {
            registrationName: 'onTransitionProgress'
        },
        topGestureCancel: {
            registrationName: 'onGestureCancel'
        },
        topHeaderBackButtonClicked: {
            registrationName: 'onHeaderBackButtonClicked'
        },
        topSheetDetentChanged: {
            registrationName: 'onSheetDetentChanged'
        }
    },
    validAttributes: _extends._({
        sheetAllowedDetents: true,
        sheetLargestUndimmedDetent: true,
        sheetGrabberVisible: true,
        sheetCornerRadius: true,
        sheetExpandsWhenScrolledToEdge: true,
        sheetInitialDetent: true,
        sheetElevation: true,
        customAnimationOnSwipe: true,
        fullScreenSwipeEnabled: true,
        fullScreenSwipeShadowEnabled: true,
        homeIndicatorHidden: true,
        preventNativeDismiss: true,
        gestureEnabled: true,
        statusBarColor: {
            process: (__webpack_require__(40133)/* ["default"] */["default"])
        },
        statusBarHidden: true,
        screenOrientation: true,
        statusBarAnimation: true,
        statusBarStyle: true,
        statusBarTranslucent: true,
        gestureResponseDistance: true,
        stackPresentation: true,
        stackAnimation: true,
        transitionDuration: true,
        replaceAnimation: true,
        swipeDirection: true,
        hideKeyboardOnSwipe: true,
        activityState: true,
        navigationBarColor: {
            process: (__webpack_require__(40133)/* ["default"] */["default"])
        },
        navigationBarTranslucent: true,
        navigationBarHidden: true,
        nativeBackButtonDismissalEnabled: true
    }, ConditionallyIgnoredEventHandlers({
        onAppear: true,
        onDisappear: true,
        onDismissed: true,
        onNativeDismissCancelled: true,
        onWillAppear: true,
        onWillDisappear: true,
        onHeaderHeightChange: true,
        onTransitionProgress: true,
        onGestureCancel: true,
        onHeaderBackButtonClicked: true,
        onSheetDetentChanged: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});


}),
"6606": (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var NativeComponentRegistry = __webpack_require__(49987);
var nativeComponentName = 'RNSScreenNavigationContainer';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenNavigationContainer',
    validAttributes: {}
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});


}),
"61541": (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var NativeComponentRegistry = __webpack_require__(49987);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(133)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var nativeComponentName = 'RNSScreenStackHeaderConfig';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenStackHeaderConfig',
    directEventTypes: {
        topAttached: {
            registrationName: 'onAttached'
        },
        topDetached: {
            registrationName: 'onDetached'
        }
    },
    validAttributes: _extends._({
        backgroundColor: {
            process: (__webpack_require__(40133)/* ["default"] */["default"])
        },
        backTitle: true,
        backTitleFontFamily: true,
        backTitleFontSize: true,
        backTitleVisible: true,
        color: {
            process: (__webpack_require__(40133)/* ["default"] */["default"])
        },
        direction: true,
        hidden: true,
        hideShadow: true,
        largeTitle: true,
        largeTitleFontFamily: true,
        largeTitleFontSize: true,
        largeTitleFontWeight: true,
        largeTitleBackgroundColor: {
            process: (__webpack_require__(40133)/* ["default"] */["default"])
        },
        largeTitleHideShadow: true,
        largeTitleColor: {
            process: (__webpack_require__(40133)/* ["default"] */["default"])
        },
        translucent: true,
        title: true,
        titleFontFamily: true,
        titleFontSize: true,
        titleFontWeight: true,
        titleColor: {
            process: (__webpack_require__(40133)/* ["default"] */["default"])
        },
        disableBackButtonMenu: true,
        backButtonDisplayMode: true,
        hideBackButton: true,
        backButtonInCustomView: true,
        blurEffect: true,
        topInsetEnabled: true
    }, ConditionallyIgnoredEventHandlers({
        onAttached: true,
        onDetached: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});


}),
"66233": (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var NativeComponentRegistry = __webpack_require__(49987);
var nativeComponentName = 'RNSScreenStackHeaderSubview';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenStackHeaderSubview',
    validAttributes: {
        type: true
    }
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});


}),
"33930": (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var NativeComponentRegistry = __webpack_require__(49987);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(133)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var nativeComponentName = 'RNSScreenStack';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSScreenStack',
    directEventTypes: {
        topFinishTransitioning: {
            registrationName: 'onFinishTransitioning'
        }
    },
    validAttributes: _extends._({}, ConditionallyIgnoredEventHandlers({
        onFinishTransitioning: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});


}),
"71802": (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Commands: function() {
        return Commands;
    },
    __INTERNAL_VIEW_CONFIG: function() {
        return __INTERNAL_VIEW_CONFIG;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var NativeComponentRegistry = __webpack_require__(49987);
var ConditionallyIgnoredEventHandlers = (__webpack_require__(133)/* .ConditionallyIgnoredEventHandlers */.ConditionallyIgnoredEventHandlers);
var dispatchCommand = (__webpack_require__(42656)/* .dispatchCommand */.dispatchCommand);
var nativeComponentName = 'RNSSearchBar';
var __INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RNSSearchBar',
    directEventTypes: {
        topSearchFocus: {
            registrationName: 'onSearchFocus'
        },
        topSearchBlur: {
            registrationName: 'onSearchBlur'
        },
        topSearchButtonPress: {
            registrationName: 'onSearchButtonPress'
        },
        topCancelButtonPress: {
            registrationName: 'onCancelButtonPress'
        },
        topChangeText: {
            registrationName: 'onChangeText'
        },
        topClose: {
            registrationName: 'onClose'
        },
        topOpen: {
            registrationName: 'onOpen'
        }
    },
    validAttributes: _extends._({
        hideWhenScrolling: true,
        autoCapitalize: true,
        placeholder: true,
        placement: true,
        obscureBackground: true,
        hideNavigationBar: true,
        cancelButtonText: true,
        barTintColor: {
            process: (__webpack_require__(40133)/* ["default"] */["default"])
        },
        tintColor: {
            process: (__webpack_require__(40133)/* ["default"] */["default"])
        },
        textColor: {
            process: (__webpack_require__(40133)/* ["default"] */["default"])
        },
        disableBackButtonOverride: true,
        inputType: true,
        hintTextColor: {
            process: (__webpack_require__(40133)/* ["default"] */["default"])
        },
        headerIconColor: {
            process: (__webpack_require__(40133)/* ["default"] */["default"])
        },
        shouldShowHintSearchIcon: true
    }, ConditionallyIgnoredEventHandlers({
        onSearchFocus: true,
        onSearchBlur: true,
        onSearchButtonPress: true,
        onCancelButtonPress: true,
        onChangeText: true,
        onClose: true,
        onOpen: true
    }))
};
var _default = NativeComponentRegistry.get(nativeComponentName, function() {
    return __INTERNAL_VIEW_CONFIG;
});
var Commands = {
    blur: function(ref) {
        dispatchCommand(ref, "blur", []);
    },
    focus: function(ref) {
        dispatchCommand(ref, "focus", []);
    },
    clearText: function(ref) {
        dispatchCommand(ref, "clearText", []);
    },
    toggleCancelButton: function(ref, flag) {
        dispatchCommand(ref, "toggleCancelButton", [
            flag
        ]);
    },
    setText: function(ref, text) {
        dispatchCommand(ref, "setText", [
            text
        ]);
    },
    cancelSearch: function(ref) {
        dispatchCommand(ref, "cancelSearch", []);
    }
};


}),
"5804": (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    enableFreeze: function() {
        return enableFreeze;
    },
    enableScreens: function() {
        return enableScreens;
    },
    freezeEnabled: function() {
        return freezeEnabled;
    },
    isNativePlatformSupported: function() {
        return isNativePlatformSupported;
    },
    screensEnabled: function() {
        return screensEnabled;
    }
});
var _reactnative = __webpack_require__(44963);
var isNativePlatformSupported = _reactnative.Platform.OS === 'ios' || _reactnative.Platform.OS === 'android' || _reactnative.Platform.OS === 'windows';
var ENABLE_SCREENS = isNativePlatformSupported;
function enableScreens(shouldEnableScreens) {
    if (shouldEnableScreens === void 0) shouldEnableScreens = true;
    ENABLE_SCREENS = shouldEnableScreens;
    if (!isNativePlatformSupported) {
        return;
    }
    if (ENABLE_SCREENS && !_reactnative.UIManager.getViewManagerConfig('RNSScreen')) {
        console.error("Screen native module hasn't been linked. Please check the react-native-screens README for more details");
    }
}
var ENABLE_FREEZE = false;
function enableFreeze(shouldEnableReactFreeze) {
    if (shouldEnableReactFreeze === void 0) shouldEnableReactFreeze = true;
    if (!isNativePlatformSupported) {
        return;
    }
    ENABLE_FREEZE = shouldEnableReactFreeze;
}
function screensEnabled() {
    return ENABLE_SCREENS;
}
function freezeEnabled() {
    return ENABLE_FREEZE;
}


}),
"10111": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    compatibilityFlags: function() {
        return compatibilityFlags;
    },
    executeNativeBackPress: function() {
        return executeNativeBackPress;
    },
    isSearchBarAvailableForCurrentPlatform: function() {
        return isSearchBarAvailableForCurrentPlatform;
    }
});
var _reactnative = __webpack_require__(44963);
var isSearchBarAvailableForCurrentPlatform = [
    'ios',
    'android'
].includes(_reactnative.Platform.OS);
function executeNativeBackPress() {
    // This function invokes the native back press event
    _reactnative.BackHandler.exitApp();
    return true;
}
var compatibilityFlags = {
    /**
   * Because of a bug introduced in https://github.com/software-mansion/react-native-screens/pull/1646
   * react-native-screens v3.21 changed how header's backTitle handles whitespace strings in https://github.com/software-mansion/react-native-screens/pull/1726
   * To allow for backwards compatibility in @react-navigation/native-stack we need a way to check if this version or newer is used.
   * See https://github.com/react-navigation/react-navigation/pull/11423 for more context.
   */ isNewBackTitleImplementation: true,
    /**
   * With version 4.0.0 the header implementation has been changed. To allow for backward compat
   * with native-stack@v6 we want to expose a way to check whether the new implementation
   * is in use or not.
   *
   * See:
   * * https://github.com/software-mansion/react-native-screens/pull/2325
   * * https://github.com/react-navigation/react-navigation/pull/12125
   */ usesHeaderFlexboxImplementation: true
};


}),
"9861": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "Freeze", ({
    enumerable: true,
    get: function() {
        return Freeze;
    }
}));
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
function Suspender(param) {
    var freeze = param.freeze, children = param.children;
    var promiseCache = (0, _react.useRef)({}).current;
    if (freeze && !promiseCache.promise) {
        promiseCache.promise = new Promise(function(resolve) {
            promiseCache.resolve = resolve;
        });
        throw promiseCache.promise;
    } else if (freeze) {
        throw promiseCache.promise;
    } else if (promiseCache.promise) {
        promiseCache.resolve();
        promiseCache.promise = undefined;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Fragment, {
        children: children
    });
}
function Freeze(param) {
    var freeze = param.freeze, children = param.children, _param_placeholder = param.placeholder, placeholder = _param_placeholder === void 0 ? null : _param_placeholder;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Suspense, {
        fallback: placeholder,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Suspender, {
            freeze: freeze,
            children: children
        })
    });
}


}),
"63915": (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(3557);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _default = /*#__PURE__*/ _react.createContext(undefined);


}),
"53881": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _AppContainer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84161));
var _ScreenContentWrapper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(61600));
/**
 * This view must *not* be flattened.
 * See https://github.com/software-mansion/react-native-screens/pull/1825
 * for detailed explanation.
 */ var DebugContainer = function(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScreenContentWrapper.default, _extends._({}, props));
};
if (false) {}
var _default = DebugContainer;


}),
"61914": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _FullWindowOverlayNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(56337));
var NativeFullWindowOverlay = _FullWindowOverlayNativeComponent.default;
function FullWindowOverlay(props) {
    var _useWindowDimensions = (0, _reactnative.useWindowDimensions)(), width = _useWindowDimensions.width, height = _useWindowDimensions.height;
    if (_reactnative.Platform.OS !== 'ios') {
        console.warn('Using FullWindowOverlay is only valid on iOS devices.');
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _extends._({}, props));
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(NativeFullWindowOverlay, {
        style: [
            _reactnative.StyleSheet.absoluteFill,
            {
                width: width,
                height: height
            }
        ],
        children: props.children
    });
}
var _default = FullWindowOverlay;


}),
"41197": (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    InnerScreen: function() {
        return InnerScreen;
    },
    ScreenContext: function() {
        return ScreenContext;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _TransitionProgressContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(63915));
var _DelayedFreeze = /*#__PURE__*/ _interop_require_default._(__webpack_require__(82839));
var _core = __webpack_require__(5804);
var _ScreenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(68176));
var _ModalScreenNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(70188));
var _usePrevious = __webpack_require__(65351);
var AnimatedNativeScreen = _reactnative.Animated.createAnimatedComponent(_ScreenNativeComponent.default);
var AnimatedNativeModalScreen = _reactnative.Animated.createAnimatedComponent(_ModalScreenNativeComponent.default);
// This value must be kept in sync with native side.
var SHEET_FIT_TO_CONTENTS = [
    -1
];
var SHEET_COMPAT_LARGE = [
    1.0
];
var SHEET_COMPAT_MEDIUM = [
    0.5
];
var SHEET_COMPAT_ALL = [
    0.5,
    1.0
];
var SHEET_DIMMED_ALWAYS = -1;
// const SHEET_DIMMED_NEVER = 9999;
function assertDetentsArrayIsSorted(array) {
    for(var i = 1; i < array.length; i++){
        if (array[i - 1] > array[i]) {
            throw new Error('[RNScreens] The detent array is not sorted in ascending order!');
        }
    }
}
// These exist to transform old 'legacy' values used by the formsheet API to the new API shape.
// We can get rid of it, once we get rid of support for legacy values: 'large', 'medium', 'all'.
function resolveSheetAllowedDetents(allowedDetentsCompat) {
    if (Array.isArray(allowedDetentsCompat)) {
        if (_reactnative.Platform.OS === 'android' && allowedDetentsCompat.length > 3) {
            if (false) {}
            allowedDetentsCompat = allowedDetentsCompat.slice(0, 3);
        }
        if (false) {}
        return allowedDetentsCompat;
    } else if (allowedDetentsCompat === 'fitToContents') {
        return SHEET_FIT_TO_CONTENTS;
    } else if (allowedDetentsCompat === 'large') {
        return SHEET_COMPAT_LARGE;
    } else if (allowedDetentsCompat === 'medium') {
        return SHEET_COMPAT_MEDIUM;
    } else if (allowedDetentsCompat === 'all') {
        return SHEET_COMPAT_ALL;
    } else {
        // Safe default, only large detent is allowed.
        return [
            1.0
        ];
    }
}
function resolveSheetLargestUndimmedDetent(lud, lastDetentIndex) {
    if (typeof lud === 'number') {
        if (!isIndexInClosedRange(lud, SHEET_DIMMED_ALWAYS, lastDetentIndex)) {
            if (false) {}
            // Return default in production
            return SHEET_DIMMED_ALWAYS;
        }
        return lud;
    } else if (lud === 'last') {
        return lastDetentIndex;
    } else if (lud === 'none' || lud === 'all') {
        return SHEET_DIMMED_ALWAYS;
    } else if (lud === 'large') {
        return 1;
    } else if (lud === 'medium') {
        return 0;
    } else {
        // Safe default, every detent is dimmed
        return SHEET_DIMMED_ALWAYS;
    }
}
function resolveSheetInitialDetentIndex(index, lastDetentIndex) {
    if (index === 'last') {
        index = lastDetentIndex;
    } else if (index == null) {
        // Intentional check for undefined & null ^
        index = 0;
    }
    if (!isIndexInClosedRange(index, 0, lastDetentIndex)) {
        if (false) {}
        // Return default in production
        return 0;
    }
    return index;
}
function isIndexInClosedRange(value, lowerBound, upperBound) {
    return Number.isInteger(value) && value >= lowerBound && value <= upperBound;
}
var InnerScreen = /*#__PURE__*/ _react.default.forwardRef(function InnerScreen(props, ref) {
    var innerRef = _react.default.useRef(null);
    _react.default.useImperativeHandle(ref, function() {
        return innerRef.current;
    }, []);
    var prevActivityState = (0, _usePrevious.usePrevious)(props.activityState);
    var setRef = function(ref) {
        innerRef.current = ref;
        props.onComponentRef == null ? void 0 : props.onComponentRef.call(props, ref);
    };
    var closing = _react.default.useRef(new _reactnative.Animated.Value(0)).current;
    var progress = _react.default.useRef(new _reactnative.Animated.Value(0)).current;
    var goingForward = _react.default.useRef(new _reactnative.Animated.Value(0)).current;
    var _props_enabled = props.enabled, enabled = _props_enabled === void 0 ? (0, _core.screensEnabled)() : _props_enabled, _props_freezeOnBlur = props.freezeOnBlur, freezeOnBlur = _props_freezeOnBlur === void 0 ? (0, _core.freezeEnabled)() : _props_freezeOnBlur, rest = _object_without_properties_loose._(props, [
        "enabled",
        "freezeOnBlur"
    ]);
    // To maintain default behavior of formSheet stack presentation style and to have reasonable
    // defaults for new medium-detent iOS API we need to set defaults here
    var _rest_sheetAllowedDetents = rest.// formSheet presentation related props
    sheetAllowedDetents, sheetAllowedDetents = _rest_sheetAllowedDetents === void 0 ? [
        1.0
    ] : _rest_sheetAllowedDetents, _rest_sheetLargestUndimmedDetentIndex = rest.sheetLargestUndimmedDetentIndex, sheetLargestUndimmedDetentIndex = _rest_sheetLargestUndimmedDetentIndex === void 0 ? SHEET_DIMMED_ALWAYS : _rest_sheetLargestUndimmedDetentIndex, _rest_sheetGrabberVisible = rest.sheetGrabberVisible, sheetGrabberVisible = _rest_sheetGrabberVisible === void 0 ? false : _rest_sheetGrabberVisible, _rest_sheetCornerRadius = rest.sheetCornerRadius, sheetCornerRadius = _rest_sheetCornerRadius === void 0 ? -1.0 : _rest_sheetCornerRadius, _rest_sheetExpandsWhenScrolledToEdge = rest.sheetExpandsWhenScrolledToEdge, sheetExpandsWhenScrolledToEdge = _rest_sheetExpandsWhenScrolledToEdge === void 0 ? true : _rest_sheetExpandsWhenScrolledToEdge, _rest_sheetElevation = rest.sheetElevation, sheetElevation = _rest_sheetElevation === void 0 ? 24 : _rest_sheetElevation, _rest_sheetInitialDetentIndex = rest.sheetInitialDetentIndex, sheetInitialDetentIndex = _rest_sheetInitialDetentIndex === void 0 ? 0 : _rest_sheetInitialDetentIndex, // Other
    stackPresentation = rest.stackPresentation, // Events for override
    onAppear = rest.onAppear, onDisappear = rest.onDisappear, onWillAppear = rest.onWillAppear, onWillDisappear = rest.onWillDisappear;
    if (enabled && _core.isNativePlatformSupported) {
        var resolvedSheetAllowedDetents = resolveSheetAllowedDetents(sheetAllowedDetents);
        var resolvedSheetLargestUndimmedDetent = resolveSheetLargestUndimmedDetent(sheetLargestUndimmedDetentIndex, resolvedSheetAllowedDetents.length - 1);
        var resolvedSheetInitialDetentIndex = resolveSheetInitialDetentIndex(sheetInitialDetentIndex, resolvedSheetAllowedDetents.length - 1);
        // Due to how Yoga resolves layout, we need to have different components for modal nad non-modal screens
        var AnimatedScreen = _reactnative.Platform.OS === 'android' || stackPresentation === undefined || stackPresentation === 'push' || stackPresentation === 'containedModal' || stackPresentation === 'containedTransparentModal' ? AnimatedNativeScreen : AnimatedNativeModalScreen;
        var // Filter out active prop in this case because it is unused and
        // can cause problems depending on react-native version:
        // https://github.com/react-navigation/react-navigation/issues/4886
        active = rest.active, activityState = rest.activityState, children = rest.children, isNativeStack = rest.isNativeStack, gestureResponseDistance = rest.gestureResponseDistance, onGestureCancel = rest.onGestureCancel, style = rest.style, _$props = _object_without_properties_loose._(rest, [
            "active",
            "activityState",
            "children",
            "isNativeStack",
            "gestureResponseDistance",
            "onGestureCancel",
            "style"
        ]);
        if (active !== undefined && activityState === undefined) {
            console.warn('It appears that you are using old version of react-navigation library. Please update @react-navigation/bottom-tabs, @react-navigation/stack and @react-navigation/drawer to version 5.10.0 or above to take full advantage of new functionality added to react-native-screens');
            activityState = active !== 0 ? 2 : 0; // in the new version, we need one of the screens to have value of 2 after the transition
        }
        if (isNativeStack && prevActivityState !== undefined && activityState !== undefined) {
            if (prevActivityState > activityState) {
                throw new Error('[RNScreens] activityState cannot be decreased in NativeStack');
            }
        }
        var handleRef = function(ref) {
            var _ref_viewConfig_validAttributes, _ref_viewConfig, _ref__viewConfig_validAttributes, _ref__viewConfig;
            if (ref == null ? void 0 : (_ref_viewConfig = ref.viewConfig) == null ? void 0 : (_ref_viewConfig_validAttributes = _ref_viewConfig.validAttributes) == null ? void 0 : _ref_viewConfig_validAttributes.style) {
                ref.viewConfig.validAttributes.style = _extends._({}, ref.viewConfig.validAttributes.style, {
                    display: false
                });
                setRef(ref);
            } else if (ref == null ? void 0 : (_ref__viewConfig = ref._viewConfig) == null ? void 0 : (_ref__viewConfig_validAttributes = _ref__viewConfig.validAttributes) == null ? void 0 : _ref__viewConfig_validAttributes.style) {
                ref._viewConfig.validAttributes.style = _extends._({}, ref._viewConfig.validAttributes.style, {
                    display: false
                });
                setRef(ref);
            }
        };
        var _gestureResponseDistance_start, _gestureResponseDistance_end, _gestureResponseDistance_top, _gestureResponseDistance_bottom;
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_DelayedFreeze.default, {
            freeze: freezeOnBlur && activityState === 0,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedScreen, _extends._({}, _$props, {
                /**
             * This messy override is to conform NativeProps used by codegen and
             * our Public API. To see reasoning go to this PR:
             * https://github.com/software-mansion/react-native-screens/pull/2423#discussion_r1810616995
             */ onAppear: onAppear,
                onDisappear: onDisappear,
                onWillAppear: onWillAppear,
                onWillDisappear: onWillDisappear,
                onGestureCancel: onGestureCancel != null ? onGestureCancel : function() {
                // for internal use
                },
                //
                // Hierarchy of screens is handled on the native side and setting zIndex value causes this issue:
                // https://github.com/software-mansion/react-native-screens/issues/2345
                // With below change of zIndex, we force RN diffing mechanism to NOT include detaching and attaching mutation in one transaction.
                // Detailed information can be found here https://github.com/software-mansion/react-native-screens/pull/2351
                style: [
                    style,
                    {
                        zIndex: undefined
                    }
                ],
                activityState: activityState,
                sheetAllowedDetents: resolvedSheetAllowedDetents,
                sheetLargestUndimmedDetent: resolvedSheetLargestUndimmedDetent,
                sheetElevation: sheetElevation,
                sheetGrabberVisible: sheetGrabberVisible,
                sheetCornerRadius: sheetCornerRadius,
                sheetExpandsWhenScrolledToEdge: sheetExpandsWhenScrolledToEdge,
                sheetInitialDetent: resolvedSheetInitialDetentIndex,
                gestureResponseDistance: {
                    start: (_gestureResponseDistance_start = gestureResponseDistance == null ? void 0 : gestureResponseDistance.start) != null ? _gestureResponseDistance_start : -1,
                    end: (_gestureResponseDistance_end = gestureResponseDistance == null ? void 0 : gestureResponseDistance.end) != null ? _gestureResponseDistance_end : -1,
                    top: (_gestureResponseDistance_top = gestureResponseDistance == null ? void 0 : gestureResponseDistance.top) != null ? _gestureResponseDistance_top : -1,
                    bottom: (_gestureResponseDistance_bottom = gestureResponseDistance == null ? void 0 : gestureResponseDistance.bottom) != null ? _gestureResponseDistance_bottom : -1
                },
                // This prevents showing blank screen when navigating between multiple screens with freezing
                // https://github.com/software-mansion/react-native-screens/pull/1208
                ref: handleRef,
                onTransitionProgress: !isNativeStack ? undefined : _reactnative.Animated.event([
                    {
                        nativeEvent: {
                            progress: progress,
                            closing: closing,
                            goingForward: goingForward
                        }
                    }
                ], {
                    useNativeDriver: true
                }),
                children: !isNativeStack ? children : /*#__PURE__*/ (0, _jsxruntime.jsx)(_TransitionProgressContext.default.Provider, {
                    value: {
                        progress: progress,
                        closing: closing,
                        goingForward: goingForward
                    },
                    children: children
                })
            }))
        });
    } else {
        // same reason as above
        var active1 = rest.active, activityState1 = rest.activityState, style1 = rest.style, // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onComponentRef = rest.onComponentRef, _$props1 = _object_without_properties_loose._(rest, [
            "active",
            "activityState",
            "style",
            "onComponentRef"
        ]);
        if (active1 !== undefined && activityState1 === undefined) {
            activityState1 = active1 !== 0 ? 2 : 0;
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, _extends._({
            style: [
                style1,
                {
                    display: activityState1 !== 0 ? 'flex' : 'none'
                }
            ],
            ref: setRef
        }, _$props1));
    }
});
var ScreenContext = /*#__PURE__*/ _react.default.createContext(InnerScreen);
var Screen = /*#__PURE__*/ _react.default.forwardRef(function(props, ref) {
    var ScreenWrapper = _react.default.useContext(ScreenContext) || InnerScreen;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenWrapper, _extends._({}, props, {
        ref: ref
    }));
});
Screen.displayName = 'Screen';
var _default = Screen;


}),
"20172": (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _reactnative = __webpack_require__(44963);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84816));
var _core = __webpack_require__(5804);
var _ScreenContainerNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17564));
var _ScreenNavigationContainerNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(6606));
function ScreenContainer(props) {
    var _props_enabled = props.enabled, enabled = _props_enabled === void 0 ? (0, _core.screensEnabled)() : _props_enabled, hasTwoStates = props.hasTwoStates, rest = _object_without_properties_loose._(props, [
        "enabled",
        "hasTwoStates"
    ]);
    if (enabled && _core.isNativePlatformSupported) {
        if (hasTwoStates) {
            var ScreenNavigationContainer = _reactnative.Platform.OS === 'ios' ? _ScreenNavigationContainerNativeComponent.default : _ScreenContainerNativeComponent.default;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenNavigationContainer, _extends._({}, rest));
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScreenContainerNativeComponent.default, _extends._({}, rest));
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _extends._({}, rest));
}
var _default = ScreenContainer;


}),
"61600": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84816));
var _ScreenContentWrapperNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(36001));
function ScreenContentWrapper(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScreenContentWrapperNativeComponent.default, _extends._({
        collapsable: false
    }, props));
}
var _default = ScreenContentWrapper;


}),
"77443": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    FooterComponent: function() {
        return FooterComponent;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84816));
var _ScreenFooterNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66578));
/**
 * Unstable API
 */ function ScreenFooter(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScreenFooterNativeComponent.default, _extends._({}, props));
}
function FooterComponent(param) {
    var children = param.children;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenFooter, {
        collapsable: false,
        children: children
    });
}
var _default = ScreenFooter;


}),
"98441": (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84816));
var _contexts = __webpack_require__(14283);
var _core = __webpack_require__(5804);
var _DelayedFreeze = /*#__PURE__*/ _interop_require_default._(__webpack_require__(82839));
var _warnonce = /*#__PURE__*/ _interop_require_default._(__webpack_require__(97025));
var _ScreenStackNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(33930));
function isFabric() {
    return 'nativeFabricUIManager' in __webpack_require__.g;
}
var assertGHProvider = function(ScreenGestureDetector, goBackGesture) {
    var isGestureDetectorProviderNotDetected = ScreenGestureDetector.name !== 'GHWrapper' && goBackGesture !== undefined;
    (0, _warnonce.default)(isGestureDetectorProviderNotDetected, 'Cannot detect GestureDetectorProvider in a screen that uses `goBackGesture`. Make sure your navigator is wrapped in GestureDetectorProvider.');
};
var assertCustomScreenTransitionsProps = function(screensRefs, currentScreenId, goBackGesture) {
    var isGestureDetectorNotConfiguredProperly = goBackGesture !== undefined && screensRefs === null && currentScreenId === undefined;
    (0, _warnonce.default)(isGestureDetectorNotConfiguredProperly, 'Custom Screen Transition require screensRefs and currentScreenId to be provided.');
};
function ScreenStack(props) {
    var goBackGesture = props.goBackGesture, passedScreenRefs = props.screensRefs, currentScreenId = props.currentScreenId, transitionAnimation = props.transitionAnimation, screenEdgeGesture = props.screenEdgeGesture, onFinishTransitioning = props.onFinishTransitioning, children = props.children, rest = _object_without_properties_loose._(props, [
        "goBackGesture",
        "screensRefs",
        "currentScreenId",
        "transitionAnimation",
        "screenEdgeGesture",
        "onFinishTransitioning",
        "children"
    ]);
    var _passedScreenRefs_current;
    var screensRefs = _react.default.useRef((_passedScreenRefs_current = passedScreenRefs == null ? void 0 : passedScreenRefs.current) != null ? _passedScreenRefs_current : {});
    var ref = _react.default.useRef(null);
    var size = _react.default.Children.count(children);
    var ScreenGestureDetector = _react.default.useContext(_contexts.GHContext);
    var gestureDetectorBridge = _react.default.useRef({
        stackUseEffectCallback: function(_stackRef) {
        // this method will be overriden in GestureDetector
        }
    });
    // freezes all screens except the top one
    var childrenWithFreeze = _react.default.Children.map(children, function(child, index) {
        var _props_descriptors, _descriptor_options;
        // @ts-expect-error it's either SceneView in v6 or RouteView in v5
        var _$props = child.props, key = child.key;
        var _props_descriptor;
        var descriptor = (_props_descriptor = _$props == null ? void 0 : _$props.descriptor) != null ? _props_descriptor : _$props == null ? void 0 : (_props_descriptors = _$props.descriptors) == null ? void 0 : _props_descriptors[key];
        var _descriptor_options_freezeOnBlur;
        var isFreezeEnabled = (_descriptor_options_freezeOnBlur = descriptor == null ? void 0 : (_descriptor_options = descriptor.options) == null ? void 0 : _descriptor_options.freezeOnBlur) != null ? _descriptor_options_freezeOnBlur : (0, _core.freezeEnabled)();
        // On Fabric, when screen is frozen, animated and reanimated values are not updated
        // due to component being unmounted. To avoid this, we don't freeze the previous screen there
        var freezePreviousScreen = isFabric() ? size - index > 2 : size - index > 1;
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_DelayedFreeze.default, {
            freeze: isFreezeEnabled && freezePreviousScreen,
            children: child
        });
    });
    _react.default.useEffect(function() {
        gestureDetectorBridge.current.stackUseEffectCallback(ref);
    });
    assertGHProvider(ScreenGestureDetector, goBackGesture);
    assertCustomScreenTransitionsProps(screensRefs, currentScreenId, goBackGesture);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_contexts.RNSScreensRefContext.Provider, {
        value: screensRefs,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenGestureDetector, {
            gestureDetectorBridge: gestureDetectorBridge,
            goBackGesture: goBackGesture,
            transitionAnimation: transitionAnimation,
            screenEdgeGesture: screenEdgeGesture != null ? screenEdgeGesture : false,
            screensRefs: screensRefs,
            currentScreenId: currentScreenId,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScreenStackNativeComponent.default, _extends._({}, rest, {
                /**
           * This messy override is to conform NativeProps used by codegen and
           * our Public API. To see reasoning go to this PR:
           * https://github.com/software-mansion/react-native-screens/pull/2423#discussion_r1810616995
           */ onFinishTransitioning: onFinishTransitioning,
                ref: ref,
                children: childrenWithFreeze
            }))
        })
    });
}
var _default = ScreenStack;


}),
"48823": (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ScreenStackHeaderBackButtonImage: function() {
        return ScreenStackHeaderBackButtonImage;
    },
    ScreenStackHeaderCenterView: function() {
        return ScreenStackHeaderCenterView;
    },
    ScreenStackHeaderConfig: function() {
        return ScreenStackHeaderConfig;
    },
    ScreenStackHeaderLeftView: function() {
        return ScreenStackHeaderLeftView;
    },
    ScreenStackHeaderRightView: function() {
        return ScreenStackHeaderRightView;
    },
    ScreenStackHeaderSearchBarView: function() {
        return ScreenStackHeaderSearchBarView;
    },
    ScreenStackHeaderSubview: function() {
        return ScreenStackHeaderSubview;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _ScreenStackHeaderConfigNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(61541));
var _ScreenStackHeaderSubviewNativeComponent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66233));
var ScreenStackHeaderSubview = _ScreenStackHeaderSubviewNativeComponent.default;
var ScreenStackHeaderConfig = /*#__PURE__*/ _react.default.forwardRef(function(props, ref) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScreenStackHeaderConfigNativeComponent.default, _extends._({}, props, {
        ref: ref,
        style: styles.headerConfig,
        pointerEvents: "box-none"
    }));
});
ScreenStackHeaderConfig.displayName = 'ScreenStackHeaderConfig';
var ScreenStackHeaderBackButtonImage = function(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenStackHeaderSubview, {
        type: "back",
        style: styles.headerSubview,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Image, _extends._({
            resizeMode: "center",
            fadeDuration: 0
        }, props))
    });
};
var ScreenStackHeaderRightView = function(props) {
    var style = props.style, rest = _object_without_properties_loose._(props, [
        "style"
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenStackHeaderSubview, _extends._({}, rest, {
        type: "right",
        style: [
            styles.headerSubview,
            style
        ]
    }));
};
var ScreenStackHeaderLeftView = function(props) {
    var style = props.style, rest = _object_without_properties_loose._(props, [
        "style"
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenStackHeaderSubview, _extends._({}, rest, {
        type: "left",
        style: [
            styles.headerSubview,
            style
        ]
    }));
};
var ScreenStackHeaderCenterView = function(props) {
    var style = props.style, rest = _object_without_properties_loose._(props, [
        "style"
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenStackHeaderSubview, _extends._({}, rest, {
        type: "center",
        style: [
            styles.headerSubviewCenter,
            style
        ]
    }));
};
var ScreenStackHeaderSearchBarView = function(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ScreenStackHeaderSubview, _extends._({}, props, {
        type: "searchBar",
        style: styles.headerSubview
    }));
};
var styles = _reactnative.StyleSheet.create({
    headerSubview: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center'
    },
    headerSubviewCenter: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
        flexShrink: 1
    },
    headerConfig: {
        position: 'absolute',
        top: '-100%',
        width: '100%',
        flexDirection: 'row',
        justifyContent: 'space-between',
        // We only want to center align the subviews on iOS.
        // See https://github.com/software-mansion/react-native-screens/pull/2456
        alignItems: _reactnative.Platform.OS === 'ios' ? 'center' : undefined
    }
});


}),
"86822": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _warnonce = /*#__PURE__*/ _interop_require_default._(__webpack_require__(97025));
var _DebugContainer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(53881));
var _ScreenStackHeaderConfig = __webpack_require__(48823);
var _Screen = /*#__PURE__*/ _interop_require_default._(__webpack_require__(41197));
var _ScreenStack = /*#__PURE__*/ _interop_require_default._(__webpack_require__(98441));
var _contexts = __webpack_require__(14283);
var _ScreenFooter = __webpack_require__(77443);
function ScreenStackItem(_param, ref) {
    var children = _param.children, headerConfig = _param.headerConfig, activityState = _param.activityState, stackPresentation = _param.stackPresentation, contentStyle = _param.contentStyle, style = _param.style, screenId = _param.screenId, // eslint-disable-next-line camelcase
    unstable_sheetFooter = _param.unstable_sheetFooter, rest = _object_without_properties_loose._(_param, [
        "children",
        "headerConfig",
        "activityState",
        "stackPresentation",
        "contentStyle",
        "style",
        "screenId",
        "unstable_sheetFooter"
    ]);
    var currentScreenRef = _react.useRef(null);
    var screenRefs = _react.useContext(_contexts.RNSScreensRefContext);
    _react.useImperativeHandle(ref, function() {
        return currentScreenRef.current;
    });
    var isHeaderInModal = _reactnative.Platform.OS === 'android' ? false : stackPresentation !== 'push' && (headerConfig == null ? void 0 : headerConfig.hidden) === false;
    var headerHiddenPreviousRef = _react.useRef(headerConfig == null ? void 0 : headerConfig.hidden);
    _react.useEffect(function() {
        (0, _warnonce.default)(_reactnative.Platform.OS !== 'android' && stackPresentation !== 'push' && headerHiddenPreviousRef.current !== (headerConfig == null ? void 0 : headerConfig.hidden), "Dynamically changing header's visibility in modals will result in remounting the screen and losing all local state.");
        headerHiddenPreviousRef.current = headerConfig == null ? void 0 : headerConfig.hidden;
    }, [
        headerConfig == null ? void 0 : headerConfig.hidden,
        stackPresentation
    ]);
    var content = /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_DebugContainer.default, {
                style: [
                    stackPresentation === 'formSheet' ? _reactnative.Platform.OS === 'ios' ? styles.absolute : null : styles.container,
                    contentStyle
                ],
                stackPresentation: stackPresentation != null ? stackPresentation : 'push',
                children: children
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScreenStackHeaderConfig.ScreenStackHeaderConfig, _extends._({}, headerConfig)),
            stackPresentation === 'formSheet' && unstable_sheetFooter && /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScreenFooter.FooterComponent, {
                children: unstable_sheetFooter()
            })
        ]
    });
    // We take backgroundColor from contentStyle and apply it on Screen.
    // This allows to workaround one issue with truncated
    // content with formSheet presentation.
    var internalScreenStyle;
    if (stackPresentation === 'formSheet' && contentStyle) {
        var flattenContentStyles = _reactnative.StyleSheet.flatten(contentStyle);
        internalScreenStyle = {
            backgroundColor: flattenContentStyles == null ? void 0 : flattenContentStyles.backgroundColor
        };
    }
    var _headerConfig_largeTitle, _headerConfig_largeTitle1;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Screen.default, _extends._({
        ref: function(node) {
            currentScreenRef.current = node;
            if (screenRefs === null) {
                console.warn('Looks like RNSScreensRefContext is missing. Make sure the ScreenStack component is wrapped in it');
                return;
            }
            var currentRefs = screenRefs.current;
            if (node === null) {
                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
                delete currentRefs[screenId];
            } else {
                currentRefs[screenId] = {
                    current: node
                };
            }
        },
        enabled: true,
        isNativeStack: true,
        activityState: activityState,
        stackPresentation: stackPresentation,
        hasLargeHeader: (_headerConfig_largeTitle = headerConfig == null ? void 0 : headerConfig.largeTitle) != null ? _headerConfig_largeTitle : false,
        style: [
            style,
            internalScreenStyle
        ]
    }, rest, {
        children: isHeaderInModal ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScreenStack.default, {
            style: styles.container,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Screen.default, {
                enabled: true,
                isNativeStack: true,
                activityState: activityState,
                hasLargeHeader: (_headerConfig_largeTitle1 = headerConfig == null ? void 0 : headerConfig.largeTitle) != null ? _headerConfig_largeTitle1 : false,
                style: _reactnative.StyleSheet.absoluteFill,
                children: content
            })
        }) : content
    }));
}
var _default = /*#__PURE__*/ _react.forwardRef(ScreenStackItem);
var styles = _reactnative.StyleSheet.create({
    container: {
        flex: 1
    },
    absolute: {
        position: 'absolute',
        top: 0,
        start: 0,
        end: 0
    }
});


}),
"60777": (function (__unused_webpack_module, exports, __webpack_require__) {
'use client';
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84816));
var _utils = __webpack_require__(10111);
var _reactnative = __webpack_require__(44963);
var _SearchBarNativeComponent = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(71802));
var NativeSearchBar = _SearchBarNativeComponent.default;
var NativeSearchBarCommands = _SearchBarNativeComponent.Commands;
function SearchBar(props, ref) {
    var searchBarRef = _react.default.useRef(null);
    _react.default.useImperativeHandle(ref, function() {
        return {
            blur: function() {
                _callMethodWithRef(function(ref) {
                    return NativeSearchBarCommands.blur(ref);
                });
            },
            focus: function() {
                _callMethodWithRef(function(ref) {
                    return NativeSearchBarCommands.focus(ref);
                });
            },
            toggleCancelButton: function(flag) {
                _callMethodWithRef(function(ref) {
                    return NativeSearchBarCommands.toggleCancelButton(ref, flag);
                });
            },
            clearText: function() {
                _callMethodWithRef(function(ref) {
                    return NativeSearchBarCommands.clearText(ref);
                });
            },
            setText: function(text) {
                _callMethodWithRef(function(ref) {
                    return NativeSearchBarCommands.setText(ref, text);
                });
            },
            cancelSearch: function() {
                _callMethodWithRef(function(ref) {
                    return NativeSearchBarCommands.cancelSearch(ref);
                });
            }
        };
    });
    var _callMethodWithRef = _react.default.useCallback(function(method) {
        var _$ref = searchBarRef.current;
        if (_$ref) {
            method(_$ref);
        } else {
            console.warn('Reference to native search bar component has not been updated yet');
        }
    }, [
        searchBarRef
    ]);
    if (!_utils.isSearchBarAvailableForCurrentPlatform) {
        console.warn('Importing SearchBar is only valid on iOS and Android devices.');
        return _reactnative.View;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(NativeSearchBar, _extends._({
        ref: searchBarRef
    }, props, {
        onSearchFocus: props.onFocus,
        onSearchBlur: props.onBlur,
        onSearchButtonPress: props.onSearchButtonPress,
        onCancelButtonPress: props.onCancelButtonPress,
        onChangeText: props.onChangeText
    }));
}
var _default = /*#__PURE__*/ _react.default.forwardRef(SearchBar);


}),
"82839": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84816));
var _reactfreeze = __webpack_require__(9861);
// This component allows one more render before freezing the screen.
// Allows activityState to reach the native side and useIsFocused to work correctly.
function DelayedFreeze(param) {
    var freeze = param.freeze, children = param.children;
    // flag used for determining whether freeze should be enabled
    var _React_useState = _sliced_to_array._(_react.default.useState(false), 2), freezeState = _React_useState[0], setFreezeState = _React_useState[1];
    _react.default.useEffect(function() {
        var id = setImmediate(function() {
            setFreezeState(freeze);
        });
        return function() {
            clearImmediate(id);
        };
    }, [
        freeze
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactfreeze.Freeze, {
        freeze: freeze ? freezeState : false,
        children: children
    });
}
var _default = DelayedFreeze;


}),
"65351": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "usePrevious", ({
    enumerable: true,
    get: function() {
        return usePrevious;
    }
}));
var _react = __webpack_require__(84816);
function usePrevious(state) {
    var ref = (0, _react.useRef)();
    (0, _react.useEffect)(function() {
        ref.current = state;
    });
    return ref.current;
}


}),
"14283": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GHContext: function() {
        return GHContext;
    },
    RNSScreensRefContext: function() {
        return RNSScreensRefContext;
    }
});
var _interop_require_default = __webpack_require__(60133);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84816));
var GHContext = /*#__PURE__*/ _react.default.createContext(function(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
        children: props.children
    });
});
var RNSScreensRefContext = /*#__PURE__*/ _react.default.createContext(null);


}),
"66940": (function (__unused_webpack_module, exports, __webpack_require__) {
// Side effects import declaration to ensure our TurboModule
// is loaded.
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    FullWindowOverlay: function() {
        return _FullWindowOverlay.default;
    },
    InnerScreen: function() {
        return _Screen.InnerScreen;
    },
    Screen: function() {
        return _Screen.default;
    },
    ScreenContainer: function() {
        return _ScreenContainer.default;
    },
    ScreenContentWrapper: function() {
        return _ScreenContentWrapper.default;
    },
    ScreenContext: function() {
        return _Screen.ScreenContext;
    },
    ScreenFooter: function() {
        return _ScreenFooter.default;
    },
    ScreenStack: function() {
        return _ScreenStack.default;
    },
    ScreenStackHeaderBackButtonImage: function() {
        return _ScreenStackHeaderConfig.ScreenStackHeaderBackButtonImage;
    },
    ScreenStackHeaderCenterView: function() {
        return _ScreenStackHeaderConfig.ScreenStackHeaderCenterView;
    },
    ScreenStackHeaderConfig: function() {
        return _ScreenStackHeaderConfig.ScreenStackHeaderConfig;
    },
    ScreenStackHeaderLeftView: function() {
        return _ScreenStackHeaderConfig.ScreenStackHeaderLeftView;
    },
    ScreenStackHeaderRightView: function() {
        return _ScreenStackHeaderConfig.ScreenStackHeaderRightView;
    },
    ScreenStackHeaderSearchBarView: function() {
        return _ScreenStackHeaderConfig.ScreenStackHeaderSearchBarView;
    },
    ScreenStackHeaderSubview: function() {
        return _ScreenStackHeaderConfig.ScreenStackHeaderSubview;
    },
    ScreenStackItem: function() {
        return _ScreenStackItem.default;
    },
    SearchBar: function() {
        return _SearchBar.default;
    },
    compatibilityFlags: function() {
        return _utils.compatibilityFlags;
    },
    enableFreeze: function() {
        return _core.enableFreeze;
    },
    enableScreens: function() {
        return _core.enableScreens;
    },
    executeNativeBackPress: function() {
        return _utils.executeNativeBackPress;
    },
    freezeEnabled: function() {
        return _core.freezeEnabled;
    },
    isSearchBarAvailableForCurrentPlatform: function() {
        return _utils.isSearchBarAvailableForCurrentPlatform;
    },
    screensEnabled: function() {
        return _core.screensEnabled;
    },
    useTransitionProgress: function() {
        return _useTransitionProgress.default;
    }
});
var _export_star = __webpack_require__(4318);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
__webpack_require__(7085);
_export_star._(__webpack_require__(84123), exports);
var _core = __webpack_require__(5804);
var _Screen = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(41197));
var _ScreenStackHeaderConfig = __webpack_require__(48823);
var _SearchBar = /*#__PURE__*/ _interop_require_default._(__webpack_require__(60777));
var _ScreenContainer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(20172));
var _ScreenStack = /*#__PURE__*/ _interop_require_default._(__webpack_require__(98441));
var _ScreenStackItem = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86822));
var _FullWindowOverlay = /*#__PURE__*/ _interop_require_default._(__webpack_require__(61914));
var _ScreenFooter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(77443));
var _ScreenContentWrapper = /*#__PURE__*/ _interop_require_default._(__webpack_require__(61600));
var _utils = __webpack_require__(10111);
var _useTransitionProgress = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93925));


}),
"84123": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _interop_require_default = __webpack_require__(60133);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84816));


}),
"93925": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useTransitionProgress;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _TransitionProgressContext = /*#__PURE__*/ _interop_require_default._(__webpack_require__(63915));
function useTransitionProgress() {
    var progress = _react.useContext(_TransitionProgressContext.default);
    if (progress === undefined) {
        throw new Error("Couldn't find values for transition progress. Are you inside a screen in Native Stack?");
    }
    return progress;
}


}),

}]);//# sourceMappingURL=vendors-node_modules_pnpm_react-native-screens_4_2_0_react-native_0_76_3__babel_core_7_26_0__-15455b.chunk.bundle.map?platform=android