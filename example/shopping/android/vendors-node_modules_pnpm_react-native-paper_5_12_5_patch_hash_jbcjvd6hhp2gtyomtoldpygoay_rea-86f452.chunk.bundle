(self['webpackChunksas_shopping'] = self['webpackChunksas_shopping'] || []).push([["vendors-node_modules_pnpm_react-native-paper_5_12_5_patch_hash_jbcjvd6hhp2gtyomtoldpygoay_rea-86f452"], {
"52712": (function (module, __unused_webpack_exports, __webpack_require__) {
var AssetRegistry = __webpack_require__(27828);
module.exports = AssetRegistry.registerAsset({
  __packager_asset: true,
  scales: [1],
  name: "back-chevron",
  type: "png",
  hash: "2379ae894c2c9f63b852a9f3676c2763",
  httpServerLocation: "assets/node_modules/.pnpm/react-native-paper@5.12.5_patch_hash=jbcjvd6hhp2gtyomtoldpygoay_react-native-safe-area-contex_wtyp2zqz2c6w3xrc4c3tl7tfsu/node_modules/react-native-paper/src/assets",
  
  height: 63,
  width: 63,
});

}),
"3469": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

exports.__esModule = true;
exports["default"] = void 0;
var React = _interopRequireWildcard(__webpack_require__(84816));
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj["default"] = obj;
        return newObj;
    }
}
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function createThemeProvider(defaultTheme, ThemeContext) {
    var _class, _temp;
    return _temp = _class = /*#__PURE__*/ function(_React$Component) {
        _inheritsLoose(ThemeProvider, _React$Component);
        function ThemeProvider() {
            return _React$Component.apply(this, arguments) || this;
        }
        var _proto = ThemeProvider.prototype;
        _proto.render = function render() {
            return React.createElement(ThemeContext.Provider, {
                value: this.props.theme
            }, this.props.children);
        };
        return ThemeProvider;
    }(React.Component), _defineProperty(_class, "defaultProps", {
        theme: defaultTheme
    }), _temp;
}
var _default = createThemeProvider;
exports["default"] = _default; //# sourceMappingURL=createThemeProvider.js.map


}),
"96981": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

exports.__esModule = true;
exports["default"] = createTheming;
var React = _interopRequireWildcard(__webpack_require__(84816));
var _deepmerge = _interopRequireDefault(__webpack_require__(95780));
var _createThemeProvider = _interopRequireDefault(__webpack_require__(3469));
var _createWithTheme = _interopRequireDefault(__webpack_require__(31493));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj["default"] = obj;
        return newObj;
    }
}
function createTheming(defaultTheme) {
    var ThemeContext = React.createContext(defaultTheme);
    var ThemeProvider = (0, _createThemeProvider["default"])(defaultTheme, ThemeContext);
    var withTheme = (0, _createWithTheme["default"])(ThemeProvider, ThemeContext);
    var useTheme = function useTheme(overrides) {
        var theme = React.useContext(ThemeContext);
        var result = React.useMemo(function() {
            return theme && overrides ? (0, _deepmerge["default"])(theme, overrides) : theme || overrides;
        }, [
            theme,
            overrides
        ]);
        return result;
    };
    return {
        ThemeContext: ThemeContext,
        ThemeProvider: ThemeProvider,
        withTheme: withTheme,
        useTheme: useTheme
    };
} //# sourceMappingURL=createTheming.js.map


}),
"31493": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

exports.__esModule = true;
exports["default"] = void 0;
var React = _interopRequireWildcard(__webpack_require__(84816));
var _deepmerge = _interopRequireDefault(__webpack_require__(95780));
var _hoistNonReactStatics = _interopRequireDefault(__webpack_require__(76226));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj["default"] = obj;
        return newObj;
    }
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var createWithTheme = function createWithTheme(ThemeProvider, ThemeContext) {
    return function withTheme(Comp) {
        var ThemedComponent = /*#__PURE__*/ function(_React$Component) {
            _inheritsLoose(ThemedComponent, _React$Component);
            function ThemedComponent() {
                var _this;
                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                    args[_key] = arguments[_key];
                }
                _this = _React$Component.call.apply(_React$Component, [
                    this
                ].concat(args)) || this;
                _defineProperty(_assertThisInitialized(_this), "_previous", void 0);
                _defineProperty(_assertThisInitialized(_this), "_merge", function(a, b) {
                    var previous = _this._previous;
                    if (previous && previous.a === a && previous.b === b) {
                        return previous.result;
                    }
                    var result = a && b && a !== b ? (0, _deepmerge["default"])(a, b) : a || b;
                    _this._previous = {
                        a: a,
                        b: b,
                        result: result
                    };
                    return result;
                });
                return _this;
            }
            var _proto = ThemedComponent.prototype;
            _proto.render = function render() {
                var _this2 = this;
                var _this$props = this.props, _reactThemeProviderForwardedRef = _this$props._reactThemeProviderForwardedRef, rest = _objectWithoutPropertiesLoose(_this$props, [
                    "_reactThemeProviderForwardedRef"
                ]);
                return React.createElement(ThemeContext.Consumer, null, function(theme) {
                    return React.createElement(Comp, _extends({}, rest, {
                        theme: _this2._merge(theme, rest.theme),
                        ref: _reactThemeProviderForwardedRef
                    }));
                });
            };
            return ThemedComponent;
        }(React.Component);
        var ResultComponent = React.forwardRef(function(props, ref) {
            return React.createElement(ThemedComponent, _extends({}, props, {
                _reactThemeProviderForwardedRef: ref
            }));
        });
        ResultComponent.displayName = "withTheme(" + (Comp.displayName || Comp.name) + ")";
        (0, _hoistNonReactStatics["default"])(ResultComponent, Comp);
        return ResultComponent;
    };
};
var _default = createWithTheme;
exports["default"] = _default; //# sourceMappingURL=createWithTheme.js.map


}),
"34796": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

exports.__esModule = true;
var _createTheming = _interopRequireDefault(__webpack_require__(96981));
exports.createTheming = _createTheming["default"];
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
} //# sourceMappingURL=index.js.map


}),
"35403": (function (module, __unused_webpack_exports, __webpack_require__) {
/* MIT license */ var cssKeywords = __webpack_require__(77871);
// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)
var reverseKeywords = {};
for(var key in cssKeywords){
    if (cssKeywords.hasOwnProperty(key)) {
        reverseKeywords[cssKeywords[key]] = key;
    }
}
var convert = module.exports = {
    rgb: {
        channels: 3,
        labels: 'rgb'
    },
    hsl: {
        channels: 3,
        labels: 'hsl'
    },
    hsv: {
        channels: 3,
        labels: 'hsv'
    },
    hwb: {
        channels: 3,
        labels: 'hwb'
    },
    cmyk: {
        channels: 4,
        labels: 'cmyk'
    },
    xyz: {
        channels: 3,
        labels: 'xyz'
    },
    lab: {
        channels: 3,
        labels: 'lab'
    },
    lch: {
        channels: 3,
        labels: 'lch'
    },
    hex: {
        channels: 1,
        labels: [
            'hex'
        ]
    },
    keyword: {
        channels: 1,
        labels: [
            'keyword'
        ]
    },
    ansi16: {
        channels: 1,
        labels: [
            'ansi16'
        ]
    },
    ansi256: {
        channels: 1,
        labels: [
            'ansi256'
        ]
    },
    hcg: {
        channels: 3,
        labels: [
            'h',
            'c',
            'g'
        ]
    },
    apple: {
        channels: 3,
        labels: [
            'r16',
            'g16',
            'b16'
        ]
    },
    gray: {
        channels: 1,
        labels: [
            'gray'
        ]
    }
};
// hide .channels and .labels properties
for(var model in convert){
    if (convert.hasOwnProperty(model)) {
        if (!('channels' in convert[model])) {
            throw new Error('missing channels property: ' + model);
        }
        if (!('labels' in convert[model])) {
            throw new Error('missing channel labels property: ' + model);
        }
        if (convert[model].labels.length !== convert[model].channels) {
            throw new Error('channel and label counts mismatch: ' + model);
        }
        var channels = convert[model].channels;
        var labels = convert[model].labels;
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], 'channels', {
            value: channels
        });
        Object.defineProperty(convert[model], 'labels', {
            value: labels
        });
    }
}
convert.rgb.hsl = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var min = Math.min(r, g, b);
    var max = Math.max(r, g, b);
    var delta = max - min;
    var h;
    var s;
    var l;
    if (max === min) {
        h = 0;
    } else if (r === max) {
        h = (g - b) / delta;
    } else if (g === max) {
        h = 2 + (b - r) / delta;
    } else if (b === max) {
        h = 4 + (r - g) / delta;
    }
    h = Math.min(h * 60, 360);
    if (h < 0) {
        h += 360;
    }
    l = (min + max) / 2;
    if (max === min) {
        s = 0;
    } else if (l <= 0.5) {
        s = delta / (max + min);
    } else {
        s = delta / (2 - max - min);
    }
    return [
        h,
        s * 100,
        l * 100
    ];
};
convert.rgb.hsv = function(rgb) {
    var rdif;
    var gdif;
    var bdif;
    var h;
    var s;
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var v = Math.max(r, g, b);
    var diff = v - Math.min(r, g, b);
    var diffc = function diffc(c) {
        return (v - c) / 6 / diff + 1 / 2;
    };
    if (diff === 0) {
        h = s = 0;
    } else {
        s = diff / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);
        if (r === v) {
            h = bdif - gdif;
        } else if (g === v) {
            h = 1 / 3 + rdif - bdif;
        } else if (b === v) {
            h = 2 / 3 + gdif - rdif;
        }
        if (h < 0) {
            h += 1;
        } else if (h > 1) {
            h -= 1;
        }
    }
    return [
        h * 360,
        s * 100,
        v * 100
    ];
};
convert.rgb.hwb = function(rgb) {
    var r = rgb[0];
    var g = rgb[1];
    var b = rgb[2];
    var h = convert.rgb.hsl(rgb)[0];
    var w = 1 / 255 * Math.min(r, Math.min(g, b));
    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
    return [
        h,
        w * 100,
        b * 100
    ];
};
convert.rgb.cmyk = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var c;
    var m;
    var y;
    var k;
    k = Math.min(1 - r, 1 - g, 1 - b);
    c = (1 - r - k) / (1 - k) || 0;
    m = (1 - g - k) / (1 - k) || 0;
    y = (1 - b - k) / (1 - k) || 0;
    return [
        c * 100,
        m * 100,
        y * 100,
        k * 100
    ];
};
/**
 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
 * */ function comparativeDistance(x, y) {
    return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
}
convert.rgb.keyword = function(rgb) {
    var reversed = reverseKeywords[rgb];
    if (reversed) {
        return reversed;
    }
    var currentClosestDistance = Infinity;
    var currentClosestKeyword;
    for(var keyword in cssKeywords){
        if (cssKeywords.hasOwnProperty(keyword)) {
            var value = cssKeywords[keyword];
            // Compute comparative distance
            var distance = comparativeDistance(rgb, value);
            // Check if its less, if so set as closest
            if (distance < currentClosestDistance) {
                currentClosestDistance = distance;
                currentClosestKeyword = keyword;
            }
        }
    }
    return currentClosestKeyword;
};
convert.keyword.rgb = function(keyword) {
    return cssKeywords[keyword];
};
convert.rgb.xyz = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    // assume sRGB
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [
        x * 100,
        y * 100,
        z * 100
    ];
};
convert.rgb.lab = function(rgb) {
    var xyz = convert.rgb.xyz(rgb);
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [
        l,
        a,
        b
    ];
};
convert.hsl.rgb = function(hsl) {
    var h = hsl[0] / 360;
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var t1;
    var t2;
    var t3;
    var rgb;
    var val;
    if (s === 0) {
        val = l * 255;
        return [
            val,
            val,
            val
        ];
    }
    if (l < 0.5) {
        t2 = l * (1 + s);
    } else {
        t2 = l + s - l * s;
    }
    t1 = 2 * l - t2;
    rgb = [
        0,
        0,
        0
    ];
    for(var i = 0; i < 3; i++){
        t3 = h + 1 / 3 * -(i - 1);
        if (t3 < 0) {
            t3++;
        }
        if (t3 > 1) {
            t3--;
        }
        if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
            val = t2;
        } else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
            val = t1;
        }
        rgb[i] = val * 255;
    }
    return rgb;
};
convert.hsl.hsv = function(hsl) {
    var h = hsl[0];
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var smin = s;
    var lmin = Math.max(l, 0.01);
    var sv;
    var v;
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    v = (l + s) / 2;
    sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [
        h,
        sv * 100,
        v * 100
    ];
};
convert.hsv.rgb = function(hsv) {
    var h = hsv[0] / 60;
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var hi = Math.floor(h) % 6;
    var f = h - Math.floor(h);
    var p = 255 * v * (1 - s);
    var q = 255 * v * (1 - s * f);
    var t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch(hi){
        case 0:
            return [
                v,
                t,
                p
            ];
        case 1:
            return [
                q,
                v,
                p
            ];
        case 2:
            return [
                p,
                v,
                t
            ];
        case 3:
            return [
                p,
                q,
                v
            ];
        case 4:
            return [
                t,
                p,
                v
            ];
        case 5:
            return [
                v,
                p,
                q
            ];
    }
};
convert.hsv.hsl = function(hsv) {
    var h = hsv[0];
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var vmin = Math.max(v, 0.01);
    var lmin;
    var sl;
    var l;
    l = (2 - s) * v;
    lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [
        h,
        sl * 100,
        l * 100
    ];
};
// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function(hwb) {
    var h = hwb[0] / 360;
    var wh = hwb[1] / 100;
    var bl = hwb[2] / 100;
    var ratio = wh + bl;
    var i;
    var v;
    var f;
    var n;
    // wh + bl cant be > 1
    if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
    }
    i = Math.floor(6 * h);
    v = 1 - bl;
    f = 6 * h - i;
    if ((i & 0x01) !== 0) {
        f = 1 - f;
    }
    n = wh + f * (v - wh); // linear interpolation
    var r;
    var g;
    var b;
    switch(i){
        default:
        case 6:
        case 0:
            r = v;
            g = n;
            b = wh;
            break;
        case 1:
            r = n;
            g = v;
            b = wh;
            break;
        case 2:
            r = wh;
            g = v;
            b = n;
            break;
        case 3:
            r = wh;
            g = n;
            b = v;
            break;
        case 4:
            r = n;
            g = wh;
            b = v;
            break;
        case 5:
            r = v;
            g = wh;
            b = n;
            break;
    }
    return [
        r * 255,
        g * 255,
        b * 255
    ];
};
convert.cmyk.rgb = function(cmyk) {
    var c = cmyk[0] / 100;
    var m = cmyk[1] / 100;
    var y = cmyk[2] / 100;
    var k = cmyk[3] / 100;
    var r;
    var g;
    var b;
    r = 1 - Math.min(1, c * (1 - k) + k);
    g = 1 - Math.min(1, m * (1 - k) + k);
    b = 1 - Math.min(1, y * (1 - k) + k);
    return [
        r * 255,
        g * 255,
        b * 255
    ];
};
convert.xyz.rgb = function(xyz) {
    var x = xyz[0] / 100;
    var y = xyz[1] / 100;
    var z = xyz[2] / 100;
    var r;
    var g;
    var b;
    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x * 0.0557 + y * -0.2040 + z * 1.0570;
    // assume sRGB
    r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;
    g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;
    b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [
        r * 255,
        g * 255,
        b * 255
    ];
};
convert.xyz.lab = function(xyz) {
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [
        l,
        a,
        b
    ];
};
convert.lab.xyz = function(lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var x;
    var y;
    var z;
    y = (l + 16) / 116;
    x = a / 500 + y;
    z = y - b / 200;
    var y2 = Math.pow(y, 3);
    var x2 = Math.pow(x, 3);
    var z2 = Math.pow(z, 3);
    y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
    x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
    z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
    x *= 95.047;
    y *= 100;
    z *= 108.883;
    return [
        x,
        y,
        z
    ];
};
convert.lab.lch = function(lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var hr;
    var h;
    var c;
    hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;
    if (h < 0) {
        h += 360;
    }
    c = Math.sqrt(a * a + b * b);
    return [
        l,
        c,
        h
    ];
};
convert.lch.lab = function(lch) {
    var l = lch[0];
    var c = lch[1];
    var h = lch[2];
    var a;
    var b;
    var hr;
    hr = h / 360 * 2 * Math.PI;
    a = c * Math.cos(hr);
    b = c * Math.sin(hr);
    return [
        l,
        a,
        b
    ];
};
convert.rgb.ansi16 = function(args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization
    value = Math.round(value / 50);
    if (value === 0) {
        return 30;
    }
    var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
    if (value === 2) {
        ansi += 60;
    }
    return ansi;
};
convert.hsv.ansi16 = function(args) {
    // optimization here; we already know the value and don't need to get
    // it converted for us.
    return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};
convert.rgb.ansi256 = function(args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    // we use the extended greyscale palette here, with the exception of
    // black and white. normal palette only has 4 greyscale shades.
    if (r === g && g === b) {
        if (r < 8) {
            return 16;
        }
        if (r > 248) {
            return 231;
        }
        return Math.round((r - 8) / 247 * 24) + 232;
    }
    var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi;
};
convert.ansi16.rgb = function(args) {
    var color = args % 10;
    // handle greyscale
    if (color === 0 || color === 7) {
        if (args > 50) {
            color += 3.5;
        }
        color = color / 10.5 * 255;
        return [
            color,
            color,
            color
        ];
    }
    var mult = (~~(args > 50) + 1) * 0.5;
    var r = (color & 1) * mult * 255;
    var g = (color >> 1 & 1) * mult * 255;
    var b = (color >> 2 & 1) * mult * 255;
    return [
        r,
        g,
        b
    ];
};
convert.ansi256.rgb = function(args) {
    // handle greyscale
    if (args >= 232) {
        var c = (args - 232) * 10 + 8;
        return [
            c,
            c,
            c
        ];
    }
    args -= 16;
    var rem;
    var r = Math.floor(args / 36) / 5 * 255;
    var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    var b = rem % 6 / 5 * 255;
    return [
        r,
        g,
        b
    ];
};
convert.rgb.hex = function(args) {
    var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
    var string = integer.toString(16).toUpperCase();
    return '000000'.substring(string.length) + string;
};
convert.hex.rgb = function(args) {
    var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!match) {
        return [
            0,
            0,
            0
        ];
    }
    var colorString = match[0];
    if (match[0].length === 3) {
        colorString = colorString.split('').map(function(_char) {
            return _char + _char;
        }).join('');
    }
    var integer = parseInt(colorString, 16);
    var r = integer >> 16 & 0xFF;
    var g = integer >> 8 & 0xFF;
    var b = integer & 0xFF;
    return [
        r,
        g,
        b
    ];
};
convert.rgb.hcg = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var max = Math.max(Math.max(r, g), b);
    var min = Math.min(Math.min(r, g), b);
    var chroma = max - min;
    var grayscale;
    var hue;
    if (chroma < 1) {
        grayscale = min / (1 - chroma);
    } else {
        grayscale = 0;
    }
    if (chroma <= 0) {
        hue = 0;
    } else if (max === r) {
        hue = (g - b) / chroma % 6;
    } else if (max === g) {
        hue = 2 + (b - r) / chroma;
    } else {
        hue = 4 + (r - g) / chroma + 4;
    }
    hue /= 6;
    hue %= 1;
    return [
        hue * 360,
        chroma * 100,
        grayscale * 100
    ];
};
convert.hsl.hcg = function(hsl) {
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var c = 1;
    var f = 0;
    if (l < 0.5) {
        c = 2.0 * s * l;
    } else {
        c = 2.0 * s * (1.0 - l);
    }
    if (c < 1.0) {
        f = (l - 0.5 * c) / (1.0 - c);
    }
    return [
        hsl[0],
        c * 100,
        f * 100
    ];
};
convert.hsv.hcg = function(hsv) {
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var c = s * v;
    var f = 0;
    if (c < 1.0) {
        f = (v - c) / (1 - c);
    }
    return [
        hsv[0],
        c * 100,
        f * 100
    ];
};
convert.hcg.rgb = function(hcg) {
    var h = hcg[0] / 360;
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    if (c === 0.0) {
        return [
            g * 255,
            g * 255,
            g * 255
        ];
    }
    var pure = [
        0,
        0,
        0
    ];
    var hi = h % 1 * 6;
    var v = hi % 1;
    var w = 1 - v;
    var mg = 0;
    switch(Math.floor(hi)){
        case 0:
            pure[0] = 1;
            pure[1] = v;
            pure[2] = 0;
            break;
        case 1:
            pure[0] = w;
            pure[1] = 1;
            pure[2] = 0;
            break;
        case 2:
            pure[0] = 0;
            pure[1] = 1;
            pure[2] = v;
            break;
        case 3:
            pure[0] = 0;
            pure[1] = w;
            pure[2] = 1;
            break;
        case 4:
            pure[0] = v;
            pure[1] = 0;
            pure[2] = 1;
            break;
        default:
            pure[0] = 1;
            pure[1] = 0;
            pure[2] = w;
    }
    mg = (1.0 - c) * g;
    return [
        (c * pure[0] + mg) * 255,
        (c * pure[1] + mg) * 255,
        (c * pure[2] + mg) * 255
    ];
};
convert.hcg.hsv = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1.0 - c);
    var f = 0;
    if (v > 0.0) {
        f = c / v;
    }
    return [
        hcg[0],
        f * 100,
        v * 100
    ];
};
convert.hcg.hsl = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var l = g * (1.0 - c) + 0.5 * c;
    var s = 0;
    if (l > 0.0 && l < 0.5) {
        s = c / (2 * l);
    } else if (l >= 0.5 && l < 1.0) {
        s = c / (2 * (1 - l));
    }
    return [
        hcg[0],
        s * 100,
        l * 100
    ];
};
convert.hcg.hwb = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1.0 - c);
    return [
        hcg[0],
        (v - c) * 100,
        (1 - v) * 100
    ];
};
convert.hwb.hcg = function(hwb) {
    var w = hwb[1] / 100;
    var b = hwb[2] / 100;
    var v = 1 - b;
    var c = v - w;
    var g = 0;
    if (c < 1) {
        g = (v - c) / (1 - c);
    }
    return [
        hwb[0],
        c * 100,
        g * 100
    ];
};
convert.apple.rgb = function(apple) {
    return [
        apple[0] / 65535 * 255,
        apple[1] / 65535 * 255,
        apple[2] / 65535 * 255
    ];
};
convert.rgb.apple = function(rgb) {
    return [
        rgb[0] / 255 * 65535,
        rgb[1] / 255 * 65535,
        rgb[2] / 255 * 65535
    ];
};
convert.gray.rgb = function(args) {
    return [
        args[0] / 100 * 255,
        args[0] / 100 * 255,
        args[0] / 100 * 255
    ];
};
convert.gray.hsl = convert.gray.hsv = function(args) {
    return [
        0,
        0,
        args[0]
    ];
};
convert.gray.hwb = function(gray) {
    return [
        0,
        100,
        gray[0]
    ];
};
convert.gray.cmyk = function(gray) {
    return [
        0,
        0,
        0,
        gray[0]
    ];
};
convert.gray.lab = function(gray) {
    return [
        gray[0],
        0,
        0
    ];
};
convert.gray.hex = function(gray) {
    var val = Math.round(gray[0] / 100 * 255) & 0xFF;
    var integer = (val << 16) + (val << 8) + val;
    var string = integer.toString(16).toUpperCase();
    return '000000'.substring(string.length) + string;
};
convert.rgb.gray = function(rgb) {
    var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [
        val / 255 * 100
    ];
};


}),
"87555": (function (module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _type_of = __webpack_require__(15576);
var conversions = __webpack_require__(35403);
var route = __webpack_require__(73484);
var convert = {};
var models = Object.keys(conversions);
function wrapRaw(fn) {
    var wrappedFn = function wrappedFn(args) {
        if (args === undefined || args === null) {
            return args;
        }
        if (arguments.length > 1) {
            args = Array.prototype.slice.call(arguments);
        }
        return fn(args);
    };
    // preserve .conversion property if there is one
    if ('conversion' in fn) {
        wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
}
function wrapRounded(fn) {
    var wrappedFn = function wrappedFn(args) {
        if (args === undefined || args === null) {
            return args;
        }
        if (arguments.length > 1) {
            args = Array.prototype.slice.call(arguments);
        }
        var result = fn(args);
        // we're assuming the result is an array here.
        // see notice in conversions.js; don't use box types
        // in conversion functions.
        if ((typeof result === "undefined" ? "undefined" : _type_of._(result)) === 'object') {
            for(var len = result.length, i = 0; i < len; i++){
                result[i] = Math.round(result[i]);
            }
        }
        return result;
    };
    // preserve .conversion property if there is one
    if ('conversion' in fn) {
        wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
}
models.forEach(function(fromModel) {
    convert[fromModel] = {};
    Object.defineProperty(convert[fromModel], 'channels', {
        value: conversions[fromModel].channels
    });
    Object.defineProperty(convert[fromModel], 'labels', {
        value: conversions[fromModel].labels
    });
    var routes = route(fromModel);
    var routeModels = Object.keys(routes);
    routeModels.forEach(function(toModel) {
        var fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
    });
});
module.exports = convert;


}),
"73484": (function (module, __unused_webpack_exports, __webpack_require__) {
var conversions = __webpack_require__(35403);
/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/ function buildGraph() {
    var graph = {};
    // https://jsperf.com/object-keys-vs-for-in-with-closure/3
    var models = Object.keys(conversions);
    for(var len = models.length, i = 0; i < len; i++){
        graph[models[i]] = {
            // http://jsperf.com/1-vs-infinity
            // micro-opt, but this is simple.
            distance: -1,
            parent: null
        };
    }
    return graph;
}
// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
    var graph = buildGraph();
    var queue = [
        fromModel
    ]; // unshift -> queue -> pop
    graph[fromModel].distance = 0;
    while(queue.length){
        var current = queue.pop();
        var adjacents = Object.keys(conversions[current]);
        for(var len = adjacents.length, i = 0; i < len; i++){
            var adjacent = adjacents[i];
            var node = graph[adjacent];
            if (node.distance === -1) {
                node.distance = graph[current].distance + 1;
                node.parent = current;
                queue.unshift(adjacent);
            }
        }
    }
    return graph;
}
function link(from, to) {
    return function(args) {
        return to(from(args));
    };
}
function wrapConversion(toModel, graph) {
    var path = [
        graph[toModel].parent,
        toModel
    ];
    var fn = conversions[graph[toModel].parent][toModel];
    var cur = graph[toModel].parent;
    while(graph[cur].parent){
        path.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
    }
    fn.conversion = path;
    return fn;
}
module.exports = function(fromModel) {
    var graph = deriveBFS(fromModel);
    var conversion = {};
    var models = Object.keys(graph);
    for(var len = models.length, i = 0; i < len; i++){
        var toModel = models[i];
        var node = graph[toModel];
        if (node.parent === null) {
            continue;
        }
        conversion[toModel] = wrapConversion(toModel, graph);
    }
    return conversion;
};


}),
"77871": (function (module) {
"use strict";

module.exports = {
    aliceblue: [
        240,
        248,
        255
    ],
    antiquewhite: [
        250,
        235,
        215
    ],
    aqua: [
        0,
        255,
        255
    ],
    aquamarine: [
        127,
        255,
        212
    ],
    azure: [
        240,
        255,
        255
    ],
    beige: [
        245,
        245,
        220
    ],
    bisque: [
        255,
        228,
        196
    ],
    black: [
        0,
        0,
        0
    ],
    blanchedalmond: [
        255,
        235,
        205
    ],
    blue: [
        0,
        0,
        255
    ],
    blueviolet: [
        138,
        43,
        226
    ],
    brown: [
        165,
        42,
        42
    ],
    burlywood: [
        222,
        184,
        135
    ],
    cadetblue: [
        95,
        158,
        160
    ],
    chartreuse: [
        127,
        255,
        0
    ],
    chocolate: [
        210,
        105,
        30
    ],
    coral: [
        255,
        127,
        80
    ],
    cornflowerblue: [
        100,
        149,
        237
    ],
    cornsilk: [
        255,
        248,
        220
    ],
    crimson: [
        220,
        20,
        60
    ],
    cyan: [
        0,
        255,
        255
    ],
    darkblue: [
        0,
        0,
        139
    ],
    darkcyan: [
        0,
        139,
        139
    ],
    darkgoldenrod: [
        184,
        134,
        11
    ],
    darkgray: [
        169,
        169,
        169
    ],
    darkgreen: [
        0,
        100,
        0
    ],
    darkgrey: [
        169,
        169,
        169
    ],
    darkkhaki: [
        189,
        183,
        107
    ],
    darkmagenta: [
        139,
        0,
        139
    ],
    darkolivegreen: [
        85,
        107,
        47
    ],
    darkorange: [
        255,
        140,
        0
    ],
    darkorchid: [
        153,
        50,
        204
    ],
    darkred: [
        139,
        0,
        0
    ],
    darksalmon: [
        233,
        150,
        122
    ],
    darkseagreen: [
        143,
        188,
        143
    ],
    darkslateblue: [
        72,
        61,
        139
    ],
    darkslategray: [
        47,
        79,
        79
    ],
    darkslategrey: [
        47,
        79,
        79
    ],
    darkturquoise: [
        0,
        206,
        209
    ],
    darkviolet: [
        148,
        0,
        211
    ],
    deeppink: [
        255,
        20,
        147
    ],
    deepskyblue: [
        0,
        191,
        255
    ],
    dimgray: [
        105,
        105,
        105
    ],
    dimgrey: [
        105,
        105,
        105
    ],
    dodgerblue: [
        30,
        144,
        255
    ],
    firebrick: [
        178,
        34,
        34
    ],
    floralwhite: [
        255,
        250,
        240
    ],
    forestgreen: [
        34,
        139,
        34
    ],
    fuchsia: [
        255,
        0,
        255
    ],
    gainsboro: [
        220,
        220,
        220
    ],
    ghostwhite: [
        248,
        248,
        255
    ],
    gold: [
        255,
        215,
        0
    ],
    goldenrod: [
        218,
        165,
        32
    ],
    gray: [
        128,
        128,
        128
    ],
    green: [
        0,
        128,
        0
    ],
    greenyellow: [
        173,
        255,
        47
    ],
    grey: [
        128,
        128,
        128
    ],
    honeydew: [
        240,
        255,
        240
    ],
    hotpink: [
        255,
        105,
        180
    ],
    indianred: [
        205,
        92,
        92
    ],
    indigo: [
        75,
        0,
        130
    ],
    ivory: [
        255,
        255,
        240
    ],
    khaki: [
        240,
        230,
        140
    ],
    lavender: [
        230,
        230,
        250
    ],
    lavenderblush: [
        255,
        240,
        245
    ],
    lawngreen: [
        124,
        252,
        0
    ],
    lemonchiffon: [
        255,
        250,
        205
    ],
    lightblue: [
        173,
        216,
        230
    ],
    lightcoral: [
        240,
        128,
        128
    ],
    lightcyan: [
        224,
        255,
        255
    ],
    lightgoldenrodyellow: [
        250,
        250,
        210
    ],
    lightgray: [
        211,
        211,
        211
    ],
    lightgreen: [
        144,
        238,
        144
    ],
    lightgrey: [
        211,
        211,
        211
    ],
    lightpink: [
        255,
        182,
        193
    ],
    lightsalmon: [
        255,
        160,
        122
    ],
    lightseagreen: [
        32,
        178,
        170
    ],
    lightskyblue: [
        135,
        206,
        250
    ],
    lightslategray: [
        119,
        136,
        153
    ],
    lightslategrey: [
        119,
        136,
        153
    ],
    lightsteelblue: [
        176,
        196,
        222
    ],
    lightyellow: [
        255,
        255,
        224
    ],
    lime: [
        0,
        255,
        0
    ],
    limegreen: [
        50,
        205,
        50
    ],
    linen: [
        250,
        240,
        230
    ],
    magenta: [
        255,
        0,
        255
    ],
    maroon: [
        128,
        0,
        0
    ],
    mediumaquamarine: [
        102,
        205,
        170
    ],
    mediumblue: [
        0,
        0,
        205
    ],
    mediumorchid: [
        186,
        85,
        211
    ],
    mediumpurple: [
        147,
        112,
        219
    ],
    mediumseagreen: [
        60,
        179,
        113
    ],
    mediumslateblue: [
        123,
        104,
        238
    ],
    mediumspringgreen: [
        0,
        250,
        154
    ],
    mediumturquoise: [
        72,
        209,
        204
    ],
    mediumvioletred: [
        199,
        21,
        133
    ],
    midnightblue: [
        25,
        25,
        112
    ],
    mintcream: [
        245,
        255,
        250
    ],
    mistyrose: [
        255,
        228,
        225
    ],
    moccasin: [
        255,
        228,
        181
    ],
    navajowhite: [
        255,
        222,
        173
    ],
    navy: [
        0,
        0,
        128
    ],
    oldlace: [
        253,
        245,
        230
    ],
    olive: [
        128,
        128,
        0
    ],
    olivedrab: [
        107,
        142,
        35
    ],
    orange: [
        255,
        165,
        0
    ],
    orangered: [
        255,
        69,
        0
    ],
    orchid: [
        218,
        112,
        214
    ],
    palegoldenrod: [
        238,
        232,
        170
    ],
    palegreen: [
        152,
        251,
        152
    ],
    paleturquoise: [
        175,
        238,
        238
    ],
    palevioletred: [
        219,
        112,
        147
    ],
    papayawhip: [
        255,
        239,
        213
    ],
    peachpuff: [
        255,
        218,
        185
    ],
    peru: [
        205,
        133,
        63
    ],
    pink: [
        255,
        192,
        203
    ],
    plum: [
        221,
        160,
        221
    ],
    powderblue: [
        176,
        224,
        230
    ],
    purple: [
        128,
        0,
        128
    ],
    rebeccapurple: [
        102,
        51,
        153
    ],
    red: [
        255,
        0,
        0
    ],
    rosybrown: [
        188,
        143,
        143
    ],
    royalblue: [
        65,
        105,
        225
    ],
    saddlebrown: [
        139,
        69,
        19
    ],
    salmon: [
        250,
        128,
        114
    ],
    sandybrown: [
        244,
        164,
        96
    ],
    seagreen: [
        46,
        139,
        87
    ],
    seashell: [
        255,
        245,
        238
    ],
    sienna: [
        160,
        82,
        45
    ],
    silver: [
        192,
        192,
        192
    ],
    skyblue: [
        135,
        206,
        235
    ],
    slateblue: [
        106,
        90,
        205
    ],
    slategray: [
        112,
        128,
        144
    ],
    slategrey: [
        112,
        128,
        144
    ],
    snow: [
        255,
        250,
        250
    ],
    springgreen: [
        0,
        255,
        127
    ],
    steelblue: [
        70,
        130,
        180
    ],
    tan: [
        210,
        180,
        140
    ],
    teal: [
        0,
        128,
        128
    ],
    thistle: [
        216,
        191,
        216
    ],
    tomato: [
        255,
        99,
        71
    ],
    turquoise: [
        64,
        224,
        208
    ],
    violet: [
        238,
        130,
        238
    ],
    wheat: [
        245,
        222,
        179
    ],
    white: [
        255,
        255,
        255
    ],
    whitesmoke: [
        245,
        245,
        245
    ],
    yellow: [
        255,
        255,
        0
    ],
    yellowgreen: [
        154,
        205,
        50
    ]
};


}),
"1642": (function (module) {
"use strict";

module.exports = {
    aliceblue: [
        240,
        248,
        255
    ],
    antiquewhite: [
        250,
        235,
        215
    ],
    aqua: [
        0,
        255,
        255
    ],
    aquamarine: [
        127,
        255,
        212
    ],
    azure: [
        240,
        255,
        255
    ],
    beige: [
        245,
        245,
        220
    ],
    bisque: [
        255,
        228,
        196
    ],
    black: [
        0,
        0,
        0
    ],
    blanchedalmond: [
        255,
        235,
        205
    ],
    blue: [
        0,
        0,
        255
    ],
    blueviolet: [
        138,
        43,
        226
    ],
    brown: [
        165,
        42,
        42
    ],
    burlywood: [
        222,
        184,
        135
    ],
    cadetblue: [
        95,
        158,
        160
    ],
    chartreuse: [
        127,
        255,
        0
    ],
    chocolate: [
        210,
        105,
        30
    ],
    coral: [
        255,
        127,
        80
    ],
    cornflowerblue: [
        100,
        149,
        237
    ],
    cornsilk: [
        255,
        248,
        220
    ],
    crimson: [
        220,
        20,
        60
    ],
    cyan: [
        0,
        255,
        255
    ],
    darkblue: [
        0,
        0,
        139
    ],
    darkcyan: [
        0,
        139,
        139
    ],
    darkgoldenrod: [
        184,
        134,
        11
    ],
    darkgray: [
        169,
        169,
        169
    ],
    darkgreen: [
        0,
        100,
        0
    ],
    darkgrey: [
        169,
        169,
        169
    ],
    darkkhaki: [
        189,
        183,
        107
    ],
    darkmagenta: [
        139,
        0,
        139
    ],
    darkolivegreen: [
        85,
        107,
        47
    ],
    darkorange: [
        255,
        140,
        0
    ],
    darkorchid: [
        153,
        50,
        204
    ],
    darkred: [
        139,
        0,
        0
    ],
    darksalmon: [
        233,
        150,
        122
    ],
    darkseagreen: [
        143,
        188,
        143
    ],
    darkslateblue: [
        72,
        61,
        139
    ],
    darkslategray: [
        47,
        79,
        79
    ],
    darkslategrey: [
        47,
        79,
        79
    ],
    darkturquoise: [
        0,
        206,
        209
    ],
    darkviolet: [
        148,
        0,
        211
    ],
    deeppink: [
        255,
        20,
        147
    ],
    deepskyblue: [
        0,
        191,
        255
    ],
    dimgray: [
        105,
        105,
        105
    ],
    dimgrey: [
        105,
        105,
        105
    ],
    dodgerblue: [
        30,
        144,
        255
    ],
    firebrick: [
        178,
        34,
        34
    ],
    floralwhite: [
        255,
        250,
        240
    ],
    forestgreen: [
        34,
        139,
        34
    ],
    fuchsia: [
        255,
        0,
        255
    ],
    gainsboro: [
        220,
        220,
        220
    ],
    ghostwhite: [
        248,
        248,
        255
    ],
    gold: [
        255,
        215,
        0
    ],
    goldenrod: [
        218,
        165,
        32
    ],
    gray: [
        128,
        128,
        128
    ],
    green: [
        0,
        128,
        0
    ],
    greenyellow: [
        173,
        255,
        47
    ],
    grey: [
        128,
        128,
        128
    ],
    honeydew: [
        240,
        255,
        240
    ],
    hotpink: [
        255,
        105,
        180
    ],
    indianred: [
        205,
        92,
        92
    ],
    indigo: [
        75,
        0,
        130
    ],
    ivory: [
        255,
        255,
        240
    ],
    khaki: [
        240,
        230,
        140
    ],
    lavender: [
        230,
        230,
        250
    ],
    lavenderblush: [
        255,
        240,
        245
    ],
    lawngreen: [
        124,
        252,
        0
    ],
    lemonchiffon: [
        255,
        250,
        205
    ],
    lightblue: [
        173,
        216,
        230
    ],
    lightcoral: [
        240,
        128,
        128
    ],
    lightcyan: [
        224,
        255,
        255
    ],
    lightgoldenrodyellow: [
        250,
        250,
        210
    ],
    lightgray: [
        211,
        211,
        211
    ],
    lightgreen: [
        144,
        238,
        144
    ],
    lightgrey: [
        211,
        211,
        211
    ],
    lightpink: [
        255,
        182,
        193
    ],
    lightsalmon: [
        255,
        160,
        122
    ],
    lightseagreen: [
        32,
        178,
        170
    ],
    lightskyblue: [
        135,
        206,
        250
    ],
    lightslategray: [
        119,
        136,
        153
    ],
    lightslategrey: [
        119,
        136,
        153
    ],
    lightsteelblue: [
        176,
        196,
        222
    ],
    lightyellow: [
        255,
        255,
        224
    ],
    lime: [
        0,
        255,
        0
    ],
    limegreen: [
        50,
        205,
        50
    ],
    linen: [
        250,
        240,
        230
    ],
    magenta: [
        255,
        0,
        255
    ],
    maroon: [
        128,
        0,
        0
    ],
    mediumaquamarine: [
        102,
        205,
        170
    ],
    mediumblue: [
        0,
        0,
        205
    ],
    mediumorchid: [
        186,
        85,
        211
    ],
    mediumpurple: [
        147,
        112,
        219
    ],
    mediumseagreen: [
        60,
        179,
        113
    ],
    mediumslateblue: [
        123,
        104,
        238
    ],
    mediumspringgreen: [
        0,
        250,
        154
    ],
    mediumturquoise: [
        72,
        209,
        204
    ],
    mediumvioletred: [
        199,
        21,
        133
    ],
    midnightblue: [
        25,
        25,
        112
    ],
    mintcream: [
        245,
        255,
        250
    ],
    mistyrose: [
        255,
        228,
        225
    ],
    moccasin: [
        255,
        228,
        181
    ],
    navajowhite: [
        255,
        222,
        173
    ],
    navy: [
        0,
        0,
        128
    ],
    oldlace: [
        253,
        245,
        230
    ],
    olive: [
        128,
        128,
        0
    ],
    olivedrab: [
        107,
        142,
        35
    ],
    orange: [
        255,
        165,
        0
    ],
    orangered: [
        255,
        69,
        0
    ],
    orchid: [
        218,
        112,
        214
    ],
    palegoldenrod: [
        238,
        232,
        170
    ],
    palegreen: [
        152,
        251,
        152
    ],
    paleturquoise: [
        175,
        238,
        238
    ],
    palevioletred: [
        219,
        112,
        147
    ],
    papayawhip: [
        255,
        239,
        213
    ],
    peachpuff: [
        255,
        218,
        185
    ],
    peru: [
        205,
        133,
        63
    ],
    pink: [
        255,
        192,
        203
    ],
    plum: [
        221,
        160,
        221
    ],
    powderblue: [
        176,
        224,
        230
    ],
    purple: [
        128,
        0,
        128
    ],
    rebeccapurple: [
        102,
        51,
        153
    ],
    red: [
        255,
        0,
        0
    ],
    rosybrown: [
        188,
        143,
        143
    ],
    royalblue: [
        65,
        105,
        225
    ],
    saddlebrown: [
        139,
        69,
        19
    ],
    salmon: [
        250,
        128,
        114
    ],
    sandybrown: [
        244,
        164,
        96
    ],
    seagreen: [
        46,
        139,
        87
    ],
    seashell: [
        255,
        245,
        238
    ],
    sienna: [
        160,
        82,
        45
    ],
    silver: [
        192,
        192,
        192
    ],
    skyblue: [
        135,
        206,
        235
    ],
    slateblue: [
        106,
        90,
        205
    ],
    slategray: [
        112,
        128,
        144
    ],
    slategrey: [
        112,
        128,
        144
    ],
    snow: [
        255,
        250,
        250
    ],
    springgreen: [
        0,
        255,
        127
    ],
    steelblue: [
        70,
        130,
        180
    ],
    tan: [
        210,
        180,
        140
    ],
    teal: [
        0,
        128,
        128
    ],
    thistle: [
        216,
        191,
        216
    ],
    tomato: [
        255,
        99,
        71
    ],
    turquoise: [
        64,
        224,
        208
    ],
    violet: [
        238,
        130,
        238
    ],
    wheat: [
        245,
        222,
        179
    ],
    white: [
        255,
        255,
        255
    ],
    whitesmoke: [
        245,
        245,
        245
    ],
    yellow: [
        255,
        255,
        0
    ],
    yellowgreen: [
        154,
        205,
        50
    ]
};


}),
"8927": (function (module, __unused_webpack_exports, __webpack_require__) {
/* MIT license */ var colorNames = __webpack_require__(1642);
var swizzle = __webpack_require__(44749);
var hasOwnProperty = Object.hasOwnProperty;
var reverseNames = Object.create(null);
// create a list of reverse color names
for(var name in colorNames){
    if (hasOwnProperty.call(colorNames, name)) {
        reverseNames[colorNames[name]] = name;
    }
}
var cs = module.exports = {
    to: {},
    get: {}
};
cs.get = function(string) {
    var prefix = string.substring(0, 3).toLowerCase();
    var val;
    var model;
    switch(prefix){
        case 'hsl':
            val = cs.get.hsl(string);
            model = 'hsl';
            break;
        case 'hwb':
            val = cs.get.hwb(string);
            model = 'hwb';
            break;
        default:
            val = cs.get.rgb(string);
            model = 'rgb';
            break;
    }
    if (!val) {
        return null;
    }
    return {
        model: model,
        value: val
    };
};
cs.get.rgb = function(string) {
    if (!string) {
        return null;
    }
    var abbr = /^#([a-f0-9]{3,4})$/i;
    var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
    var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
    var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
    var keyword = /^(\w+)$/;
    var rgb = [
        0,
        0,
        0,
        1
    ];
    var match;
    var i;
    var hexAlpha;
    if (match = string.match(hex)) {
        hexAlpha = match[2];
        match = match[1];
        for(i = 0; i < 3; i++){
            // https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
            var i2 = i * 2;
            rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
        }
        if (hexAlpha) {
            rgb[3] = parseInt(hexAlpha, 16) / 255;
        }
    } else if (match = string.match(abbr)) {
        match = match[1];
        hexAlpha = match[3];
        for(i = 0; i < 3; i++){
            rgb[i] = parseInt(match[i] + match[i], 16);
        }
        if (hexAlpha) {
            rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
        }
    } else if (match = string.match(rgba)) {
        for(i = 0; i < 3; i++){
            rgb[i] = parseInt(match[i + 1], 0);
        }
        if (match[4]) {
            if (match[5]) {
                rgb[3] = parseFloat(match[4]) * 0.01;
            } else {
                rgb[3] = parseFloat(match[4]);
            }
        }
    } else if (match = string.match(per)) {
        for(i = 0; i < 3; i++){
            rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
        }
        if (match[4]) {
            if (match[5]) {
                rgb[3] = parseFloat(match[4]) * 0.01;
            } else {
                rgb[3] = parseFloat(match[4]);
            }
        }
    } else if (match = string.match(keyword)) {
        if (match[1] === 'transparent') {
            return [
                0,
                0,
                0,
                0
            ];
        }
        if (!hasOwnProperty.call(colorNames, match[1])) {
            return null;
        }
        rgb = colorNames[match[1]];
        rgb[3] = 1;
        return rgb;
    } else {
        return null;
    }
    for(i = 0; i < 3; i++){
        rgb[i] = clamp(rgb[i], 0, 255);
    }
    rgb[3] = clamp(rgb[3], 0, 1);
    return rgb;
};
cs.get.hsl = function(string) {
    if (!string) {
        return null;
    }
    var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
    var match = string.match(hsl);
    if (match) {
        var alpha = parseFloat(match[4]);
        var h = (parseFloat(match[1]) % 360 + 360) % 360;
        var s = clamp(parseFloat(match[2]), 0, 100);
        var l = clamp(parseFloat(match[3]), 0, 100);
        var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [
            h,
            s,
            l,
            a
        ];
    }
    return null;
};
cs.get.hwb = function(string) {
    if (!string) {
        return null;
    }
    var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
    var match = string.match(hwb);
    if (match) {
        var alpha = parseFloat(match[4]);
        var h = (parseFloat(match[1]) % 360 + 360) % 360;
        var w = clamp(parseFloat(match[2]), 0, 100);
        var b = clamp(parseFloat(match[3]), 0, 100);
        var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [
            h,
            w,
            b,
            a
        ];
    }
    return null;
};
cs.to.hex = function() {
    var rgba = swizzle(arguments);
    return '#' + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : '');
};
cs.to.rgb = function() {
    var rgba = swizzle(arguments);
    return rgba.length < 4 || rgba[3] === 1 ? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')' : 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
};
cs.to.rgb.percent = function() {
    var rgba = swizzle(arguments);
    var r = Math.round(rgba[0] / 255 * 100);
    var g = Math.round(rgba[1] / 255 * 100);
    var b = Math.round(rgba[2] / 255 * 100);
    return rgba.length < 4 || rgba[3] === 1 ? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)' : 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
};
cs.to.hsl = function() {
    var hsla = swizzle(arguments);
    return hsla.length < 4 || hsla[3] === 1 ? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)' : 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
};
// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
cs.to.hwb = function() {
    var hwba = swizzle(arguments);
    var a = '';
    if (hwba.length >= 4 && hwba[3] !== 1) {
        a = ', ' + hwba[3];
    }
    return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
};
cs.to.keyword = function(rgb) {
    return reverseNames[rgb.slice(0, 3)];
};
// helpers
function clamp(num, min, max) {
    return Math.min(Math.max(min, num), max);
}
function hexDouble(num) {
    var str = Math.round(num).toString(16).toUpperCase();
    return str.length < 2 ? '0' + str : str;
}


}),
"3965": (function (module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _type_of = __webpack_require__(15576);
var colorString = __webpack_require__(8927);
var convert = __webpack_require__(87555);
var _slice = [].slice;
var skippedModels = [
    // to be honest, I don't really feel like keyword belongs in color convert, but eh.
    'keyword',
    // gray conflicts with some method names, and has its own method defined.
    'gray',
    // shouldn't really be in color-convert either...
    'hex'
];
var hashedModelKeys = {};
Object.keys(convert).forEach(function(model) {
    hashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;
});
var limiters = {};
function Color(obj, model) {
    if (!(this instanceof Color)) {
        return new Color(obj, model);
    }
    if (model && model in skippedModels) {
        model = null;
    }
    if (model && !(model in convert)) {
        throw new Error('Unknown model: ' + model);
    }
    var i;
    var channels;
    if (obj == null) {
        this.model = 'rgb';
        this.color = [
            0,
            0,
            0
        ];
        this.valpha = 1;
    } else if (obj instanceof Color) {
        this.model = obj.model;
        this.color = obj.color.slice();
        this.valpha = obj.valpha;
    } else if (typeof obj === 'string') {
        var result = colorString.get(obj);
        if (result === null) {
            throw new Error('Unable to parse color from string: ' + obj);
        }
        this.model = result.model;
        channels = convert[this.model].channels;
        this.color = result.value.slice(0, channels);
        this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
    } else if (obj.length) {
        this.model = model || 'rgb';
        channels = convert[this.model].channels;
        var newArr = _slice.call(obj, 0, channels);
        this.color = zeroArray(newArr, channels);
        this.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;
    } else if (typeof obj === 'number') {
        // this is always RGB - can be converted later on.
        obj &= 0xFFFFFF;
        this.model = 'rgb';
        this.color = [
            obj >> 16 & 0xFF,
            obj >> 8 & 0xFF,
            obj & 0xFF
        ];
        this.valpha = 1;
    } else {
        this.valpha = 1;
        var keys = Object.keys(obj);
        if ('alpha' in obj) {
            keys.splice(keys.indexOf('alpha'), 1);
            this.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;
        }
        var hashedKeys = keys.sort().join('');
        if (!(hashedKeys in hashedModelKeys)) {
            throw new Error('Unable to parse color from object: ' + JSON.stringify(obj));
        }
        this.model = hashedModelKeys[hashedKeys];
        var labels = convert[this.model].labels;
        var color = [];
        for(i = 0; i < labels.length; i++){
            color.push(obj[labels[i]]);
        }
        this.color = zeroArray(color);
    }
    // perform limitations (clamping, etc.)
    if (limiters[this.model]) {
        channels = convert[this.model].channels;
        for(i = 0; i < channels; i++){
            var limit = limiters[this.model][i];
            if (limit) {
                this.color[i] = limit(this.color[i]);
            }
        }
    }
    this.valpha = Math.max(0, Math.min(1, this.valpha));
    if (Object.freeze) {
        Object.freeze(this);
    }
}
Color.prototype = {
    toString: function toString() {
        return this.string();
    },
    toJSON: function toJSON() {
        return this[this.model]();
    },
    string: function string(places) {
        var self = this.model in colorString.to ? this : this.rgb();
        self = self.round(typeof places === 'number' ? places : 1);
        var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
        return colorString.to[self.model](args);
    },
    percentString: function percentString(places) {
        var self = this.rgb().round(typeof places === 'number' ? places : 1);
        var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
        return colorString.to.rgb.percent(args);
    },
    array: function array() {
        return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
    },
    object: function object() {
        var result = {};
        var channels = convert[this.model].channels;
        var labels = convert[this.model].labels;
        for(var i = 0; i < channels; i++){
            result[labels[i]] = this.color[i];
        }
        if (this.valpha !== 1) {
            result.alpha = this.valpha;
        }
        return result;
    },
    unitArray: function unitArray() {
        var rgb = this.rgb().color;
        rgb[0] /= 255;
        rgb[1] /= 255;
        rgb[2] /= 255;
        if (this.valpha !== 1) {
            rgb.push(this.valpha);
        }
        return rgb;
    },
    unitObject: function unitObject() {
        var rgb = this.rgb().object();
        rgb.r /= 255;
        rgb.g /= 255;
        rgb.b /= 255;
        if (this.valpha !== 1) {
            rgb.alpha = this.valpha;
        }
        return rgb;
    },
    round: function round(places) {
        places = Math.max(places || 0, 0);
        return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
    },
    alpha: function alpha(val) {
        if (arguments.length) {
            return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
        }
        return this.valpha;
    },
    // rgb
    red: getset('rgb', 0, maxfn(255)),
    green: getset('rgb', 1, maxfn(255)),
    blue: getset('rgb', 2, maxfn(255)),
    hue: getset([
        'hsl',
        'hsv',
        'hsl',
        'hwb',
        'hcg'
    ], 0, function(val) {
        return (val % 360 + 360) % 360;
    }),
    saturationl: getset('hsl', 1, maxfn(100)),
    lightness: getset('hsl', 2, maxfn(100)),
    saturationv: getset('hsv', 1, maxfn(100)),
    value: getset('hsv', 2, maxfn(100)),
    chroma: getset('hcg', 1, maxfn(100)),
    gray: getset('hcg', 2, maxfn(100)),
    white: getset('hwb', 1, maxfn(100)),
    wblack: getset('hwb', 2, maxfn(100)),
    cyan: getset('cmyk', 0, maxfn(100)),
    magenta: getset('cmyk', 1, maxfn(100)),
    yellow: getset('cmyk', 2, maxfn(100)),
    black: getset('cmyk', 3, maxfn(100)),
    x: getset('xyz', 0, maxfn(100)),
    y: getset('xyz', 1, maxfn(100)),
    z: getset('xyz', 2, maxfn(100)),
    l: getset('lab', 0, maxfn(100)),
    a: getset('lab', 1),
    b: getset('lab', 2),
    keyword: function keyword(val) {
        if (arguments.length) {
            return new Color(val);
        }
        return convert[this.model].keyword(this.color);
    },
    hex: function hex(val) {
        if (arguments.length) {
            return new Color(val);
        }
        return colorString.to.hex(this.rgb().round().color);
    },
    rgbNumber: function rgbNumber() {
        var rgb = this.rgb().color;
        return (rgb[0] & 0xFF) << 16 | (rgb[1] & 0xFF) << 8 | rgb[2] & 0xFF;
    },
    luminosity: function luminosity() {
        // http://www.w3.org/TR/WCAG20/#relativeluminancedef
        var rgb = this.rgb().color;
        var lum = [];
        for(var i = 0; i < rgb.length; i++){
            var chan = rgb[i] / 255;
            lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
        }
        return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
    },
    contrast: function contrast(color2) {
        // http://www.w3.org/TR/WCAG20/#contrast-ratiodef
        var lum1 = this.luminosity();
        var lum2 = color2.luminosity();
        if (lum1 > lum2) {
            return (lum1 + 0.05) / (lum2 + 0.05);
        }
        return (lum2 + 0.05) / (lum1 + 0.05);
    },
    level: function level(color2) {
        var contrastRatio = this.contrast(color2);
        if (contrastRatio >= 7.1) {
            return 'AAA';
        }
        return contrastRatio >= 4.5 ? 'AA' : '';
    },
    isDark: function isDark() {
        // YIQ equation from http://24ways.org/2010/calculating-color-contrast
        var rgb = this.rgb().color;
        var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
        return yiq < 128;
    },
    isLight: function isLight() {
        return !this.isDark();
    },
    negate: function negate() {
        var rgb = this.rgb();
        for(var i = 0; i < 3; i++){
            rgb.color[i] = 255 - rgb.color[i];
        }
        return rgb;
    },
    lighten: function lighten(ratio) {
        var hsl = this.hsl();
        hsl.color[2] += hsl.color[2] * ratio;
        return hsl;
    },
    darken: function darken(ratio) {
        var hsl = this.hsl();
        hsl.color[2] -= hsl.color[2] * ratio;
        return hsl;
    },
    saturate: function saturate(ratio) {
        var hsl = this.hsl();
        hsl.color[1] += hsl.color[1] * ratio;
        return hsl;
    },
    desaturate: function desaturate(ratio) {
        var hsl = this.hsl();
        hsl.color[1] -= hsl.color[1] * ratio;
        return hsl;
    },
    whiten: function whiten(ratio) {
        var hwb = this.hwb();
        hwb.color[1] += hwb.color[1] * ratio;
        return hwb;
    },
    blacken: function blacken(ratio) {
        var hwb = this.hwb();
        hwb.color[2] += hwb.color[2] * ratio;
        return hwb;
    },
    grayscale: function grayscale() {
        // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
        var rgb = this.rgb().color;
        var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
        return Color.rgb(val, val, val);
    },
    fade: function fade(ratio) {
        return this.alpha(this.valpha - this.valpha * ratio);
    },
    opaquer: function opaquer(ratio) {
        return this.alpha(this.valpha + this.valpha * ratio);
    },
    rotate: function rotate(degrees) {
        var hsl = this.hsl();
        var hue = hsl.color[0];
        hue = (hue + degrees) % 360;
        hue = hue < 0 ? 360 + hue : hue;
        hsl.color[0] = hue;
        return hsl;
    },
    mix: function mix(mixinColor, weight) {
        // ported from sass implementation in C
        // https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
        if (!mixinColor || !mixinColor.rgb) {
            throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + (typeof mixinColor === "undefined" ? "undefined" : _type_of._(mixinColor)));
        }
        var color1 = mixinColor.rgb();
        var color2 = this.rgb();
        var p = weight === undefined ? 0.5 : weight;
        var w = 2 * p - 1;
        var a = color1.alpha() - color2.alpha();
        var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
        var w2 = 1 - w1;
        return Color.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue(), color1.alpha() * p + color2.alpha() * (1 - p));
    }
};
// model conversion methods and static constructors
Object.keys(convert).forEach(function(model) {
    if (skippedModels.indexOf(model) !== -1) {
        return;
    }
    var channels = convert[model].channels;
    // conversion methods
    Color.prototype[model] = function() {
        if (this.model === model) {
            return new Color(this);
        }
        if (arguments.length) {
            return new Color(arguments, model);
        }
        var newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;
        return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);
    };
    // 'static' construction methods
    Color[model] = function(color) {
        if (typeof color === 'number') {
            color = zeroArray(_slice.call(arguments), channels);
        }
        return new Color(color, model);
    };
});
function roundTo(num, places) {
    return Number(num.toFixed(places));
}
function roundToPlace(places) {
    return function(num) {
        return roundTo(num, places);
    };
}
function getset(model, channel, modifier) {
    model = Array.isArray(model) ? model : [
        model
    ];
    model.forEach(function(m) {
        (limiters[m] || (limiters[m] = []))[channel] = modifier;
    });
    model = model[0];
    return function(val) {
        var result;
        if (arguments.length) {
            if (modifier) {
                val = modifier(val);
            }
            result = this[model]();
            result.color[channel] = val;
            return result;
        }
        result = this[model]().color[channel];
        if (modifier) {
            result = modifier(result);
        }
        return result;
    };
}
function maxfn(max) {
    return function(v) {
        return Math.max(0, Math.min(max, v));
    };
}
function assertArray(val) {
    return Array.isArray(val) ? val : [
        val
    ];
}
function zeroArray(arr, length) {
    for(var i = 0; i < length; i++){
        if (typeof arr[i] !== 'number') {
            arr[i] = 0;
        }
    }
    return arr;
}
module.exports = Color;


}),
"95780": (function (module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _type_of = __webpack_require__(15576);
(function(global, factory) {
    ( false ? 0 : _type_of._(exports)) === 'object' && 'object' !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.deepmerge = factory());
})(void 0, function() {
    'use strict';
    var isMergeableObject = function isMergeableObject(value) {
        return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
        return !!value && (typeof value === "undefined" ? "undefined" : _type_of._(value)) === 'object';
    }
    function isSpecial(value) {
        var stringValue = Object.prototype.toString.call(value);
        return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
    }
    // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
    var canUseSymbol = typeof Symbol === 'function' && Symbol["for"];
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol["for"]('react.element') : 0xeac7;
    function isReactElement(value) {
        return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
        return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
        return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target, source, options) {
        return target.concat(source).map(function(element) {
            return cloneUnlessOtherwiseSpecified(element, options);
        });
    }
    function getMergeFunction(key, options) {
        if (!options.customMerge) {
            return deepmerge;
        }
        var customMerge = options.customMerge(key);
        return typeof customMerge === 'function' ? customMerge : deepmerge;
    }
    function getEnumerableOwnPropertySymbols(target) {
        return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
            return target.propertyIsEnumerable(symbol);
        }) : [];
    }
    function getKeys(target) {
        return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function mergeObject(target, source, options) {
        var destination = {};
        if (options.isMergeableObject(target)) {
            getKeys(target).forEach(function(key) {
                destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
            });
        }
        getKeys(source).forEach(function(key) {
            if (!options.isMergeableObject(source[key]) || !target[key]) {
                destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
            } else {
                destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
            }
        });
        return destination;
    }
    function deepmerge(target, source, options) {
        options = options || {};
        options.arrayMerge = options.arrayMerge || defaultArrayMerge;
        options.isMergeableObject = options.isMergeableObject || isMergeableObject;
        var sourceIsArray = Array.isArray(source);
        var targetIsArray = Array.isArray(target);
        var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
        if (!sourceAndTargetTypesMatch) {
            return cloneUnlessOtherwiseSpecified(source, options);
        } else if (sourceIsArray) {
            return options.arrayMerge(target, source, options);
        } else {
            return mergeObject(target, source, options);
        }
    }
    deepmerge.all = function deepmergeAll(array, options) {
        if (!Array.isArray(array)) {
            throw new Error('first argument should be an array');
        }
        return array.reduce(function(prev, next) {
            return deepmerge(prev, next, options);
        }, {});
    };
    var deepmerge_1 = deepmerge;
    return deepmerge_1;
});


}),
"76226": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";

var reactIs = __webpack_require__(57555);
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */ var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};
var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};
var FORWARD_REF_STATICS = {
    $$typeof: true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
};
var MEMO_STATICS = {
    $$typeof: true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
    } // React v16.12 and above
    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components
        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for(var i = 0; i < keys.length; ++i){
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }
    }
    return targetComponent;
}
module.exports = hoistNonReactStatics;


}),
"8759": (function (module) {
module.exports = function isArrayish(obj) {
    if (!obj || typeof obj === 'string') {
        return false;
    }
    return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== 'String');
};


}),
"41853": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var _type_of = __webpack_require__(15576);
var b = "function" === typeof Symbol && Symbol["for"], c = b ? Symbol["for"]("react.element") : 60103, d = b ? Symbol["for"]("react.portal") : 60106, e = b ? Symbol["for"]("react.fragment") : 60107, f = b ? Symbol["for"]("react.strict_mode") : 60108, g = b ? Symbol["for"]("react.profiler") : 60114, h = b ? Symbol["for"]("react.provider") : 60109, k = b ? Symbol["for"]("react.context") : 60110, l = b ? Symbol["for"]("react.async_mode") : 60111, m = b ? Symbol["for"]("react.concurrent_mode") : 60111, n = b ? Symbol["for"]("react.forward_ref") : 60112, p = b ? Symbol["for"]("react.suspense") : 60113, q = b ? Symbol["for"]("react.suspense_list") : 60120, r = b ? Symbol["for"]("react.memo") : 60115, t = b ? Symbol["for"]("react.lazy") : 60116, v = b ? Symbol["for"]("react.block") : 60121, w = b ? Symbol["for"]("react.fundamental") : 60117, x = b ? Symbol["for"]("react.responder") : 60118, y = b ? Symbol["for"]("react.scope") : 60119;
function z(a) {
    if ("object" === (typeof a === "undefined" ? "undefined" : _type_of._(a)) && null !== a) {
        var u = a.$$typeof;
        switch(u){
            case c:
                switch(a = a.type, a){
                    case l:
                    case m:
                    case e:
                    case g:
                    case f:
                    case p:
                        return a;
                    default:
                        switch(a = a && a.$$typeof, a){
                            case k:
                            case n:
                            case t:
                            case r:
                            case h:
                                return a;
                            default:
                                return u;
                        }
                }
            case d:
                return u;
        }
    }
}
function A(a) {
    return z(a) === m;
}
exports.AsyncMode = l;
exports.ConcurrentMode = m;
exports.ContextConsumer = k;
exports.ContextProvider = h;
exports.Element = c;
exports.ForwardRef = n;
exports.Fragment = e;
exports.Lazy = t;
exports.Memo = r;
exports.Portal = d;
exports.Profiler = g;
exports.StrictMode = f;
exports.Suspense = p;
exports.isAsyncMode = function(a) {
    return A(a) || z(a) === l;
};
exports.isConcurrentMode = A;
exports.isContextConsumer = function(a) {
    return z(a) === k;
};
exports.isContextProvider = function(a) {
    return z(a) === h;
};
exports.isElement = function(a) {
    return "object" === (typeof a === "undefined" ? "undefined" : _type_of._(a)) && null !== a && a.$$typeof === c;
};
exports.isForwardRef = function(a) {
    return z(a) === n;
};
exports.isFragment = function(a) {
    return z(a) === e;
};
exports.isLazy = function(a) {
    return z(a) === t;
};
exports.isMemo = function(a) {
    return z(a) === r;
};
exports.isPortal = function(a) {
    return z(a) === d;
};
exports.isProfiler = function(a) {
    return z(a) === g;
};
exports.isStrictMode = function(a) {
    return z(a) === f;
};
exports.isSuspense = function(a) {
    return z(a) === p;
};
exports.isValidElementType = function(a) {
    return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === (typeof a === "undefined" ? "undefined" : _type_of._(a)) && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
};
exports.typeOf = z;


}),
"57555": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";

if (true) {
    module.exports = __webpack_require__(41853);
} else {}


}),
"44749": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";

var isArrayish = __webpack_require__(8759);
var concat = Array.prototype.concat;
var slice = Array.prototype.slice;
var swizzle = module.exports = function swizzle(args) {
    var results = [];
    for(var i = 0, len = args.length; i < len; i++){
        var arg = args[i];
        if (isArrayish(arg)) {
            // http://jsperf.com/javascript-array-concat-vs-push/98
            results = concat.call(results, slice.call(arg));
        } else {
            results.push(arg);
        }
    }
    return results;
};
swizzle.wrap = function(fn) {
    return function() {
        return fn(swizzle(arguments));
    };
};


}),
"20249": (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

var __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function get() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = (void 0) && (void 0).__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var React = __importStar(__webpack_require__(84816));
var useIsomorphicLayoutEffect = typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect;
/**
 * React hook which returns the latest callback without changing the reference.
 */ function useLatestCallback(callback) {
    var ref = React.useRef(callback);
    var latestCallback = React.useRef(function latestCallback() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++){
            args[_i] = arguments[_i];
        }
        // eslint-disable-next-line babel/no-invalid-this
        return ref.current.apply(this, args);
    }).current;
    useIsomorphicLayoutEffect(function() {
        ref.current = callback;
    });
    return latestCallback;
}
exports["default"] = useLatestCallback;


}),
"59545": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _Appbar = /*#__PURE__*/ _interop_require_default._(__webpack_require__(26882));
var _AppbarAction = /*#__PURE__*/ _interop_require_default._(__webpack_require__(45019));
var _AppbarBackAction = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79407));
var _AppbarContent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4214));
var _AppbarHeader = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47476));
var Appbar = Object.assign(// @component ./Appbar.tsx
_Appbar.default, {
    // @component ./AppbarContent.tsx
    Content: _AppbarContent.default,
    // @component ./AppbarAction.tsx
    Action: _AppbarAction.default,
    // @component ./AppbarBackAction.tsx
    BackAction: _AppbarBackAction.default,
    // @component ./AppbarHeader.tsx
    Header: _AppbarHeader.default
});
var _default = Appbar;


}),
"30712": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DEFAULT_APPBAR_HEIGHT: function() {
        return DEFAULT_APPBAR_HEIGHT;
    },
    getAppbarBackgroundColor: function() {
        return getAppbarBackgroundColor;
    },
    getAppbarBorders: function() {
        return getAppbarBorders;
    },
    getAppbarColor: function() {
        return getAppbarColor;
    },
    modeAppbarHeight: function() {
        return modeAppbarHeight;
    },
    modeTextVariant: function() {
        return modeTextVariant;
    },
    renderAppbarContent: function() {
        return renderAppbarContent;
    }
});
var _interop_require_default = __webpack_require__(60133);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _overlay = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87701));
var _colors = __webpack_require__(18847);
var borderStyleProperties = [
    'borderRadius',
    'borderTopLeftRadius',
    'borderTopRightRadius',
    'borderBottomRightRadius',
    'borderBottomLeftRadius'
];
var getAppbarBackgroundColor = function(theme, elevation, customBackground, elevated) {
    var isV3 = theme.isV3, isDarkTheme = theme.dark, mode = theme.mode, colors = theme.colors;
    var isAdaptiveMode = mode === 'adaptive';
    if (customBackground) {
        return customBackground;
    }
    if (!isV3) {
        if (isDarkTheme && isAdaptiveMode) {
            return (0, _overlay.default)(elevation, colors == null ? void 0 : colors.surface);
        }
        return colors.primary;
    }
    if (elevated) {
        return theme.colors.elevation.level2;
    }
    return colors.surface;
};
var getAppbarColor = function(param) {
    var color = param.color, isDark = param.isDark, isV3 = param.isV3;
    if (typeof color !== 'undefined') {
        return color;
    }
    if (isDark) {
        return _colors.white;
    }
    if (isV3) {
        return undefined;
    }
    return _colors.black;
};
var getAppbarBorders = function(style) {
    var borders = {};
    for(var _i = 0; _i < borderStyleProperties.length; _i++){
        var property = borderStyleProperties[_i];
        var value = style[property];
        if (value) {
            borders[property] = value;
        }
    }
    return borders;
};
var DEFAULT_APPBAR_HEIGHT = 56;
var MD3_DEFAULT_APPBAR_HEIGHT = 64;
var modeAppbarHeight = {
    small: MD3_DEFAULT_APPBAR_HEIGHT,
    medium: 112,
    large: 152,
    'center-aligned': MD3_DEFAULT_APPBAR_HEIGHT
};
var modeTextVariant = {
    small: 'titleLarge',
    medium: 'headlineSmall',
    large: 'headlineMedium',
    'center-aligned': 'titleLarge'
};
var renderAppbarContent = function(param) {
    var children = param.children, isDark = param.isDark, _param_shouldCenterContent = param.shouldCenterContent, shouldCenterContent = _param_shouldCenterContent === void 0 ? false : _param_shouldCenterContent, isV3 = param.isV3, renderOnly = param.renderOnly, renderExcept = param.renderExcept, _param_mode = param.mode, mode = _param_mode === void 0 ? 'small' : _param_mode, theme = param.theme;
    return _react.default.Children.toArray(children).filter(function(child) {
        return child != null && typeof child !== 'boolean';
    }).filter(function(child) {
        return(// @ts-expect-error: TypeScript complains about the type of type but it doesn't matter
        renderExcept ? !renderExcept.includes(child.type.displayName) : child);
    }).filter(function(child) {
        return(// @ts-expect-error: TypeScript complains about the type of type but it doesn't matter
        renderOnly ? renderOnly.includes(child.type.displayName) : child);
    }).map(function(child, i) {
        if (!_react.default.isValidElement(child) || ![
            'Appbar.Content',
            'Appbar.Action',
            'Appbar.BackAction',
            'Tooltip'
        ].includes(// @ts-expect-error: TypeScript complains about the type of type but it doesn't matter
        child.type.displayName)) {
            return child;
        }
        var props = {
            theme: theme,
            color: getAppbarColor({
                color: child.props.color,
                isDark: isDark,
                isV3: isV3
            })
        };
        // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter
        if (child.type.displayName === 'Appbar.Content') {
            props.mode = mode;
            props.style = [
                isV3 ? i === 0 && !shouldCenterContent && styles.v3Spacing : i !== 0 && styles.v2Spacing,
                shouldCenterContent && styles.centerAlignedContent,
                child.props.style
            ];
            props.color;
        }
        return _react.default.cloneElement(child, props);
    });
};
var styles = _reactnative.StyleSheet.create({
    centerAlignedContent: {
        alignItems: 'center'
    },
    v2Spacing: {
        marginLeft: 8
    },
    v3Spacing: {
        marginLeft: 12
    }
});


}),
"44288": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getActiveTintColor: function() {
        return getActiveTintColor;
    },
    getInactiveTintColor: function() {
        return getInactiveTintColor;
    },
    getLabelColor: function() {
        return getLabelColor;
    }
});
var _interop_require_default = __webpack_require__(60133);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var getActiveTintColor = function(param) {
    var activeColor = param.activeColor, defaultColor = param.defaultColor, theme = param.theme;
    if (typeof activeColor === 'string') {
        return activeColor;
    }
    if (theme.isV3) {
        return theme.colors.onSecondaryContainer;
    }
    return defaultColor;
};
var getInactiveTintColor = function(param) {
    var inactiveColor = param.inactiveColor, defaultColor = param.defaultColor, theme = param.theme;
    if (typeof inactiveColor === 'string') {
        return inactiveColor;
    }
    if (theme.isV3) {
        return theme.colors.onSurfaceVariant;
    }
    return (0, _color.default)(defaultColor).alpha(0.5).rgb().string();
};
var getLabelColor = function(param) {
    var tintColor = param.tintColor, hasColor = param.hasColor, focused = param.focused, defaultColor = param.defaultColor, theme = param.theme;
    if (hasColor) {
        return tintColor;
    }
    if (theme.isV3) {
        if (focused) {
            return theme.colors.onSurface;
        }
        return theme.colors.onSurfaceVariant;
    }
    return defaultColor;
};


}),
"7115": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _Checkbox = /*#__PURE__*/ _interop_require_default._(__webpack_require__(26513));
var _CheckboxAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(61358));
var _CheckboxIOS = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83430));
var _CheckboxItem = /*#__PURE__*/ _interop_require_default._(__webpack_require__(39673));
var Checkbox = Object.assign(// @component ./Checkbox.tsx
_Checkbox.default, {
    // @component ./CheckboxItem.tsx
    Item: _CheckboxItem.default,
    // @component ./CheckboxAndroid.tsx
    Android: _CheckboxAndroid.default,
    // @component ./CheckboxIOS.tsx
    IOS: _CheckboxIOS.default
});
var _default = Checkbox;


}),
"9832": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getAndroidSelectionControlColor: function() {
        return getAndroidSelectionControlColor;
    },
    getSelectionControlIOSColor: function() {
        return getSelectionControlIOSColor;
    }
});
var _interop_require_default = __webpack_require__(60133);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var getAndroidCheckedColor = function(param) {
    var theme = param.theme, customColor = param.customColor;
    if (customColor) {
        return customColor;
    }
    if (theme.isV3) {
        return theme.colors.primary;
    }
    return theme.colors.accent;
};
var getAndroidUncheckedColor = function(param) {
    var theme = param.theme, customUncheckedColor = param.customUncheckedColor;
    if (customUncheckedColor) {
        return customUncheckedColor;
    }
    if (theme.isV3) {
        return theme.colors.onSurfaceVariant;
    }
    if (theme.dark) {
        return (0, _color.default)(theme.colors.text).alpha(0.7).rgb().string();
    }
    return (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
};
var getAndroidRippleColor = function(param) {
    var theme = param.theme, checkedColor = param.checkedColor, disabled = param.disabled;
    if (disabled) {
        if (theme.isV3) {
            return (0, _color.default)(theme.colors.onSurface).alpha(0.16).rgb().string();
        }
        return (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();
    }
    return (0, _color.default)(checkedColor).fade(0.32).rgb().string();
};
var getAndroidControlColor = function(param) {
    var theme = param.theme, checked = param.checked, disabled = param.disabled, checkedColor = param.checkedColor, uncheckedColor = param.uncheckedColor;
    if (disabled) {
        if (theme.isV3) {
            return theme.colors.onSurfaceDisabled;
        }
        return theme.colors.disabled;
    }
    if (checked) {
        return checkedColor;
    }
    return uncheckedColor;
};
var getAndroidSelectionControlColor = function(param) {
    var theme = param.theme, disabled = param.disabled, checked = param.checked, customColor = param.customColor, customUncheckedColor = param.customUncheckedColor;
    var checkedColor = getAndroidCheckedColor({
        theme: theme,
        customColor: customColor
    });
    var uncheckedColor = getAndroidUncheckedColor({
        theme: theme,
        customUncheckedColor: customUncheckedColor
    });
    return {
        rippleColor: getAndroidRippleColor({
            theme: theme,
            checkedColor: checkedColor,
            disabled: disabled
        }),
        selectionControlColor: getAndroidControlColor({
            theme: theme,
            disabled: disabled,
            checked: checked,
            checkedColor: checkedColor,
            uncheckedColor: uncheckedColor
        })
    };
};
var getIOSCheckedColor = function(param) {
    var theme = param.theme, disabled = param.disabled, customColor = param.customColor;
    if (disabled) {
        if (theme.isV3) {
            return theme.colors.onSurfaceDisabled;
        }
        return theme.colors.disabled;
    }
    if (customColor) {
        return customColor;
    }
    if (theme.isV3) {
        return theme.colors.primary;
    }
    return theme.colors.accent;
};
var getIOSRippleColor = function(param) {
    var theme = param.theme, checkedColor = param.checkedColor, disabled = param.disabled;
    if (disabled) {
        if (theme.isV3) {
            return (0, _color.default)(theme.colors.onSurface).alpha(0.16).rgb().string();
        }
        return (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();
    }
    return (0, _color.default)(checkedColor).fade(0.32).rgb().string();
};
var getSelectionControlIOSColor = function(param) {
    var theme = param.theme, disabled = param.disabled, customColor = param.customColor;
    var checkedColor = getIOSCheckedColor({
        theme: theme,
        disabled: disabled,
        customColor: customColor
    });
    return {
        checkedColor: checkedColor,
        rippleColor: getIOSRippleColor({
            theme: theme,
            checkedColor: checkedColor,
            disabled: disabled
        })
    };
};


}),
"35450": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _FAB = /*#__PURE__*/ _interop_require_default._(__webpack_require__(95317));
var _FABGroup = /*#__PURE__*/ _interop_require_default._(__webpack_require__(81094));
var FAB = Object.assign(// @component ./FAB.tsx
_FAB.default, {
    // @component ./FABGroup.tsx
    Group: _FABGroup.default
});
var _default = FAB;


}),
"71116": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getCombinedStyles: function() {
        return getCombinedStyles;
    },
    getExtendedFabStyle: function() {
        return getExtendedFabStyle;
    },
    getFABColors: function() {
        return getFABColors;
    },
    getFABGroupColors: function() {
        return getFABGroupColors;
    },
    getFabStyle: function() {
        return getFabStyle;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _colors = __webpack_require__(18847);
var _getContrastingColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17362));
var getCombinedStyles = function(param) {
    var isAnimatedFromRight = param.isAnimatedFromRight, isIconStatic = param.isIconStatic, distance = param.distance, animFAB = param.animFAB;
    var isRTL = _reactnative.I18nManager.isRTL;
    var defaultPositionStyles = {
        left: -distance,
        right: undefined
    };
    var combinedStyles = {
        innerWrapper: _extends._({}, defaultPositionStyles),
        iconWrapper: _extends._({}, defaultPositionStyles),
        absoluteFill: {}
    };
    var animatedFromRight = isAnimatedFromRight && !isRTL;
    var animatedFromRightRTL = isAnimatedFromRight && isRTL;
    var animatedFromLeft = !isAnimatedFromRight && !isRTL;
    var animatedFromLeftRTL = !isAnimatedFromRight && isRTL;
    if (animatedFromRight) {
        combinedStyles.innerWrapper.transform = [
            {
                translateX: animFAB.interpolate({
                    inputRange: [
                        distance,
                        0
                    ],
                    outputRange: [
                        distance,
                        0
                    ]
                })
            }
        ];
        combinedStyles.iconWrapper.transform = [
            {
                translateX: isIconStatic ? 0 : animFAB
            }
        ];
        combinedStyles.absoluteFill.transform = [
            {
                translateX: animFAB.interpolate({
                    inputRange: [
                        distance,
                        0
                    ],
                    outputRange: [
                        Math.abs(distance) / 2,
                        Math.abs(distance)
                    ]
                })
            }
        ];
    } else if (animatedFromRightRTL) {
        combinedStyles.iconWrapper.transform = [
            {
                translateX: isIconStatic ? 0 : animFAB.interpolate({
                    inputRange: [
                        distance,
                        0
                    ],
                    outputRange: [
                        -distance,
                        0
                    ]
                })
            }
        ];
        combinedStyles.innerWrapper.transform = [
            {
                translateX: animFAB.interpolate({
                    inputRange: [
                        distance,
                        0
                    ],
                    outputRange: [
                        -distance,
                        0
                    ]
                })
            }
        ];
        combinedStyles.absoluteFill.transform = [
            {
                translateX: animFAB.interpolate({
                    inputRange: [
                        distance,
                        0
                    ],
                    outputRange: [
                        0,
                        distance
                    ]
                })
            }
        ];
    } else if (animatedFromLeft) {
        combinedStyles.iconWrapper.transform = [
            {
                translateX: isIconStatic ? distance : animFAB.interpolate({
                    inputRange: [
                        0,
                        distance
                    ],
                    outputRange: [
                        distance,
                        distance * 2
                    ]
                })
            }
        ];
        combinedStyles.innerWrapper.transform = [
            {
                translateX: animFAB
            }
        ];
        combinedStyles.absoluteFill.transform = [
            {
                translateX: animFAB.interpolate({
                    inputRange: [
                        0,
                        distance
                    ],
                    outputRange: [
                        0,
                        Math.abs(distance) / 2
                    ]
                })
            }
        ];
    } else if (animatedFromLeftRTL) {
        combinedStyles.iconWrapper.transform = [
            {
                translateX: isIconStatic ? animFAB.interpolate({
                    inputRange: [
                        0,
                        distance
                    ],
                    outputRange: [
                        -distance,
                        -distance * 2
                    ]
                }) : -distance
            }
        ];
        combinedStyles.innerWrapper.transform = [
            {
                translateX: animFAB.interpolate({
                    inputRange: [
                        0,
                        distance
                    ],
                    outputRange: [
                        0,
                        -distance
                    ]
                })
            }
        ];
        combinedStyles.absoluteFill.transform = [
            {
                translateX: animFAB.interpolate({
                    inputRange: [
                        0,
                        distance
                    ],
                    outputRange: [
                        0,
                        -distance
                    ]
                })
            }
        ];
    }
    return combinedStyles;
};
var getBackgroundColor = function(param) {
    var theme = param.theme, isVariant = param.isVariant, disabled = param.disabled, customBackgroundColor = param.customBackgroundColor;
    var _theme_colors;
    if (customBackgroundColor && !disabled) {
        return customBackgroundColor;
    }
    if (theme.isV3) {
        if (disabled) {
            return theme.colors.surfaceDisabled;
        }
        if (isVariant('primary')) {
            return theme.colors.primaryContainer;
        }
        if (isVariant('secondary')) {
            return theme.colors.secondaryContainer;
        }
        if (isVariant('tertiary')) {
            return theme.colors.tertiaryContainer;
        }
        if (isVariant('surface')) {
            return theme.colors.elevation.level3;
        }
    }
    if (disabled) {
        if (theme.dark) {
            return (0, _color.default)(_colors.white).alpha(0.12).rgb().string();
        }
        return (0, _color.default)(_colors.black).alpha(0.12).rgb().string();
    }
    //@ts-ignore
    return (_theme_colors = theme.colors) == null ? void 0 : _theme_colors.accent;
};
var getForegroundColor = function(param) {
    var theme = param.theme, isVariant = param.isVariant, disabled = param.disabled, backgroundColor = param.backgroundColor, customColor = param.customColor;
    if (typeof customColor !== 'undefined' && !disabled) {
        return customColor;
    }
    if (theme.isV3) {
        if (disabled) {
            return theme.colors.onSurfaceDisabled;
        }
        if (isVariant('primary')) {
            return theme.colors.onPrimaryContainer;
        }
        if (isVariant('secondary')) {
            return theme.colors.onSecondaryContainer;
        }
        if (isVariant('tertiary')) {
            return theme.colors.onTertiaryContainer;
        }
        if (isVariant('surface')) {
            return theme.colors.primary;
        }
    }
    if (disabled) {
        if (theme.dark) {
            return (0, _color.default)(_colors.white).alpha(0.32).rgb().string();
        }
        return (0, _color.default)(_colors.black).alpha(0.32).rgb().string();
    }
    if (backgroundColor) {
        return (0, _getContrastingColor.default)(backgroundColor || _colors.white, _colors.white, 'rgba(0, 0, 0, .54)');
    }
    return (0, _getContrastingColor.default)(_colors.white, _colors.white, 'rgba(0, 0, 0, .54)');
};
var getFABColors = function(param) {
    var theme = param.theme, variant = param.variant, disabled = param.disabled, customColor = param.customColor, customBackgroundColor = param.customBackgroundColor, customRippleColor = param.customRippleColor;
    var isVariant = function(variantToCompare) {
        return variant === variantToCompare;
    };
    var baseFABColorProps = {
        theme: theme,
        isVariant: isVariant,
        disabled: disabled
    };
    var backgroundColor = getBackgroundColor(_extends._({}, baseFABColorProps, {
        customBackgroundColor: customBackgroundColor
    }));
    var foregroundColor = getForegroundColor(_extends._({}, baseFABColorProps, {
        customColor: customColor,
        backgroundColor: backgroundColor
    }));
    return {
        backgroundColor: backgroundColor,
        foregroundColor: foregroundColor,
        rippleColor: customRippleColor || (0, _color.default)(foregroundColor).alpha(0.12).rgb().string()
    };
};
var getLabelColor = function(param) {
    var theme = param.theme;
    if (theme.isV3) {
        return theme.colors.onSurface;
    }
    if (theme.dark) {
        return theme.colors.text;
    }
    return (0, _color.default)(theme.colors.text).fade(0.54).rgb().string();
};
var getBackdropColor = function(param) {
    var theme = param.theme, customBackdropColor = param.customBackdropColor;
    var _theme_colors;
    if (customBackdropColor) {
        return customBackdropColor;
    }
    if (theme.isV3) {
        return (0, _color.default)(theme.colors.background).alpha(0.95).rgb().string();
    }
    return (_theme_colors = theme.colors) == null ? void 0 : _theme_colors.backdrop;
};
var getStackedFABBackgroundColor = function(param) {
    var theme = param.theme;
    if (theme.isV3) {
        return theme.colors.elevation.level3;
    }
    return theme.colors.surface;
};
var getFABGroupColors = function(param) {
    var theme = param.theme, customBackdropColor = param.customBackdropColor;
    return {
        labelColor: getLabelColor({
            theme: theme
        }),
        backdropColor: getBackdropColor({
            theme: theme,
            customBackdropColor: customBackdropColor
        }),
        stackedFABBackgroundColor: getStackedFABBackgroundColor({
            theme: theme
        })
    };
};
var standardSize = {
    height: 56,
    width: 56,
    borderRadius: 28
};
var smallSize = {
    height: 40,
    width: 40,
    borderRadius: 28
};
var v3SmallSize = {
    height: 40,
    width: 40
};
var v3MediumSize = {
    height: 56,
    width: 56
};
var v3LargeSize = {
    height: 96,
    width: 96
};
var getCustomFabSize = function(customSize, roundness) {
    return {
        height: customSize,
        width: customSize,
        borderRadius: roundness === 0 ? 0 : customSize / roundness
    };
};
var getFabStyle = function(param) {
    var size = param.size, theme = param.theme, customSize = param.customSize;
    var isV3 = theme.isV3, roundness = theme.roundness;
    if (customSize) return getCustomFabSize(customSize, roundness);
    if (isV3) {
        switch(size){
            case 'small':
                return _extends._({}, v3SmallSize, {
                    borderRadius: 3 * roundness
                });
            case 'medium':
                return _extends._({}, v3MediumSize, {
                    borderRadius: 4 * roundness
                });
            case 'large':
                return _extends._({}, v3LargeSize, {
                    borderRadius: 7 * roundness
                });
        }
    }
    if (size === 'small') {
        return smallSize;
    }
    return standardSize;
};
var extended = {
    height: 48,
    paddingHorizontal: 16
};
var v3Extended = {
    height: 56,
    borderRadius: 16,
    paddingHorizontal: 16
};
var getExtendedFabDimensions = function(customSize) {
    return {
        height: customSize,
        paddingHorizontal: 16
    };
};
var getExtendedFabStyle = function(param) {
    var customSize = param.customSize, theme = param.theme;
    if (customSize) return getExtendedFabDimensions(customSize);
    var isV3 = theme.isV3;
    return isV3 ? v3Extended : extended;
};


}),
"34660": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getTextColor", ({
    enumerable: true,
    get: function() {
        return getTextColor;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
function getTextColor(param) {
    var theme = param.theme, disabled = param.disabled, type = param.type;
    var _theme_colors;
    var colors = theme.colors, dark = theme.dark;
    if (type === 'error') {
        return colors == null ? void 0 : colors.error;
    }
    if (theme.isV3) {
        if (disabled) {
            return theme.colors.onSurfaceDisabled;
        } else {
            return theme.colors.onSurfaceVariant;
        }
    }
    return (0, _color.default)(theme == null ? void 0 : (_theme_colors = theme.colors) == null ? void 0 : _theme_colors.text).alpha(dark ? 0.7 : 0.54).rgb().string();
}


}),
"76242": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getIconButtonColor", ({
    enumerable: true,
    get: function() {
        return getIconButtonColor;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var getBorderColor = function(param) {
    var theme = param.theme, disabled = param.disabled;
    if (theme.isV3) {
        if (disabled) {
            return theme.colors.surfaceDisabled;
        }
        return theme.colors.outline;
    }
    return undefined;
};
var getBackgroundColor = function(param) {
    var theme = param.theme, isMode = param.isMode, disabled = param.disabled, selected = param.selected, customContainerColor = param.customContainerColor;
    if (theme.isV3) {
        if (disabled) {
            if (isMode('contained') || isMode('contained-tonal')) {
                return theme.colors.surfaceDisabled;
            }
        }
        if (typeof customContainerColor !== 'undefined') {
            return customContainerColor;
        }
        if (isMode('contained')) {
            if (selected) {
                return theme.colors.primary;
            }
            return theme.colors.surfaceVariant;
        }
        if (isMode('contained-tonal')) {
            if (selected) {
                return theme.colors.secondaryContainer;
            }
            return theme.colors.surfaceVariant;
        }
        if (isMode('outlined')) {
            if (selected) {
                return theme.colors.inverseSurface;
            }
        }
    }
    if (typeof customContainerColor !== 'undefined') {
        return customContainerColor;
    }
    return undefined;
};
var getIconColor = function(param) {
    var theme = param.theme, isMode = param.isMode, disabled = param.disabled, selected = param.selected, customIconColor = param.customIconColor;
    if (theme.isV3) {
        if (disabled) {
            return theme.colors.onSurfaceDisabled;
        }
        if (typeof customIconColor !== 'undefined') {
            return customIconColor;
        }
        if (isMode('contained')) {
            if (selected) {
                return theme.colors.onPrimary;
            }
            return theme.colors.primary;
        }
        if (isMode('contained-tonal')) {
            if (selected) {
                return theme.colors.onSecondaryContainer;
            }
            return theme.colors.onSurfaceVariant;
        }
        if (isMode('outlined')) {
            if (selected) {
                return theme.colors.inverseOnSurface;
            }
            return theme.colors.onSurfaceVariant;
        }
        if (selected) {
            return theme.colors.primary;
        }
        return theme.colors.onSurfaceVariant;
    }
    if (typeof customIconColor !== 'undefined') {
        return customIconColor;
    }
    return theme.colors.text;
};
var getRippleColor = function(param) {
    var theme = param.theme, iconColor = param.iconColor, customRippleColor = param.customRippleColor;
    if (customRippleColor) {
        return customRippleColor;
    }
    if (theme.isV3) {
        return (0, _color.default)(iconColor).alpha(0.12).rgb().string();
    }
    return (0, _color.default)(iconColor).alpha(0.32).rgb().string();
};
var getIconButtonColor = function(param) {
    var theme = param.theme, disabled = param.disabled, mode = param.mode, selected = param.selected, customIconColor = param.customIconColor, customContainerColor = param.customContainerColor, customRippleColor = param.customRippleColor;
    var isMode = function(modeToCompare) {
        return mode === modeToCompare;
    };
    var baseIconColorProps = {
        theme: theme,
        isMode: isMode,
        disabled: disabled,
        selected: selected
    };
    var iconColor = getIconColor(_extends._({}, baseIconColorProps, {
        customIconColor: customIconColor
    }));
    return {
        iconColor: iconColor,
        backgroundColor: getBackgroundColor(_extends._({}, baseIconColorProps, {
            customContainerColor: customContainerColor
        })),
        rippleColor: getRippleColor({
            theme: theme,
            iconColor: iconColor,
            customRippleColor: customRippleColor
        }),
        borderColor: getBorderColor({
            theme: theme,
            disabled: disabled
        })
    };
};


}),
"1071": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getAccordionColors: function() {
        return getAccordionColors;
    },
    getLeftStyles: function() {
        return getLeftStyles;
    },
    getRightStyles: function() {
        return getRightStyles;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var getLeftStyles = function(alignToTop, description, isV3) {
    var stylesV3 = {
        marginRight: 0,
        marginLeft: 16,
        alignSelf: alignToTop ? 'flex-start' : 'center'
    };
    if (!description) {
        return _extends._({}, styles.iconMarginLeft, styles.marginVerticalNone, isV3 && _extends._({}, stylesV3));
    }
    if (!isV3) {
        return styles.iconMarginLeft;
    }
    return _extends._({}, styles.iconMarginLeft, stylesV3);
};
var getRightStyles = function(alignToTop, description, isV3) {
    var stylesV3 = {
        marginLeft: 16,
        alignSelf: alignToTop ? 'flex-start' : 'center'
    };
    if (!description) {
        return _extends._({}, styles.iconMarginRight, styles.marginVerticalNone, isV3 && _extends._({}, stylesV3));
    }
    if (!isV3) {
        return styles.iconMarginRight;
    }
    return _extends._({}, styles.iconMarginRight, stylesV3);
};
var styles = _reactnative.StyleSheet.create({
    marginVerticalNone: {
        marginVertical: 0
    },
    iconMarginLeft: {
        marginLeft: 0,
        marginRight: 16
    },
    iconMarginRight: {
        marginRight: 0
    }
});
var getAccordionColors = function(param) {
    var theme = param.theme, isExpanded = param.isExpanded, customRippleColor = param.customRippleColor;
    var _theme_colors;
    var titleColor = theme.isV3 ? theme.colors.onSurface : (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();
    var descriptionColor = theme.isV3 ? theme.colors.onSurfaceVariant : (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
    var titleTextColor = isExpanded ? (_theme_colors = theme.colors) == null ? void 0 : _theme_colors.primary : titleColor;
    var rippleColor = customRippleColor || (0, _color.default)(titleTextColor).alpha(0.12).rgb().string();
    return {
        titleColor: titleColor,
        descriptionColor: descriptionColor,
        titleTextColor: titleTextColor,
        rippleColor: rippleColor
    };
};


}),
"50187": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    MAX_WIDTH: function() {
        return MAX_WIDTH;
    },
    MIN_WIDTH: function() {
        return MIN_WIDTH;
    },
    getContentMaxWidth: function() {
        return getContentMaxWidth;
    },
    getMenuItemColor: function() {
        return getMenuItemColor;
    }
});
var _interop_require_default = __webpack_require__(60133);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _colors = __webpack_require__(18847);
var MIN_WIDTH = 112;
var MAX_WIDTH = 280;
var getDisabledColor = function(theme) {
    if (theme.isV3) {
        return theme.colors.onSurfaceDisabled;
    }
    return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();
};
var getTitleColor = function(param) {
    var theme = param.theme, disabled = param.disabled;
    if (disabled) {
        return getDisabledColor(theme);
    }
    if (theme.isV3) {
        return theme.colors.onSurface;
    }
    return (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();
};
var getIconColor = function(param) {
    var theme = param.theme, disabled = param.disabled;
    if (disabled) {
        return getDisabledColor(theme);
    }
    if (theme.isV3) {
        return theme.colors.onSurfaceVariant;
    }
    return (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
};
var getRippleColor = function(param) {
    var theme = param.theme, customRippleColor = param.customRippleColor;
    if (customRippleColor) {
        return customRippleColor;
    }
    if (theme.isV3) {
        return (0, _color.default)(theme.colors.onSurfaceVariant).alpha(0.12).rgb().string();
    }
    return undefined;
};
var getMenuItemColor = function(param) {
    var theme = param.theme, disabled = param.disabled, customRippleColor = param.customRippleColor;
    return {
        titleColor: getTitleColor({
            theme: theme,
            disabled: disabled
        }),
        iconColor: getIconColor({
            theme: theme,
            disabled: disabled
        }),
        rippleColor: getRippleColor({
            theme: theme,
            customRippleColor: customRippleColor
        })
    };
};
var getContentMaxWidth = function(param) {
    var isV3 = param.isV3, iconWidth = param.iconWidth, leadingIcon = param.leadingIcon, trailingIcon = param.trailingIcon;
    if (isV3) {
        if (leadingIcon && trailingIcon) {
            return MAX_WIDTH - (2 * iconWidth + 24);
        }
        if (leadingIcon || trailingIcon) {
            return MAX_WIDTH - (iconWidth + 24);
        }
        return MAX_WIDTH - 12;
    }
    if (leadingIcon) {
        return MAX_WIDTH - (iconWidth + 48);
    }
    return MAX_WIDTH - 16;
};


}),
"76372": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _RadioButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(82009));
var _RadioButtonAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(7881));
var _RadioButtonGroup = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76021));
var _RadioButtonIOS = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65143));
var _RadioButtonItem = /*#__PURE__*/ _interop_require_default._(__webpack_require__(55580));
var RadioButton = Object.assign(// @component ./RadioButton.tsx
_RadioButton.default, {
    // @component ./RadioButtonGroup.tsx
    Group: _RadioButtonGroup.default,
    // @component ./RadioButtonAndroid.tsx
    Android: _RadioButtonAndroid.default,
    // @component ./RadioButtonIOS.tsx
    IOS: _RadioButtonIOS.default,
    // @component ./RadioButtonItem.tsx
    Item: _RadioButtonItem.default
});
var _default = RadioButton;


}),
"88375": (function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    handlePress: function() {
        return handlePress;
    },
    isChecked: function() {
        return isChecked;
    }
});
var handlePress = function(param) {
    var onPress = param.onPress, value = param.value, onValueChange = param.onValueChange, event = param.event;
    if (onPress && onValueChange) {
        console.warn("onPress in the scope of RadioButtonGroup will not be executed, use onValueChange instead");
    }
    onValueChange ? onValueChange(value) : onPress == null ? void 0 : onPress(event);
};
var isChecked = function(param) {
    var value = param.value, status = param.status, contextValue = param.contextValue;
    if (contextValue !== undefined && contextValue !== null) {
        return contextValue === value ? 'checked' : 'unchecked';
    } else {
        return status;
    }
};


}),
"25925": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getDisabledSegmentedButtonStyle: function() {
        return getDisabledSegmentedButtonStyle;
    },
    getSegmentedButtonBorderRadius: function() {
        return getSegmentedButtonBorderRadius;
    },
    getSegmentedButtonColors: function() {
        return getSegmentedButtonColors;
    },
    getSegmentedButtonDensityPadding: function() {
        return getSegmentedButtonDensityPadding;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _colors = __webpack_require__(18847);
var DEFAULT_PADDING = 9;
var getSegmentedButtonDensityPadding = function(param) {
    var density = param.density;
    var padding = DEFAULT_PADDING;
    switch(density){
        case 'small':
            return padding - 2;
        case 'medium':
            return padding - 4;
        case 'high':
            return padding - 8;
        default:
            return padding;
    }
};
var getDisabledSegmentedButtonStyle = function(param) {
    var theme = param.theme, index = param.index, buttons = param.buttons;
    var _buttons_index, _buttons_;
    var width = getSegmentedButtonBorderWidth({
        theme: theme
    });
    var isDisabled = (_buttons_index = buttons[index]) == null ? void 0 : _buttons_index.disabled;
    var isNextDisabled = (_buttons_ = buttons[index + 1]) == null ? void 0 : _buttons_.disabled;
    if (!isDisabled && isNextDisabled) {
        return {
            borderRightWidth: width
        };
    }
    return {};
};
var getSegmentedButtonBorderRadius = function(param) {
    var segment = param.segment, theme = param.theme;
    if (segment === 'first') {
        return _extends._({
            borderTopRightRadius: 0,
            borderBottomRightRadius: 0
        }, theme.isV3 && {
            borderRightWidth: 0
        });
    } else if (segment === 'last') {
        return {
            borderTopLeftRadius: 0,
            borderBottomLeftRadius: 0
        };
    } else {
        return _extends._({
            borderRadius: 0
        }, theme.isV3 && {
            borderRightWidth: 0
        });
    }
};
var getSegmentedButtonBackgroundColor = function(param) {
    var checked = param.checked, theme = param.theme;
    if (checked) {
        if (theme.isV3) {
            return theme.colors.secondaryContainer;
        } else {
            return (0, _color.default)(theme.colors.primary).alpha(0.12).rgb().string();
        }
    }
    return 'transparent';
};
var getSegmentedButtonBorderColor = function(param) {
    var theme = param.theme, disabled = param.disabled, checked = param.checked;
    if (theme.isV3) {
        if (disabled) {
            return theme.colors.surfaceDisabled;
        }
        return theme.colors.outline;
    }
    if (checked) {
        return theme.colors.primary;
    }
    return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();
};
var getSegmentedButtonBorderWidth = function(param) {
    var theme = param.theme;
    if (theme.isV3) {
        return 1;
    }
    return _reactnative.StyleSheet.hairlineWidth;
};
var getSegmentedButtonTextColor = function(param) {
    var theme = param.theme, disabled = param.disabled, checked = param.checked, checkedColor = param.checkedColor, uncheckedColor = param.uncheckedColor;
    if (theme.isV3) {
        if (disabled) {
            return theme.colors.onSurfaceDisabled;
        }
        if (checked) {
            return checkedColor != null ? checkedColor : theme.colors.onSecondaryContainer;
        }
        return uncheckedColor != null ? uncheckedColor : theme.colors.onSurface;
    }
    if (disabled) {
        return theme.colors.disabled;
    }
    // Primary color is used for checked state too.
    return theme.colors.primary;
};
var getSegmentedButtonColors = function(param) {
    var theme = param.theme, disabled = param.disabled, checked = param.checked, checkedColor = param.checkedColor, uncheckedColor = param.uncheckedColor;
    var backgroundColor = getSegmentedButtonBackgroundColor({
        theme: theme,
        checked: checked
    });
    var borderColor = getSegmentedButtonBorderColor({
        theme: theme,
        disabled: disabled,
        checked: checked
    });
    var textColor = getSegmentedButtonTextColor({
        theme: theme,
        disabled: disabled,
        checked: checked,
        checkedColor: checkedColor,
        uncheckedColor: uncheckedColor
    });
    var borderWidth = getSegmentedButtonBorderWidth({
        theme: theme
    });
    return {
        backgroundColor: backgroundColor,
        borderColor: borderColor,
        textColor: textColor,
        borderWidth: borderWidth
    };
};


}),
"68784": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getSwitchColor", ({
    enumerable: true,
    get: function() {
        return getSwitchColor;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _colors = __webpack_require__(18847);
var getCheckedColor = function(param) {
    var theme = param.theme, color = param.color;
    if (color) {
        return color;
    }
    if (theme.isV3) {
        return theme.colors.primary;
    }
    return theme.colors.accent;
};
var getThumbTintColor = function(param) {
    var theme = param.theme, disabled = param.disabled, value = param.value, checkedColor = param.checkedColor;
    var isIOS = _reactnative.Platform.OS === 'ios';
    if (isIOS) {
        return undefined;
    }
    if (disabled) {
        if (theme.dark) {
            return _colors.grey800;
        }
        return _colors.grey400;
    }
    if (value) {
        return checkedColor;
    }
    if (theme.dark) {
        return _colors.grey400;
    }
    return _colors.grey50;
};
var getOnTintColor = function(param) {
    var theme = param.theme, disabled = param.disabled, value = param.value, checkedColor = param.checkedColor;
    var isIOS = _reactnative.Platform.OS === 'ios';
    if (isIOS) {
        return checkedColor;
    }
    if (disabled) {
        if (theme.dark) {
            if (theme.isV3) {
                return (0, _color.default)(_colors.white).alpha(0.06).rgb().string();
            }
            return (0, _color.default)(_colors.white).alpha(0.1).rgb().string();
        }
        return (0, _color.default)(_colors.black).alpha(0.12).rgb().string();
    }
    if (value) {
        return (0, _color.default)(checkedColor).alpha(0.5).rgb().string();
    }
    if (theme.dark) {
        return _colors.grey700;
    }
    return 'rgb(178, 175, 177)';
};
var getSwitchColor = function(param) {
    var theme = param.theme, disabled = param.disabled, value = param.value, color = param.color;
    var checkedColor = getCheckedColor({
        theme: theme,
        color: color
    });
    return {
        onTintColor: getOnTintColor({
            theme: theme,
            disabled: disabled,
            value: value,
            checkedColor: checkedColor
        }),
        thumbTintColor: getThumbTintColor({
            theme: theme,
            disabled: disabled,
            value: value,
            checkedColor: checkedColor
        }),
        checkedColor: checkedColor
    };
};


}),
"85121": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getIconColor: function() {
        return getIconColor;
    },
    getTextColor: function() {
        return getTextColor;
    }
});
var _interop_require_default = __webpack_require__(60133);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
function getTextColor(param) {
    var theme = param.theme, disabled = param.disabled;
    var _theme_colors;
    if (theme.isV3) {
        if (disabled) {
            return theme.colors.onSurfaceDisabled;
        }
        return theme.colors.onSurfaceVariant;
    }
    return (0, _color.default)((_theme_colors = theme.colors) == null ? void 0 : _theme_colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();
}
function getIconColor(param) {
    var theme = param.theme, isTextInputFocused = param.isTextInputFocused, disabled = param.disabled, customColor = param.customColor;
    if (typeof customColor === 'function') {
        return customColor(isTextInputFocused);
    }
    if (customColor) {
        return customColor;
    }
    if (!theme.isV3) {
        return theme.colors.text;
    }
    if (disabled) {
        return theme.colors.onSurfaceDisabled;
    }
    return theme.colors.onSurfaceVariant;
}


}),
"95750": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _ToggleButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91357));
var _ToggleButtonGroup = /*#__PURE__*/ _interop_require_default._(__webpack_require__(99698));
var _ToggleButtonRow = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5205));
var ToggleButton = Object.assign(// @component ./ToggleButton.tsx
_ToggleButton.default, {
    // @component ./ToggleButtonGroup.tsx
    Group: _ToggleButtonGroup.default,
    // @component ./ToggleButtonRow.tsx
    Row: _ToggleButtonRow.default
});
var _default = ToggleButton;


}),
"97751": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getToggleButtonColor", ({
    enumerable: true,
    get: function() {
        return getToggleButtonColor;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _tokens = __webpack_require__(95157);
var getToggleButtonColor = function(param) {
    var theme = param.theme, checked = param.checked;
    if (checked) {
        if (theme.isV3) {
            return (0, _color.default)(theme.colors.onSecondaryContainer).alpha(_tokens.tokens.md.ref.opacity.level2).rgb().string();
        }
        if (theme.dark) {
            return 'rgba(255, 255, 255, .12)';
        }
        return 'rgba(0, 0, 0, .08)';
    }
    return 'transparent';
};


}),
"22346": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getTooltipPosition", ({
    enumerable: true,
    get: function() {
        return getTooltipPosition;
    }
}));
var _extends = __webpack_require__(88410);
var _reactnative = __webpack_require__(44963);
/**
 * Return true when the tooltip center x-coordinate relative to the wrapped element is negative.
 * The tooltip will be placed at the starting x-coordinate from the wrapped element.
 */ var overflowLeft = function(center) {
    return center < 0;
};
/**
 * Return true when the tooltip center x-coordinate + tooltip width is greater than the layout width
 * The tooltip width will grow from right to left relative to the wrapped element.
 */ var overflowRight = function(center, tooltipWidth) {
    var _Dimensions_get = _reactnative.Dimensions.get('window'), layoutWidth = _Dimensions_get.width;
    return center + tooltipWidth > layoutWidth;
};
/**
 * Return true when the children y-coordinate + its height + tooltip height is greater than the layout height.
 * The tooltip will be placed at the top of the wrapped element.
 */ var overflowBottom = function(childrenY, childrenHeight, tooltipHeight) {
    var _Dimensions_get = _reactnative.Dimensions.get('window'), layoutHeight = _Dimensions_get.height;
    return childrenY + childrenHeight + tooltipHeight > layoutHeight;
};
var getTooltipXPosition = function(param, param1) {
    var childrenX = param.pageX, childrenWidth = param.width;
    var tooltipWidth = param1.width;
    // when the children use position absolute the childrenWidth is measured as 0,
    // so it's best to anchor the tooltip at the start of the children
    var center = childrenWidth > 0 ? childrenX + (childrenWidth - tooltipWidth) / 2 : childrenX;
    if (overflowLeft(center)) return childrenX;
    if (overflowRight(center, tooltipWidth)) return childrenX + childrenWidth - tooltipWidth;
    return center;
};
var getTooltipYPosition = function(param, param1) {
    var childrenY = param.pageY, childrenHeight = param.height;
    var tooltipHeight = param1.height;
    if (overflowBottom(childrenY, childrenHeight, tooltipHeight)) return childrenY - tooltipHeight;
    return childrenY + childrenHeight;
};
var getChildrenMeasures = function(style, measures) {
    var _ref = Array.isArray(style) ? style.reduce(function(acc, current) {
        return _extends._({}, acc, current);
    }) : style, position = _ref.position, top = _ref.top, bottom = _ref.bottom, left = _ref.left, right = _ref.right;
    if (position === 'absolute') {
        var pageX = 0;
        var pageY = measures.pageY;
        var height = 0;
        var width = 0;
        if (typeof left === 'number') {
            pageX = left;
            width = 0;
        }
        if (typeof right === 'number') {
            pageX = measures.width - right;
            width = 0;
        }
        if (typeof top === 'number') {
            pageY = pageY + top;
        }
        if (typeof bottom === 'number') {
            pageY = pageY - bottom;
        }
        return {
            pageX: pageX,
            pageY: pageY,
            width: width,
            height: height
        };
    }
    return measures;
};
var getTooltipPosition = function(param, component) {
    var children = param.children, tooltip = param.tooltip, measured = param.measured;
    if (!measured) return {};
    var measures = children;
    if (component.props.style) {
        measures = getChildrenMeasures(component.props.style, children);
    }
    return {
        left: getTooltipXPosition(measures, tooltip),
        top: getTooltipYPosition(measures, tooltip)
    };
};


}),
"44320": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getTouchableRippleColors", ({
    enumerable: true,
    get: function() {
        return getTouchableRippleColors;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var getUnderlayColor = function(param) {
    var theme = param.theme, calculatedRippleColor = param.calculatedRippleColor, underlayColor = param.underlayColor;
    if (underlayColor != null) {
        return underlayColor;
    }
    if (theme.isV3) {
        return (0, _color.default)(calculatedRippleColor).rgb().string();
    }
    return (0, _color.default)(calculatedRippleColor).fade(0.5).rgb().string();
};
var getRippleColor = function(param) {
    var theme = param.theme, rippleColor = param.rippleColor;
    if (rippleColor) {
        return rippleColor;
    }
    if (theme.isV3) {
        return (0, _color.default)(theme.colors.onSurface).alpha(0.12).rgb().string();
    }
    if (theme.dark) {
        return (0, _color.default)(theme.colors.text).alpha(0.32).rgb().string();
    }
    return (0, _color.default)(theme.colors.text).alpha(0.2).rgb().string();
};
var getTouchableRippleColors = function(param) {
    var theme = param.theme, rippleColor = param.rippleColor, underlayColor = param.underlayColor;
    var calculatedRippleColor = getRippleColor({
        theme: theme,
        rippleColor: rippleColor
    });
    return {
        calculatedRippleColor: calculatedRippleColor,
        calculatedUnderlayColor: getUnderlayColor({
            theme: theme,
            calculatedRippleColor: calculatedRippleColor,
            underlayColor: underlayColor
        })
    };
};


}),
"74161": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Caption: function() {
        return _Caption.default;
    },
    Headline: function() {
        return _Headline.default;
    },
    Paragraph: function() {
        return _Paragraph.default;
    },
    Subheading: function() {
        return _Subheading.default;
    },
    Title: function() {
        return _Title.default;
    }
});
var _interop_require_default = __webpack_require__(60133);
var _Caption = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17911));
var _Headline = /*#__PURE__*/ _interop_require_default._(__webpack_require__(14200));
var _Paragraph = /*#__PURE__*/ _interop_require_default._(__webpack_require__(77585));
var _Subheading = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93314));
var _Title = /*#__PURE__*/ _interop_require_default._(__webpack_require__(14041));


}),
"6637": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    MD2DarkTheme: function() {
        return _DarkTheme1.MD2DarkTheme;
    },
    MD2LightTheme: function() {
        return _LightTheme1.MD2LightTheme;
    },
    MD3DarkTheme: function() {
        return _DarkTheme.MD3DarkTheme;
    },
    MD3LightTheme: function() {
        return _LightTheme.MD3LightTheme;
    }
});
var _LightTheme = __webpack_require__(62281);
var _DarkTheme = __webpack_require__(90089);
var _LightTheme1 = __webpack_require__(90474);
var _DarkTheme1 = __webpack_require__(46782);


}),
"90674": (function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "roundLayoutSize", ({
    enumerable: true,
    get: function() {
        return roundLayoutSize;
    }
}));
var roundLayoutSize = function(size) {
    return Math.round(size * 1000) / 1000;
};


}),
"45975": (function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "splitStyles", ({
    enumerable: true,
    get: function() {
        return splitStyles;
    }
}));
function splitStyles(styles) {
    for(var _len = arguments.length, filters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        filters[_key - 1] = arguments[_key];
    }
    if (false) {}
    // `Object.entries` will be used to iterate over the styles and `Object.fromEntries` will be called before returning
    // Entries which match the given filters will be temporarily stored in `newStyles`
    var newStyles = filters.map(function() {
        return [];
    });
    // Entries which match no filter
    var rest = [];
    // Iterate every style property
    outer: for(var _i = 0, _Object_entries = Object.entries(styles); _i < _Object_entries.length; _i++){
        var item = _Object_entries[_i];
        // Check each filter
        for(var i = 0; i < filters.length; i++){
            // Check if filter matches
            if (filters[i](item[0])) {
                newStyles[i].push(item); // Push to temporary filtered entries array
                continue outer; // Skip to checking next style property
            }
        }
        // Adds to rest styles if not filtered
        rest.push(item);
    }
    // Put unmatched styles in the beginning
    newStyles.unshift(rest);
    // Convert arrays of entries into objects
    return newStyles.map(function(styles) {
        return Object.fromEntries(styles);
    });
}


}),
"94908": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _theming = __webpack_require__(10968);
var DURATION = 2400;
/**
 * Activity indicator is used to present progress of some activity in the app.
 * It can be used as a drop-in for the ActivityIndicator shipped with React Native.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { ActivityIndicator, MD2Colors } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <ActivityIndicator animating={true} color={MD2Colors.red800} />
 * );
 *
 * export default MyComponent;
 * ```
 */ var ActivityIndicator = function(_param) {
    var _param_animating = _param.animating, animating = _param_animating === void 0 ? true : _param_animating, indicatorColor = _param.color, _param_hidesWhenStopped = _param.hidesWhenStopped, hidesWhenStopped = _param_hidesWhenStopped === void 0 ? true : _param_hidesWhenStopped, tmp = _param.size, indicatorSize = tmp === void 0 ? 'small' : tmp, style = _param.style, themeOverrides = _param.theme, rest = _object_without_properties_loose._(_param, [
        "animating",
        "color",
        "hidesWhenStopped",
        "size",
        "style",
        "theme"
    ]);
    var _theme_colors;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React_useRef = _react.useRef(new _reactnative.Animated.Value(0)), timer = _React_useRef.current;
    var _React_useRef1 = _react.useRef(new _reactnative.Animated.Value(!animating && hidesWhenStopped ? 0 : 1)), fade = _React_useRef1.current;
    var rotation = _react.useRef(undefined);
    var scale = theme.animation.scale;
    var startRotation = _react.useCallback(function() {
        // Show indicator
        _reactnative.Animated.timing(fade, {
            duration: 200 * scale,
            toValue: 1,
            isInteraction: false,
            useNativeDriver: true
        }).start();
        // Circular animation in loop
        if (rotation.current) {
            timer.setValue(0);
            // $FlowFixMe
            _reactnative.Animated.loop(rotation.current).start();
        }
    }, [
        scale,
        fade,
        timer
    ]);
    var stopRotation = function() {
        if (rotation.current) {
            rotation.current.stop();
        }
    };
    _react.useEffect(function() {
        if (rotation.current === undefined) {
            // Circular animation in loop
            rotation.current = _reactnative.Animated.timing(timer, {
                duration: DURATION,
                easing: _reactnative.Easing.linear,
                // Animated.loop does not work if useNativeDriver is true on web
                useNativeDriver: _reactnative.Platform.OS !== 'web',
                toValue: 1,
                isInteraction: false
            });
        }
        if (animating) {
            startRotation();
        } else if (hidesWhenStopped) {
            // Hide indicator first and then stop rotation
            _reactnative.Animated.timing(fade, {
                duration: 200 * scale,
                toValue: 0,
                useNativeDriver: true,
                isInteraction: false
            }).start(stopRotation);
        } else {
            stopRotation();
        }
    }, [
        animating,
        fade,
        hidesWhenStopped,
        startRotation,
        scale,
        timer
    ]);
    var color = indicatorColor || ((_theme_colors = theme.colors) == null ? void 0 : _theme_colors.primary);
    var size = typeof indicatorSize === 'string' ? indicatorSize === 'small' ? 24 : 48 : indicatorSize ? indicatorSize : 24;
    var frames = 60 * DURATION / 1000;
    var easing = _reactnative.Easing.bezier(0.4, 0.0, 0.7, 1.0);
    var containerStyle = {
        width: size,
        height: size / 2,
        overflow: 'hidden'
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _extends._({
        style: [
            styles.container,
            style
        ]
    }, rest, {
        accessible: true,
        accessibilityRole: "progressbar",
        accessibilityState: {
            busy: animating
        },
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
            style: [
                {
                    width: size,
                    height: size,
                    opacity: fade
                }
            ],
            collapsable: false,
            children: [
                0,
                1
            ].map(function(index) {
                // Thanks to https://github.com/n4kz/react-native-indicators for the great work
                var inputRange = Array.from(new Array(frames), function(_, frameIndex) {
                    return frameIndex / (frames - 1);
                });
                var outputRange = Array.from(new Array(frames), function(_, frameIndex) {
                    var progress = 2 * frameIndex / (frames - 1);
                    var rotation = index ? +(360 - 15) : -(180 - 15);
                    if (progress > 1.0) {
                        progress = 2.0 - progress;
                    }
                    var direction = index ? -1 : +1;
                    return "" + (direction * (180 - 30) * easing(progress) + rotation) + "deg";
                });
                var layerStyle = {
                    width: size,
                    height: size,
                    transform: [
                        {
                            rotate: timer.interpolate({
                                inputRange: [
                                    0,
                                    1
                                ],
                                outputRange: [
                                    "" + (0 + 30 + 15) + "deg",
                                    "" + (2 * 360 + 30 + 15) + "deg"
                                ]
                            })
                        }
                    ]
                };
                var viewportStyle = {
                    width: size,
                    height: size,
                    transform: [
                        {
                            translateY: index ? -size / 2 : 0
                        },
                        {
                            rotate: timer.interpolate({
                                inputRange: inputRange,
                                outputRange: outputRange
                            })
                        }
                    ]
                };
                var offsetStyle = index ? {
                    top: size / 2
                } : null;
                var lineStyle = {
                    width: size,
                    height: size,
                    borderColor: color,
                    borderWidth: size / 10,
                    borderRadius: size / 2
                };
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                    style: [
                        styles.layer
                    ],
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                        style: layerStyle,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                            style: [
                                containerStyle,
                                offsetStyle
                            ],
                            collapsable: false,
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                                style: viewportStyle,
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                                    style: containerStyle,
                                    collapsable: false,
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                                        style: lineStyle
                                    })
                                })
                            })
                        })
                    })
                }, index);
            })
        })
    }));
};
var styles = _reactnative.StyleSheet.create({
    container: {
        justifyContent: 'center',
        alignItems: 'center'
    },
    layer: _extends._({}, _reactnative.StyleSheet.absoluteFillObject, {
        justifyContent: 'center',
        alignItems: 'center'
    })
});
var _default = ActivityIndicator;


}),
"26882": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Appbar: function() {
        return Appbar;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _AppbarContent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4214));
var _utils = __webpack_require__(30712);
var _theming = __webpack_require__(10968);
var _Surface = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2403));
/**
 * A component to display action items in a bar. It can be placed at the top or bottom.
 * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.
 * The bottom bar usually provides access to a drawer and up to four actions.
 *
 * By default Appbar uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.
 * See [Dark Theme](https://callstack.github.io/react-native-paper/docs/guides/theming#dark-theme) for more informations
 *
 * ## Usage
 * ### Top bar
 * ```js
 * import * as React from 'react';
 * import { Appbar } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Appbar.Header>
 *     <Appbar.BackAction onPress={() => {}} />
 *     <Appbar.Content title="Title" />
 *     <Appbar.Action icon="calendar" onPress={() => {}} />
 *     <Appbar.Action icon="magnify" onPress={() => {}} />
 *   </Appbar.Header>
 * );
 *
 * export default MyComponent;
 * ```
 *
 * ### Bottom bar
 * ```js
 * import * as React from 'react';
 * import { StyleSheet } from 'react-native';
 * import { Appbar, FAB, useTheme } from 'react-native-paper';
 * import { useSafeAreaInsets } from 'react-native-safe-area-context';
 *
 * const BOTTOM_APPBAR_HEIGHT = 80;
 * const MEDIUM_FAB_HEIGHT = 56;
 *
 * const MyComponent = () => {
 *   const { bottom } = useSafeAreaInsets();
 *   const theme = useTheme();
 *
 *   return (
 *     <Appbar
 *       style={[
 *         styles.bottom,
 *         {
 *           height: BOTTOM_APPBAR_HEIGHT + bottom,
 *           backgroundColor: theme.colors.elevation.level2,
 *         },
 *       ]}
 *       safeAreaInsets={{ bottom }}
 *     >
 *       <Appbar.Action icon="archive" onPress={() => {}} />
 *       <Appbar.Action icon="email" onPress={() => {}} />
 *       <Appbar.Action icon="label" onPress={() => {}} />
 *       <Appbar.Action icon="delete" onPress={() => {}} />
 *       <FAB
 *         mode="flat"
 *         size="medium"
 *         icon="plus"
 *         onPress={() => {}}
 *         style={[
 *           styles.fab,
 *           { top: (BOTTOM_APPBAR_HEIGHT - MEDIUM_FAB_HEIGHT) / 2 },
 *         ]}
 *       />
 *     </Appbar>
 *   );
 * };
 *
 * const styles = StyleSheet.create({
 *   bottom: {
 *     backgroundColor: 'aquamarine',
 *     position: 'absolute',
 *     left: 0,
 *     right: 0,
 *     bottom: 0,
 *   },
 *   fab: {
 *     position: 'absolute',
 *     right: 16,
 *   },
 * });
 *
 * export default MyComponent;
 * ```
 */ var Appbar = function(_param) {
    var children = _param.children, dark = _param.dark, style = _param.style, _param_mode = _param.mode, mode = _param_mode === void 0 ? 'small' : _param_mode, elevated = _param.elevated, safeAreaInsets = _param.safeAreaInsets, themeOverrides = _param.theme, rest = _object_without_properties_loose._(_param, [
        "children",
        "dark",
        "style",
        "mode",
        "elevated",
        "safeAreaInsets",
        "theme"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isV3 = theme.isV3;
    var flattenedStyle = _reactnative.StyleSheet.flatten(style);
    var _ref = flattenedStyle || {}, customBackground = _ref.backgroundColor, _ref_elevation = _ref.elevation, elevation = _ref_elevation === void 0 ? isV3 ? elevated ? 2 : 0 : 4 : _ref_elevation, restStyle = _object_without_properties_loose._(_ref, [
        "backgroundColor",
        "elevation"
    ]);
    var backgroundColor = (0, _utils.getAppbarBackgroundColor)(theme, elevation, customBackground, elevated);
    var isMode = function(modeToCompare) {
        return isV3 && mode === modeToCompare;
    };
    var isDark = false;
    if (typeof dark === 'boolean') {
        isDark = dark;
    } else if (!isV3) {
        isDark = backgroundColor === 'transparent' ? false : typeof backgroundColor === 'string' ? !(0, _color.default)(backgroundColor).isLight() : true;
    }
    var isV3CenterAlignedMode = isV3 && isMode('center-aligned');
    var shouldCenterContent = false;
    var shouldAddLeftSpacing = false;
    var shouldAddRightSpacing = false;
    if (!isV3 && _reactnative.Platform.OS === 'ios' || isV3CenterAlignedMode) {
        var hasAppbarContent = false;
        var leftItemsCount = 0;
        var rightItemsCount = 0;
        _react.Children.forEach(children, function(child) {
            if (/*#__PURE__*/ _react.isValidElement(child)) {
                if (child.type === _AppbarContent.default) {
                    hasAppbarContent = true;
                } else if (hasAppbarContent) {
                    rightItemsCount++;
                } else {
                    leftItemsCount++;
                }
            }
        });
        shouldCenterContent = hasAppbarContent && leftItemsCount < 2 && rightItemsCount < (isV3 ? 3 : 2);
        shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;
        shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;
    }
    var filterAppbarActions = _react.useCallback(function(isLeading) {
        if (isLeading === void 0) isLeading = false;
        return _react.Children.toArray(children).filter(function(child) {
            return(// @ts-expect-error: TypeScript complains about the type of type but it doesn't matter
            isLeading ? child.props.isLeading : !child.props.isLeading);
        });
    }, [
        children
    ]);
    var spacingStyle = isV3 ? styles.v3Spacing : styles.spacing;
    var insets = {
        paddingBottom: safeAreaInsets == null ? void 0 : safeAreaInsets.bottom,
        paddingTop: safeAreaInsets == null ? void 0 : safeAreaInsets.top,
        paddingLeft: safeAreaInsets == null ? void 0 : safeAreaInsets.left,
        paddingRight: safeAreaInsets == null ? void 0 : safeAreaInsets.right
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Surface.default, _extends._({
        style: [
            {
                backgroundColor: backgroundColor
            },
            styles.appbar,
            {
                height: isV3 ? _utils.modeAppbarHeight[mode] : _utils.DEFAULT_APPBAR_HEIGHT
            },
            insets,
            restStyle,
            !theme.isV3 && {
                elevation: elevation
            }
        ],
        elevation: elevation
    }, rest, {
        children: [
            shouldAddLeftSpacing ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                style: spacingStyle
            }) : null,
            (!isV3 || isMode('small') || isMode('center-aligned')) && (0, _utils.renderAppbarContent)({
                children: children,
                isDark: isDark,
                theme: theme,
                isV3: isV3,
                shouldCenterContent: isV3CenterAlignedMode || shouldCenterContent
            }),
            (isMode('medium') || isMode('large')) && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                style: [
                    styles.columnContainer,
                    isMode('center-aligned') && styles.centerAlignedContainer
                ],
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                        style: styles.controlsRow,
                        children: [
                            (0, _utils.renderAppbarContent)({
                                children: children,
                                isDark: isDark,
                                isV3: isV3,
                                renderOnly: [
                                    'Appbar.BackAction'
                                ],
                                mode: mode
                            }),
                            (0, _utils.renderAppbarContent)({
                                children: filterAppbarActions(true),
                                isDark: isDark,
                                isV3: isV3,
                                renderOnly: [
                                    'Appbar.Action'
                                ],
                                mode: mode
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                                style: styles.rightActionControls,
                                children: (0, _utils.renderAppbarContent)({
                                    children: filterAppbarActions(false),
                                    isDark: isDark,
                                    isV3: isV3,
                                    renderExcept: [
                                        'Appbar',
                                        'Appbar.BackAction',
                                        'Appbar.Content',
                                        'Appbar.Header'
                                    ],
                                    mode: mode
                                })
                            })
                        ]
                    }),
                    (0, _utils.renderAppbarContent)({
                        children: children,
                        isDark: isDark,
                        isV3: isV3,
                        renderOnly: [
                            'Appbar.Content'
                        ],
                        mode: mode
                    })
                ]
            }),
            shouldAddRightSpacing ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                style: spacingStyle
            }) : null
        ]
    }));
};
var styles = _reactnative.StyleSheet.create({
    appbar: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: 4
    },
    spacing: {
        width: 48
    },
    v3Spacing: {
        width: 52
    },
    controlsRow: {
        flex: 1,
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between'
    },
    rightActionControls: {
        flexDirection: 'row',
        flex: 1,
        justifyContent: 'flex-end'
    },
    columnContainer: {
        flexDirection: 'column',
        flex: 1,
        paddingTop: 8
    },
    centerAlignedContainer: {
        paddingTop: 0
    }
});
var _default = Appbar;


}),
"45019": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AppbarAction: function() {
        return AppbarAction;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _theming = __webpack_require__(10968);
var _colors = __webpack_require__(18847);
var _forwardRef = __webpack_require__(45835);
var _IconButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86395));
/**
 * A component used to display an action item in the appbar.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Appbar } from 'react-native-paper';
 * import { Platform } from 'react-native';
 *
 * const MORE_ICON = Platform.OS === 'ios' ? 'dots-horizontal' : 'dots-vertical';
 *
 * const MyComponent = () => (
 *     <Appbar.Header>
 *        <Appbar.Content title="Title" subtitle={'Subtitle'} />
 *         <Appbar.Action icon="magnify" onPress={() => {}} />
 *         <Appbar.Action icon={MORE_ICON} onPress={() => {}} />
 *     </Appbar.Header>
 * );
 *
 * export default MyComponent;
 * ```
 */ var AppbarAction = (0, _forwardRef.forwardRef)(function(_param, ref) {
    var _param_size = _param.size, size = _param_size === void 0 ? 24 : _param_size, iconColor = _param.color, icon = _param.icon, disabled = _param.disabled, onPress = _param.onPress, accessibilityLabel = _param.accessibilityLabel, isLeading = _param.isLeading, themeOverrides = _param.theme, rippleColor = _param.rippleColor, rest = _object_without_properties_loose._(_param, [
        "size",
        "color",
        "icon",
        "disabled",
        "onPress",
        "accessibilityLabel",
        "isLeading",
        "theme",
        "rippleColor"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var actionIconColor = iconColor ? iconColor : theme.isV3 ? isLeading ? theme.colors.onSurface : theme.colors.onSurfaceVariant : (0, _color.default)(_colors.black).alpha(0.54).rgb().string();
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_IconButton.default, _extends._({
        size: size,
        onPress: onPress,
        iconColor: actionIconColor,
        icon: icon,
        disabled: disabled,
        accessibilityLabel: accessibilityLabel,
        animated: true,
        ref: ref,
        rippleColor: rippleColor
    }, rest));
});
AppbarAction.displayName = 'Appbar.Action';
var _default = AppbarAction;


}),
"79407": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AppbarBackAction: function() {
        return AppbarBackAction;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _AppbarAction = /*#__PURE__*/ _interop_require_default._(__webpack_require__(45019));
var _AppbarBackIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80187));
var _forwardRef = __webpack_require__(45835);
/**
 * A component used to display a back button in the appbar.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Appbar } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *     <Appbar.Header>
 *       <Appbar.BackAction onPress={() => {}} />
 *     </Appbar.Header>
 * );
 *
 * export default MyComponent;
 * ```
 */ var AppbarBackAction = (0, _forwardRef.forwardRef)(function(_param, ref) {
    var _param_accessibilityLabel = _param.accessibilityLabel, accessibilityLabel = _param_accessibilityLabel === void 0 ? 'Back' : _param_accessibilityLabel, rest = _object_without_properties_loose._(_param, [
        "accessibilityLabel"
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_AppbarAction.default, _extends._({
        accessibilityLabel: accessibilityLabel
    }, rest, {
        icon: _AppbarBackIcon.default,
        isLeading: true,
        ref: ref
    }));
});
AppbarBackAction.displayName = 'Appbar.BackAction';
var _default = AppbarBackAction;


}),
"80187": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AppbarBackIcon: function() {
        return AppbarBackIcon;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _MaterialCommunityIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(81045));
var AppbarBackIcon = function(param) {
    var size = param.size, color = param.color;
    var iosIconSize = size - 3;
    return _reactnative.Platform.OS === 'ios' ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
        style: [
            styles.wrapper,
            {
                width: size,
                height: size,
                transform: [
                    {
                        scaleX: _reactnative.I18nManager.getConstants().isRTL ? -1 : 1
                    }
                ]
            }
        ],
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Image, {
            source: __webpack_require__(52712),
            style: [
                styles.icon,
                {
                    tintColor: color,
                    width: iosIconSize,
                    height: iosIconSize
                }
            ],
            accessibilityIgnoresInvertColors: true
        })
    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_MaterialCommunityIcon.default, {
        name: "arrow-left",
        color: color,
        size: size,
        direction: _reactnative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
    });
};
var styles = _reactnative.StyleSheet.create({
    wrapper: {
        alignItems: 'center',
        justifyContent: 'center'
    },
    icon: {
        resizeMode: 'contain'
    }
});
var _default = AppbarBackIcon;


}),
"4214": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AppbarContent: function() {
        return AppbarContent;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _utils = __webpack_require__(30712);
var _theming = __webpack_require__(10968);
var _colors = __webpack_require__(18847);
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
/**
 * A component used to display a title and optional subtitle in an appbar.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Appbar } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *     <Appbar.Header>
 *        <Appbar.Content title="Title" />
 *     </Appbar.Header>
 * );
 *
 * export default MyComponent;
 * ```
 */ var AppbarContent = function(_param) {
    var titleColor = _param.color, subtitle = _param.subtitle, subtitleStyle = _param.subtitleStyle, onPress = _param.onPress, disabled = _param.disabled, style = _param.style, titleRef = _param.titleRef, titleStyle = _param.titleStyle, title = _param.title, titleMaxFontSizeMultiplier = _param.titleMaxFontSizeMultiplier, _param_mode = _param.mode, mode = _param_mode === void 0 ? 'small' : _param_mode, themeOverrides = _param.theme, _param_testID = _param.testID, testID = _param_testID === void 0 ? 'appbar-content' : _param_testID, rest = _object_without_properties_loose._(_param, [
        "color",
        "subtitle",
        "subtitleStyle",
        "onPress",
        "disabled",
        "style",
        "titleRef",
        "titleStyle",
        "title",
        "titleMaxFontSizeMultiplier",
        "mode",
        "theme",
        "testID"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isV3 = theme.isV3, colors = theme.colors;
    var titleTextColor = titleColor ? titleColor : isV3 ? colors.onSurface : _colors.white;
    var subtitleColor = (0, _color.default)(titleTextColor).alpha(0.7).rgb().string();
    var modeContainerStyles = {
        small: styles.v3DefaultContainer,
        medium: styles.v3MediumContainer,
        large: styles.v3LargeContainer,
        'center-aligned': styles.v3DefaultContainer
    };
    var variant = _utils.modeTextVariant[mode];
    var contentWrapperProps = _extends._({
        pointerEvents: 'box-none',
        style: [
            styles.container,
            isV3 && modeContainerStyles[mode],
            style
        ],
        testID: testID
    }, rest);
    var content = /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            typeof title === 'string' ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, _extends._({}, isV3 && {
                variant: variant
            }, {
                ref: titleRef,
                style: [
                    _extends._({
                        color: titleTextColor
                    }, isV3 ? theme.fonts[variant] : _reactnative.Platform.OS === 'ios' ? theme.fonts.regular : theme.fonts.medium),
                    !isV3 && styles.title,
                    titleStyle
                ],
                numberOfLines: 1,
                accessible: true,
                accessibilityRole: onPress ? 'none' : _reactnative.Platform.OS === 'web' ? 'heading' : 'header',
                // @ts-expect-error We keep old a11y props for backwards compat with old RN versions
                accessibilityTraits: "header",
                testID: "" + testID + "-title-text",
                maxFontSizeMultiplier: titleMaxFontSizeMultiplier,
                children: title
            })) : title,
            !isV3 && subtitle ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                style: [
                    styles.subtitle,
                    {
                        color: subtitleColor
                    },
                    subtitleStyle
                ],
                numberOfLines: 1,
                children: subtitle
            }) : null
        ]
    });
    if (onPress) {
        return(// eslint-disable-next-line react-native-a11y/has-accessibility-props
        /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Pressable, _extends._({
            accessibilityRole: touchableRole,
            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions
            accessibilityTraits: touchableRole,
            accessibilityComponentType: "button",
            onPress: onPress,
            disabled: disabled
        }, contentWrapperProps, {
            children: content
        })));
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _extends._({}, contentWrapperProps, {
        children: content
    }));
};
AppbarContent.displayName = 'Appbar.Content';
var styles = _reactnative.StyleSheet.create({
    container: {
        flex: 1,
        paddingHorizontal: 12
    },
    v3DefaultContainer: {
        paddingHorizontal: 0
    },
    v3MediumContainer: {
        paddingHorizontal: 0,
        justifyContent: 'flex-end',
        paddingBottom: 24
    },
    v3LargeContainer: {
        paddingHorizontal: 0,
        paddingTop: 36,
        justifyContent: 'flex-end',
        paddingBottom: 28
    },
    title: {
        fontSize: _reactnative.Platform.OS === 'ios' ? 17 : 20
    },
    subtitle: {
        fontSize: _reactnative.Platform.OS === 'ios' ? 11 : 14
    }
});
var iosTouchableRole = [
    'button',
    'header'
];
var touchableRole = _reactnative.Platform.select({
    ios: iosTouchableRole,
    "default": iosTouchableRole[0]
});
var _default = AppbarContent;


}),
"47476": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AppbarHeader: function() {
        return AppbarHeader;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _reactnativesafeareacontext = __webpack_require__(24144);
var _Appbar = __webpack_require__(26882);
var _utils = __webpack_require__(30712);
var _theming = __webpack_require__(10968);
var _shadow = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83741));
/**
 * A component to use as a header at the top of the screen.
 * It can contain the screen title, controls such as navigation buttons, menu button etc.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Appbar } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const _goBack = () => console.log('Went back');
 *
 *   const _handleSearch = () => console.log('Searching');
 *
 *   const _handleMore = () => console.log('Shown more');
 *
 *   return (
 *     <Appbar.Header>
 *       <Appbar.BackAction onPress={_goBack} />
 *       <Appbar.Content title="Title" />
 *       <Appbar.Action icon="magnify" onPress={_handleSearch} />
 *       <Appbar.Action icon="dots-vertical" onPress={_handleMore} />
 *     </Appbar.Header>
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ var AppbarHeader = function(_param) {
    var // Don't use default props since we check it to know whether we should use SafeAreaView
    statusBarHeight = _param.statusBarHeight, style = _param.style, dark = _param.dark, _param_mode = _param.mode, mode = _param_mode === void 0 ? _reactnative.Platform.OS === 'ios' ? 'center-aligned' : 'small' : _param_mode, _param_elevated = _param.elevated, elevated = _param_elevated === void 0 ? false : _param_elevated, themeOverrides = _param.theme, _param_testID = _param.testID, testID = _param_testID === void 0 ? 'appbar-header' : _param_testID, rest = _object_without_properties_loose._(_param, [
        "statusBarHeight",
        "style",
        "dark",
        "mode",
        "elevated",
        "theme",
        "testID"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isV3 = theme.isV3;
    var flattenedStyle = _reactnative.StyleSheet.flatten(style);
    var _ref = flattenedStyle || {}, _ref_height = _ref.height, height = _ref_height === void 0 ? isV3 ? _utils.modeAppbarHeight[mode] : _utils.DEFAULT_APPBAR_HEIGHT : _ref_height, _ref_elevation = _ref.elevation, elevation = _ref_elevation === void 0 ? isV3 ? elevated ? 2 : 0 : 4 : _ref_elevation, customBackground = _ref.backgroundColor, _ref_zIndex = _ref.zIndex, zIndex = _ref_zIndex === void 0 ? isV3 && elevated ? 1 : 0 : _ref_zIndex, restStyle = _object_without_properties_loose._(_ref, [
        "height",
        "elevation",
        "backgroundColor",
        "zIndex"
    ]);
    var borderRadius = (0, _utils.getAppbarBorders)(restStyle);
    var backgroundColor = (0, _utils.getAppbarBackgroundColor)(theme, elevation, customBackground, elevated);
    var _useSafeAreaInsets = (0, _reactnativesafeareacontext.useSafeAreaInsets)(), top = _useSafeAreaInsets.top, left = _useSafeAreaInsets.left, right = _useSafeAreaInsets.right;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
        testID: "" + testID + "-root-layer",
        style: [
            {
                backgroundColor: backgroundColor,
                zIndex: zIndex,
                elevation: elevation,
                paddingTop: statusBarHeight != null ? statusBarHeight : top,
                paddingHorizontal: Math.max(left, right)
            },
            borderRadius,
            (0, _shadow.default)(elevation)
        ],
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Appbar.Appbar, _extends._({
            testID: testID,
            style: [
                {
                    height: height,
                    backgroundColor: backgroundColor
                },
                styles.appbar,
                restStyle
            ],
            dark: dark
        }, isV3 && {
            mode: mode
        }, rest, {
            theme: theme
        }))
    });
};
AppbarHeader.displayName = 'Appbar.Header';
var styles = _reactnative.StyleSheet.create({
    appbar: {
        elevation: 0
    }
});
var _default = AppbarHeader;


}),
"31947": (function (__unused_webpack_module, exports, __webpack_require__) {
// @component ./AvatarIcon.tsx
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Icon: function() {
        return _AvatarIcon.default;
    },
    Image: function() {
        return _AvatarImage.default;
    },
    Text: function() {
        return _AvatarText.default;
    }
});
var _interop_require_default = __webpack_require__(60133);
var _AvatarIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29284));
var _AvatarImage = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86621));
var _AvatarText = /*#__PURE__*/ _interop_require_default._(__webpack_require__(88406));


}),
"29284": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _theming = __webpack_require__(10968);
var _colors = __webpack_require__(18847);
var _getContrastingColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17362));
var _Icon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80639));
var defaultSize = 64;
/**
 * Avatars can be used to represent people in a graphical way.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Avatar } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Avatar.Icon size={24} icon="folder" />
 * );
 * ```
 */ var Avatar = function(_param) {
    var icon = _param.icon, _param_size = _param.size, size = _param_size === void 0 ? defaultSize : _param_size, style = _param.style, themeOverrides = _param.theme, rest = _object_without_properties_loose._(_param, [
        "icon",
        "size",
        "style",
        "theme"
    ]);
    var _theme_colors;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _ref = _reactnative.StyleSheet.flatten(style) || {}, _ref_backgroundColor = _ref.backgroundColor, backgroundColor = _ref_backgroundColor === void 0 ? (_theme_colors = theme.colors) == null ? void 0 : _theme_colors.primary : _ref_backgroundColor, restStyle = _object_without_properties_loose._(_ref, [
        "backgroundColor"
    ]);
    var _rest_color;
    var textColor = (_rest_color = rest.color) != null ? _rest_color : (0, _getContrastingColor.default)(backgroundColor, _colors.white, 'rgba(0, 0, 0, .54)');
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _extends._({
        style: [
            {
                width: size,
                height: size,
                borderRadius: size / 2,
                backgroundColor: backgroundColor
            },
            styles.container,
            restStyle
        ]
    }, rest, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.default, {
            source: icon,
            color: textColor,
            size: size * 0.6
        })
    }));
};
Avatar.displayName = 'Avatar.Icon';
var styles = _reactnative.StyleSheet.create({
    container: {
        justifyContent: 'center',
        alignItems: 'center'
    }
});
var _default = Avatar;


}),
"86621": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _theming = __webpack_require__(10968);
var defaultSize = 64;
/**
 * Avatars can be used to represent people in a graphical way.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Avatar } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Avatar.Image size={24} source={require('../assets/avatar.png')} />
 * );
 * export default MyComponent
 * ```
 */ var AvatarImage = function(_param) {
    var _param_size = _param.size, size = _param_size === void 0 ? defaultSize : _param_size, source = _param.source, style = _param.style, onError = _param.onError, onLayout = _param.onLayout, onLoad = _param.onLoad, onLoadEnd = _param.onLoadEnd, onLoadStart = _param.onLoadStart, onProgress = _param.onProgress, themeOverrides = _param.theme, testID = _param.testID, rest = _object_without_properties_loose._(_param, [
        "size",
        "source",
        "style",
        "onError",
        "onLayout",
        "onLoad",
        "onLoadEnd",
        "onLoadStart",
        "onProgress",
        "theme",
        "testID"
    ]);
    var colors = (0, _theming.useInternalTheme)(themeOverrides).colors;
    var _ref = _reactnative.StyleSheet.flatten(style) || {}, _ref_backgroundColor = _ref.backgroundColor, backgroundColor = _ref_backgroundColor === void 0 ? colors == null ? void 0 : colors.primary : _ref_backgroundColor;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, _extends._({
        style: [
            {
                width: size,
                height: size,
                borderRadius: size / 2,
                backgroundColor: backgroundColor
            },
            style
        ]
    }, rest, {
        children: [
            typeof source === 'function' && source({
                size: size
            }),
            typeof source !== 'function' && /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Image, {
                testID: testID,
                source: source,
                style: {
                    width: size,
                    height: size,
                    borderRadius: size / 2
                },
                onError: onError,
                onLayout: onLayout,
                onLoad: onLoad,
                onLoadEnd: onLoadEnd,
                onLoadStart: onLoadStart,
                onProgress: onProgress,
                accessibilityIgnoresInvertColors: true
            })
        ]
    }));
};
AvatarImage.displayName = 'Avatar.Image';
var _default = AvatarImage;


}),
"88406": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _theming = __webpack_require__(10968);
var _colors = __webpack_require__(18847);
var _getContrastingColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17362));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
var defaultSize = 64;
/**
 * Avatars can be used to represent people in a graphical way.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Avatar } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Avatar.Text size={24} label="XD" />
 * );
 * ```
 */ var AvatarText = function(_param) {
    var label = _param.label, _param_size = _param.size, size = _param_size === void 0 ? defaultSize : _param_size, style = _param.style, labelStyle = _param.labelStyle, customColor = _param.color, themeOverrides = _param.theme, maxFontSizeMultiplier = _param.maxFontSizeMultiplier, rest = _object_without_properties_loose._(_param, [
        "label",
        "size",
        "style",
        "labelStyle",
        "color",
        "theme",
        "maxFontSizeMultiplier"
    ]);
    var _theme_colors;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _ref = _reactnative.StyleSheet.flatten(style) || {}, _ref_backgroundColor = _ref.backgroundColor, backgroundColor = _ref_backgroundColor === void 0 ? (_theme_colors = theme.colors) == null ? void 0 : _theme_colors.primary : _ref_backgroundColor, restStyle = _object_without_properties_loose._(_ref, [
        "backgroundColor"
    ]);
    var textColor = customColor != null ? customColor : (0, _getContrastingColor.default)(backgroundColor, _colors.white, 'rgba(0, 0, 0, .54)');
    var fontScale = (0, _reactnative.useWindowDimensions)().fontScale;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _extends._({
        style: [
            {
                width: size,
                height: size,
                borderRadius: size / 2,
                backgroundColor: backgroundColor
            },
            styles.container,
            restStyle
        ]
    }, rest, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
            style: [
                styles.text,
                {
                    color: textColor,
                    fontSize: size / 2,
                    lineHeight: size / fontScale
                },
                labelStyle
            ],
            numberOfLines: 1,
            maxFontSizeMultiplier: maxFontSizeMultiplier,
            children: label
        })
    }));
};
AvatarText.displayName = 'Avatar.Text';
var styles = _reactnative.StyleSheet.create({
    container: {
        justifyContent: 'center',
        alignItems: 'center'
    },
    text: {
        textAlign: 'center',
        textAlignVertical: 'center'
    }
});
var _default = AvatarText;


}),
"60515": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _theming = __webpack_require__(10968);
var _colors = __webpack_require__(18847);
var _getContrastingColor = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17362));
var defaultSize = 20;
/**
 * Badges are small status descriptors for UI elements.
 * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Badge } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Badge>3</Badge>
 * );
 *
 * export default MyComponent;
 * ```
 */ var Badge = function(_param) {
    var children = _param.children, _param_size = _param.size, size = _param_size === void 0 ? defaultSize : _param_size, style = _param.style, themeOverrides = _param.theme, _param_visible = _param.visible, visible = _param_visible === void 0 ? true : _param_visible, rest = _object_without_properties_loose._(_param, [
        "children",
        "size",
        "style",
        "theme",
        "visible"
    ]);
    var _theme_colors;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React_useRef = _react.useRef(new _reactnative.Animated.Value(visible ? 1 : 0)), opacity = _React_useRef.current;
    var fontScale = (0, _reactnative.useWindowDimensions)().fontScale;
    var isFirstRendering = _react.useRef(true);
    var scale = theme.animation.scale;
    _react.useEffect(function() {
        // Do not run animation on very first rendering
        if (isFirstRendering.current) {
            isFirstRendering.current = false;
            return;
        }
        _reactnative.Animated.timing(opacity, {
            toValue: visible ? 1 : 0,
            duration: 150 * scale,
            useNativeDriver: true
        }).start();
    }, [
        visible,
        opacity,
        scale
    ]);
    var _ref = _reactnative.StyleSheet.flatten(style) || {}, _ref_backgroundColor = _ref.backgroundColor, backgroundColor = _ref_backgroundColor === void 0 ? theme.isV3 ? theme.colors.error : (_theme_colors = theme.colors) == null ? void 0 : _theme_colors.notification : _ref_backgroundColor, restStyle = _object_without_properties_loose._(_ref, [
        "backgroundColor"
    ]);
    var textColor = theme.isV3 ? theme.colors.onError : (0, _getContrastingColor.default)(backgroundColor, _colors.white, _colors.black);
    var borderRadius = size / 2;
    var paddingHorizontal = theme.isV3 ? 3 : 4;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.Text, _extends._({
        numberOfLines: 1,
        style: [
            _extends._({
                opacity: opacity,
                backgroundColor: backgroundColor,
                color: textColor,
                fontSize: size * 0.5
            }, !theme.isV3 && theme.fonts.regular, {
                lineHeight: size / fontScale,
                height: size,
                minWidth: size,
                borderRadius: borderRadius,
                paddingHorizontal: paddingHorizontal
            }),
            styles.container,
            restStyle
        ]
    }, rest, {
        children: children
    }));
};
var _default = Badge;
var styles = _reactnative.StyleSheet.create({
    container: {
        alignSelf: 'flex-end',
        textAlign: 'center',
        textAlignVertical: 'center',
        overflow: 'hidden'
    }
});


}),
"54711": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _uselatestcallback = /*#__PURE__*/ _interop_require_default._(__webpack_require__(20249));
var _Button = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79972));
var _Icon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80639));
var _Surface = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2403));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
var _theming = __webpack_require__(10968);
var DEFAULT_MAX_WIDTH = 960;
/**
 * Banner displays a prominent message and related actions.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Image } from 'react-native';
 * import { Banner } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [visible, setVisible] = React.useState(true);
 *
 *   return (
 *     <Banner
 *       visible={visible}
 *       actions={[
 *         {
 *           label: 'Fix it',
 *           onPress: () => setVisible(false),
 *         },
 *         {
 *           label: 'Learn more',
 *           onPress: () => setVisible(false),
 *         },
 *       ]}
 *       icon={({size}) => (
 *         <Image
 *           source={{
 *             uri: 'https://avatars3.githubusercontent.com/u/17571969?s=400&v=4',
 *           }}
 *           style={{
 *             width: size,
 *             height: size,
 *           }}
 *         />
 *       )}>
 *       There was a problem processing a transaction on your credit card.
 *     </Banner>
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ var Banner = function(_param) {
    var visible = _param.visible, icon = _param.icon, children = _param.children, _param_actions = _param.actions, actions = _param_actions === void 0 ? [] : _param_actions, contentStyle = _param.contentStyle, _param_elevation = _param.elevation, elevation = _param_elevation === void 0 ? 1 : _param_elevation, style = _param.style, themeOverrides = _param.theme, _param_onShowAnimationFinished = _param.onShowAnimationFinished, onShowAnimationFinished = _param_onShowAnimationFinished === void 0 ? function() {} : _param_onShowAnimationFinished, _param_onHideAnimationFinished = _param.onHideAnimationFinished, onHideAnimationFinished = _param_onHideAnimationFinished === void 0 ? function() {} : _param_onHideAnimationFinished, maxFontSizeMultiplier = _param.maxFontSizeMultiplier, rest = _object_without_properties_loose._(_param, [
        "visible",
        "icon",
        "children",
        "actions",
        "contentStyle",
        "elevation",
        "style",
        "theme",
        "onShowAnimationFinished",
        "onHideAnimationFinished",
        "maxFontSizeMultiplier"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React_useRef = _react.useRef(new _reactnative.Animated.Value(visible ? 1 : 0)), position = _React_useRef.current;
    var _React_useState = _sliced_to_array._(_react.useState({
        height: 0,
        measured: false
    }), 2), layout = _React_useState[0], setLayout = _React_useState[1];
    var showCallback = (0, _uselatestcallback.default)(onShowAnimationFinished);
    var hideCallback = (0, _uselatestcallback.default)(onHideAnimationFinished);
    var scale = theme.animation.scale;
    var opacity = position.interpolate({
        inputRange: [
            0,
            0.1,
            1
        ],
        outputRange: [
            0,
            1,
            1
        ]
    });
    _react.useEffect(function() {
        if (visible) {
            // show
            _reactnative.Animated.timing(position, {
                duration: 250 * scale,
                toValue: 1,
                useNativeDriver: false
            }).start(showCallback);
        } else {
            // hide
            _reactnative.Animated.timing(position, {
                duration: 200 * scale,
                toValue: 0,
                useNativeDriver: false
            }).start(hideCallback);
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        visible,
        position,
        scale
    ]);
    var handleLayout = function(param) {
        var nativeEvent = param.nativeEvent;
        var height = nativeEvent.layout.height;
        setLayout({
            height: height,
            measured: true
        });
    };
    // The banner animation has 2 parts:
    // 1. Blank spacer element which animates its height to move the content
    // 2. Actual banner which animates its translateY
    // In initial render, we position everything normally and measure the height of the banner
    // Once we have the height, we apply the height to the spacer and switch the banner to position: absolute
    // We need this because we need to move the content below as if banner's height was being animated
    // However we can't animated banner's height directly as it'll also resize the content inside
    var height = _reactnative.Animated.multiply(position, layout.height);
    var translateY = _reactnative.Animated.multiply(_reactnative.Animated.add(position, -1), layout.height);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Surface.default, _extends._({}, rest, {
        style: [
            !theme.isV3 && styles.elevation,
            {
                opacity: opacity
            },
            style
        ],
        theme: theme
    }, theme.isV3 && {
        elevation: elevation
    }, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
            style: [
                styles.wrapper,
                contentStyle
            ],
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                    style: {
                        height: height
                    }
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.Animated.View, {
                    onLayout: handleLayout,
                    style: [
                        layout.measured || !visible ? // Position it absolutely, the layout will be taken care of the spacer
                        [
                            styles.absolute,
                            {
                                transform: [
                                    {
                                        translateY: translateY
                                    }
                                ]
                            }
                        ] : null,
                        !layout.measured && !visible ? // hide it with opacity: 0 so user doesn't see it
                        styles.transparent : null
                    ],
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                            style: styles.content,
                            children: [
                                icon ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                                    style: styles.icon,
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.default, {
                                        source: icon,
                                        size: 40
                                    })
                                }) : null,
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                                    style: [
                                        styles.message,
                                        {
                                            color: theme.isV3 ? theme.colors.onSurface : theme.colors.text
                                        }
                                    ],
                                    accessibilityLiveRegion: visible ? 'polite' : 'none',
                                    accessibilityRole: "alert",
                                    maxFontSizeMultiplier: maxFontSizeMultiplier,
                                    children: children
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                            style: styles.actions,
                            children: actions.map(function(_param, i) {
                                var label = _param.label, others = _object_without_properties_loose._(_param, [
                                    "label"
                                ]);
                                var _theme_colors;
                                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.default, _extends._({
                                    compact: true,
                                    mode: "text",
                                    style: styles.button,
                                    textColor: (_theme_colors = theme.colors) == null ? void 0 : _theme_colors.primary,
                                    theme: theme
                                }, others, {
                                    children: label
                                }), i);
                            })
                        })
                    ]
                })
            ]
        })
    }));
};
var styles = _reactnative.StyleSheet.create({
    wrapper: {
        overflow: 'hidden',
        alignSelf: 'center',
        width: '100%',
        maxWidth: DEFAULT_MAX_WIDTH
    },
    absolute: {
        position: 'absolute',
        top: 0,
        width: '100%'
    },
    content: {
        flexDirection: 'row',
        justifyContent: 'flex-start',
        marginHorizontal: 8,
        marginTop: 16,
        marginBottom: 0
    },
    icon: {
        margin: 8
    },
    message: {
        flex: 1,
        margin: 8
    },
    actions: {
        flexDirection: 'row',
        justifyContent: 'flex-end',
        margin: 4
    },
    button: {
        margin: 4
    },
    elevation: {
        elevation: 1
    },
    transparent: {
        opacity: 0
    }
});
var _default = Banner;


}),
"60028": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _sliced_to_array = __webpack_require__(38097);
var _to_consumable_array = __webpack_require__(2670);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _uselatestcallback = /*#__PURE__*/ _interop_require_default._(__webpack_require__(20249));
var _BottomNavigationBar = /*#__PURE__*/ _interop_require_default._(__webpack_require__(506));
var _BottomNavigationRouteScreen = /*#__PURE__*/ _interop_require_default._(__webpack_require__(10338));
var _theming = __webpack_require__(10968);
var _useAnimatedValueArray = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29838));
var FAR_FAR_AWAY = _reactnative.Platform.OS === 'web' ? 0 : 9999;
var SceneComponent = /*#__PURE__*/ _react.memo(function(_param) {
    var component = _param.component, rest = _object_without_properties_loose._(_param, [
        "component"
    ]);
    return /*#__PURE__*/ _react.createElement(component, rest);
});
/**
 * BottomNavigation provides quick navigation between top-level views of an app with a bottom navigation bar.
 * It is primarily designed for use on mobile. If you want to use the navigation bar only see [`BottomNavigation.Bar`](BottomNavigationBar).
 *
 * By default BottomNavigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.
 * See [Dark Theme](https://callstack.github.io/react-native-paper/docs/guides/theming#dark-theme) for more information.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { BottomNavigation, Text } from 'react-native-paper';
 *
 * const MusicRoute = () => <Text>Music</Text>;
 *
 * const AlbumsRoute = () => <Text>Albums</Text>;
 *
 * const RecentsRoute = () => <Text>Recents</Text>;
 *
 * const NotificationsRoute = () => <Text>Notifications</Text>;
 *
 * const MyComponent = () => {
 *   const [index, setIndex] = React.useState(0);
 *   const [routes] = React.useState([
 *     { key: 'music', title: 'Favorites', focusedIcon: 'heart', unfocusedIcon: 'heart-outline'},
 *     { key: 'albums', title: 'Albums', focusedIcon: 'album' },
 *     { key: 'recents', title: 'Recents', focusedIcon: 'history' },
 *     { key: 'notifications', title: 'Notifications', focusedIcon: 'bell', unfocusedIcon: 'bell-outline' },
 *   ]);
 *
 *   const renderScene = BottomNavigation.SceneMap({
 *     music: MusicRoute,
 *     albums: AlbumsRoute,
 *     recents: RecentsRoute,
 *     notifications: NotificationsRoute,
 *   });
 *
 *   return (
 *     <BottomNavigation
 *       navigationState={{ index, routes }}
 *       onIndexChange={setIndex}
 *       renderScene={renderScene}
 *     />
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ var BottomNavigation = function(param) {
    var navigationState = param.navigationState, renderScene = param.renderScene, renderIcon = param.renderIcon, renderLabel = param.renderLabel, renderTouchable = param.renderTouchable, getLabelText = param.getLabelText, getBadge = param.getBadge, getColor = param.getColor, getAccessibilityLabel = param.getAccessibilityLabel, getTestID = param.getTestID, activeColor = param.activeColor, inactiveColor = param.inactiveColor, _param_keyboardHidesNavigationBar = param.keyboardHidesNavigationBar, keyboardHidesNavigationBar = _param_keyboardHidesNavigationBar === void 0 ? _reactnative.Platform.OS === 'android' : _param_keyboardHidesNavigationBar, barStyle = param.barStyle, _param_labeled = param.labeled, labeled = _param_labeled === void 0 ? true : _param_labeled, style = param.style, activeIndicatorStyle = param.activeIndicatorStyle, _param_sceneAnimationEnabled = param.sceneAnimationEnabled, sceneAnimationEnabled = _param_sceneAnimationEnabled === void 0 ? false : _param_sceneAnimationEnabled, _param_sceneAnimationType = param.sceneAnimationType, sceneAnimationType = _param_sceneAnimationType === void 0 ? 'opacity' : _param_sceneAnimationType, sceneAnimationEasing = param.sceneAnimationEasing, onTabPress = param.onTabPress, onTabLongPress = param.onTabLongPress, onIndexChange = param.onIndexChange, shiftingProp = param.shifting, safeAreaInsets = param.safeAreaInsets, _param_labelMaxFontSizeMultiplier = param.labelMaxFontSizeMultiplier, labelMaxFontSizeMultiplier = _param_labelMaxFontSizeMultiplier === void 0 ? 1 : _param_labelMaxFontSizeMultiplier, compactProp = param.compact, _param_testID = param.testID, testID = _param_testID === void 0 ? 'bottom-navigation' : _param_testID, themeOverrides = param.theme, _param_getLazy = param.getLazy, getLazy = _param_getLazy === void 0 ? function(param) {
        var route = param.route;
        return route.lazy;
    } : _param_getLazy;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var scale = theme.animation.scale;
    var compact = compactProp != null ? compactProp : !theme.isV3;
    var shifting = shiftingProp != null ? shiftingProp : theme.isV3 ? false : navigationState.routes.length > 3;
    if (shifting && navigationState.routes.length < 2) {
        shifting = false;
        console.warn('BottomNavigation needs at least 2 tabs to run shifting animation');
    }
    var focusedKey = navigationState.routes[navigationState.index].key;
    /**
   * Active state of individual tab item positions:
   * -1 if they're before the active tab, 0 if they're active, 1 if they're after the active tab
   */ var tabsPositionAnims = (0, _useAnimatedValueArray.default)(navigationState.routes.map(function(_, i) {
        return i === navigationState.index ? 0 : i >= navigationState.index ? 1 : -1;
    }));
    /**
   * The top offset for each tab item to position it offscreen.
   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.
   * We use animated values for this to prevent unnecessary re-renders.
   */ var offsetsAnims = (0, _useAnimatedValueArray.default)(navigationState.routes.map(// offscreen === 1, normal === 0
    function(_, i) {
        return i === navigationState.index ? 0 : 1;
    }));
    /**
   * List of loaded tabs, tabs will be loaded when navigated to.
   */ var _React_useState = _sliced_to_array._(_react.useState([
        focusedKey
    ]), 2), loaded = _React_useState[0], setLoaded = _React_useState[1];
    if (!loaded.includes(focusedKey)) {
        // Set the current tab to be loaded if it was not loaded before
        setLoaded(function(loaded) {
            return _to_consumable_array._(loaded).concat([
                focusedKey
            ]);
        });
    }
    var animateToIndex = _react.useCallback(function(index) {
        _reactnative.Animated.parallel(_to_consumable_array._(navigationState.routes.map(function(_, i) {
            return _reactnative.Animated.timing(tabsPositionAnims[i], {
                toValue: i === index ? 0 : i >= index ? 1 : -1,
                duration: theme.isV3 || shifting ? 150 * scale : 0,
                useNativeDriver: true,
                easing: sceneAnimationEasing
            });
        }))).start(function(param) {
            var finished = param.finished;
            if (finished) {
                // Position all inactive screens offscreen to save memory usage
                // Only do it when animation has finished to avoid glitches mid-transition if switching fast
                offsetsAnims.forEach(function(offset, i) {
                    if (i === index) {
                        offset.setValue(0);
                    } else {
                        offset.setValue(1);
                    }
                });
            }
        });
    }, [
        shifting,
        navigationState.routes,
        offsetsAnims,
        scale,
        tabsPositionAnims,
        sceneAnimationEasing,
        theme
    ]);
    _react.useEffect(function() {
        // Workaround for native animated bug in react-native@^0.57
        // Context: https://github.com/callstack/react-native-paper/pull/637
        animateToIndex(navigationState.index);
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    var prevNavigationState = _react.useRef();
    _react.useEffect(function() {
        // Reset offsets of previous and current tabs before animation
        offsetsAnims.forEach(function(offset, i) {
            var _prevNavigationState_current;
            if (i === navigationState.index || i === ((_prevNavigationState_current = prevNavigationState.current) == null ? void 0 : _prevNavigationState_current.index)) {
                offset.setValue(0);
            }
        });
        animateToIndex(navigationState.index);
    }, [
        navigationState.index,
        animateToIndex,
        offsetsAnims
    ]);
    var handleTabPress = (0, _uselatestcallback.default)(function(event) {
        onTabPress == null ? void 0 : onTabPress(event);
        if (event.defaultPrevented) {
            return;
        }
        var index = navigationState.routes.findIndex(function(route) {
            return event.route.key === route.key;
        });
        if (index !== navigationState.index) {
            prevNavigationState.current = navigationState;
            onIndexChange(index);
        }
    });
    var jumpTo = (0, _uselatestcallback.default)(function(key) {
        var index = navigationState.routes.findIndex(function(route) {
            return route.key === key;
        });
        prevNavigationState.current = navigationState;
        onIndexChange(index);
    });
    var routes = navigationState.routes;
    var colors = theme.colors;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
        style: [
            styles.container,
            style
        ],
        testID: testID,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                style: [
                    styles.content,
                    {
                        backgroundColor: colors == null ? void 0 : colors.background
                    }
                ],
                children: routes.map(function(route, index) {
                    var _prevNavigationState_current;
                    if (getLazy({
                        route: route
                    }) !== false && !loaded.includes(route.key)) {
                        // Don't render a screen if we've never navigated to it
                        return null;
                    }
                    var focused = navigationState.index === index;
                    var previouslyFocused = ((_prevNavigationState_current = prevNavigationState.current) == null ? void 0 : _prevNavigationState_current.index) === index;
                    var countAlphaOffscreen = sceneAnimationEnabled && (focused || previouslyFocused);
                    var renderToHardwareTextureAndroid = sceneAnimationEnabled && focused;
                    var opacity = sceneAnimationEnabled ? tabsPositionAnims[index].interpolate({
                        inputRange: [
                            -1,
                            0,
                            1
                        ],
                        outputRange: [
                            0,
                            1,
                            0
                        ]
                    }) : focused ? 1 : 0;
                    var offsetTarget = focused ? 0 : FAR_FAR_AWAY;
                    var top = sceneAnimationEnabled ? offsetsAnims[index].interpolate({
                        inputRange: [
                            0,
                            1
                        ],
                        outputRange: [
                            0,
                            offsetTarget
                        ]
                    }) : offsetTarget;
                    var left = sceneAnimationType === 'shifting' ? tabsPositionAnims[index].interpolate({
                        inputRange: [
                            -1,
                            0,
                            1
                        ],
                        outputRange: [
                            -50,
                            0,
                            50
                        ]
                    }) : 0;
                    var zIndex = focused ? 1 : 0;
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigationRouteScreen.default, {
                        pointerEvents: focused ? 'auto' : 'none',
                        accessibilityElementsHidden: !focused,
                        importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',
                        index: index,
                        visibility: opacity,
                        style: [
                            _reactnative.StyleSheet.absoluteFill,
                            {
                                zIndex: zIndex
                            }
                        ],
                        collapsable: false,
                        removeClippedSubviews: // On iOS, set removeClippedSubviews to true only when not focused
                        // This is an workaround for a bug where the clipped view never re-appears
                        _reactnative.Platform.OS === 'ios' ? navigationState.index !== index : true,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, _extends._({}, _reactnative.Platform.OS === 'android' && {
                            needsOffscreenAlphaCompositing: countAlphaOffscreen
                        }, {
                            renderToHardwareTextureAndroid: renderToHardwareTextureAndroid,
                            style: [
                                styles.content,
                                {
                                    opacity: opacity,
                                    transform: [
                                        {
                                            translateX: left
                                        },
                                        {
                                            translateY: top
                                        }
                                    ]
                                }
                            ],
                            children: renderScene({
                                route: route,
                                jumpTo: jumpTo
                            })
                        }))
                    }, route.key);
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigationBar.default, {
                navigationState: navigationState,
                renderIcon: renderIcon,
                renderLabel: renderLabel,
                renderTouchable: renderTouchable,
                getLabelText: getLabelText,
                getBadge: getBadge,
                getColor: getColor,
                getAccessibilityLabel: getAccessibilityLabel,
                getTestID: getTestID,
                activeColor: activeColor,
                inactiveColor: inactiveColor,
                keyboardHidesNavigationBar: keyboardHidesNavigationBar,
                style: barStyle,
                activeIndicatorStyle: activeIndicatorStyle,
                labeled: labeled,
                animationEasing: sceneAnimationEasing,
                onTabPress: handleTabPress,
                onTabLongPress: onTabLongPress,
                shifting: shifting,
                safeAreaInsets: safeAreaInsets,
                labelMaxFontSizeMultiplier: labelMaxFontSizeMultiplier,
                compact: compact,
                testID: "" + testID + "-bar",
                theme: theme
            })
        ]
    });
};
/**
 * Function which takes a map of route keys to components.
 * Pure components are used to minimize re-rendering of the pages.
 * This drastically improves the animation performance.
 */ BottomNavigation.SceneMap = function(scenes) {
    return function(param) {
        var route = param.route, jumpTo = param.jumpTo;
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(SceneComponent, {
            component: scenes[route.key ? route.key : ''],
            route: route,
            jumpTo: jumpTo
        }, route.key);
    };
};
// @component ./BottomNavigationBar.tsx
BottomNavigation.Bar = _BottomNavigationBar.default;
var _default = BottomNavigation;
var styles = _reactnative.StyleSheet.create({
    container: {
        flex: 1,
        overflow: 'hidden'
    },
    content: {
        flex: 1
    }
});


}),
"506": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _sliced_to_array = __webpack_require__(38097);
var _to_consumable_array = __webpack_require__(2670);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _reactnativesafeareacontext = __webpack_require__(24144);
var _utils = __webpack_require__(44288);
var _theming = __webpack_require__(10968);
var _overlay = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87701));
var _colors = __webpack_require__(18847);
var _useAnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83451));
var _useAnimatedValueArray = /*#__PURE__*/ _interop_require_default._(__webpack_require__(29838));
var _useIsKeyboardShown = /*#__PURE__*/ _interop_require_default._(__webpack_require__(42497));
var _useLayout = /*#__PURE__*/ _interop_require_default._(__webpack_require__(67885));
var _Badge = /*#__PURE__*/ _interop_require_default._(__webpack_require__(60515));
var _Icon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80639));
var _Surface = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2403));
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
var MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation
var MIN_TAB_WIDTH = 96;
var MAX_TAB_WIDTH = 168;
var BAR_HEIGHT = 56;
var OUTLINE_WIDTH = 64;
var Touchable = function(_param) {
    var _0 = _param.route, style = _param.style, children = _param.children, borderless = _param.borderless, centered = _param.centered, rippleColor = _param.rippleColor, rest = _object_without_properties_loose._(_param, [
        "route",
        "style",
        "children",
        "borderless",
        "centered",
        "rippleColor"
    ]);
    return _TouchableRipple.default.supported ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, _extends._({}, rest, {
        disabled: rest.disabled || undefined,
        borderless: borderless,
        centered: centered,
        rippleColor: rippleColor,
        style: style,
        children: children
    })) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Pressable, _extends._({
        style: style
    }, rest, {
        children: children
    }));
};
/**
 * A navigation bar which can easily be integrated with [React Navigation's Bottom Tabs Navigator](https://reactnavigation.org/docs/bottom-tab-navigator/).
 *
 * ## Usage
 * ```js
 * import React from 'react';
 * import { View, StyleSheet } from 'react-native';
 *
 * import { CommonActions } from '@react-navigation/native';
 * import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
 * import { Text, BottomNavigation } from 'react-native-paper';
 * import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
 *
 * const Tab = createBottomTabNavigator();
 *
 * export default function MyComponent() {
 *   return (
 *     <Tab.Navigator
 *       screenOptions={{
 *         headerShown: false,
 *       }}
 *       tabBar={({ navigation, state, descriptors, insets }) => (
 *         <BottomNavigation.Bar
 *           navigationState={state}
 *          safeAreaInsets={insets}
 *           onTabPress={({ route, preventDefault }) => {
 *             const event = navigation.emit({
 *               type: 'tabPress',
 *               target: route.key,
 *               canPreventDefault: true,
 *             });
 *
 *             if (event.defaultPrevented) {
 *               preventDefault();
 *             } else {
 *              navigation.dispatch({
 *                 ...CommonActions.navigate(route.name, route.params),
 *                 target: state.key,
 *               });
 *             }
 *           }}
 *           renderIcon={({ route, focused, color }) => {
 *             const { options } = descriptors[route.key];
 *             if (options.tabBarIcon) {
 *               return options.tabBarIcon({ focused, color, size: 24 });
 *             }
 *
 *             return null;
 *           }}
 *           getLabelText={({ route }) => {
 *             const { options } = descriptors[route.key];
 *             const label =
 *               options.tabBarLabel !== undefined
 *                 ? options.tabBarLabel
 *                 : options.title !== undefined
 *                 ? options.title
 *                 : route.title;
 *
 *             return label;
 *           }}
 *         />
 *       )}
 *     >
 *       <Tab.Screen
 *         name="Home"
 *         component={HomeScreen}
 *         options={{
 *           tabBarLabel: 'Home',
 *           tabBarIcon: ({ color, size }) => {
 *             return <Icon name="home" size={size} color={color} />;
 *           },
 *         }}
 *       />
 *       <Tab.Screen
 *         name="Settings"
 *         component={SettingsScreen}
 *         options={{
 *           tabBarLabel: 'Settings',
 *           tabBarIcon: ({ color, size }) => {
 *             return <Icon name="cog" size={size} color={color} />;
 *           },
 *         }}
 *       />
 *     </Tab.Navigator>
 *   );
 * }
 *
 * function HomeScreen() {
 *   return (
 *     <View style={styles.container}>
 *       <Text variant="headlineMedium">Home!</Text>
 *     </View>
 *   );
 * }
 *
 * function SettingsScreen() {
 *   return (
 *     <View style={styles.container}>
 *       <Text variant="headlineMedium">Settings!</Text>
 *     </View>
 *   );
 * }
 *
 * const styles = StyleSheet.create({
 *   container: {
 *     flex: 1,
 *     justifyContent: 'center',
 *     alignItems: 'center',
 *   },
 * });
 * ```
 */ var BottomNavigationBar = function(param) {
    var navigationState = param.navigationState, renderIcon = param.renderIcon, renderLabel = param.renderLabel, _param_renderTouchable = param.renderTouchable, renderTouchable = _param_renderTouchable === void 0 ? function(props) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(Touchable, _extends._({}, props));
    } : _param_renderTouchable, _param_getLabelText = param.getLabelText, getLabelText = _param_getLabelText === void 0 ? function(param) {
        var route = param.route;
        return route.title;
    } : _param_getLabelText, _param_getBadge = param.getBadge, getBadge = _param_getBadge === void 0 ? function(param) {
        var route = param.route;
        return route.badge;
    } : _param_getBadge, _param_getColor = param.getColor, getColor = _param_getColor === void 0 ? function(param) {
        var route = param.route;
        return route.color;
    } : _param_getColor, _param_getAccessibilityLabel = param.getAccessibilityLabel, getAccessibilityLabel = _param_getAccessibilityLabel === void 0 ? function(param) {
        var route = param.route;
        return route.accessibilityLabel;
    } : _param_getAccessibilityLabel, _param_getTestID = param.getTestID, getTestID = _param_getTestID === void 0 ? function(param) {
        var route = param.route;
        return route.testID;
    } : _param_getTestID, activeColor = param.activeColor, inactiveColor = param.inactiveColor, _param_keyboardHidesNavigationBar = param.keyboardHidesNavigationBar, keyboardHidesNavigationBar = _param_keyboardHidesNavigationBar === void 0 ? _reactnative.Platform.OS === 'android' : _param_keyboardHidesNavigationBar, style = param.style, activeIndicatorStyle = param.activeIndicatorStyle, _param_labeled = param.labeled, labeled = _param_labeled === void 0 ? true : _param_labeled, animationEasing = param.animationEasing, onTabPress = param.onTabPress, onTabLongPress = param.onTabLongPress, shiftingProp = param.shifting, safeAreaInsets = param.safeAreaInsets, _param_labelMaxFontSizeMultiplier = param.labelMaxFontSizeMultiplier, labelMaxFontSizeMultiplier = _param_labelMaxFontSizeMultiplier === void 0 ? 1 : _param_labelMaxFontSizeMultiplier, compactProp = param.compact, _param_testID = param.testID, testID = _param_testID === void 0 ? 'bottom-navigation-bar' : _param_testID, themeOverrides = param.theme;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _useSafeAreaInsets = (0, _reactnativesafeareacontext.useSafeAreaInsets)(), bottom = _useSafeAreaInsets.bottom, left = _useSafeAreaInsets.left, right = _useSafeAreaInsets.right;
    var scale = theme.animation.scale;
    var compact = compactProp != null ? compactProp : !theme.isV3;
    var shifting = shiftingProp != null ? shiftingProp : theme.isV3 ? false : navigationState.routes.length > 3;
    if (shifting && navigationState.routes.length < 2) {
        shifting = false;
        console.warn('BottomNavigation.Bar needs at least 2 tabs to run shifting animation');
    }
    /**
   * Visibility of the navigation bar, visible state is 1 and invisible is 0.
   */ var visibleAnim = (0, _useAnimatedValue.default)(1);
    /**
   * Active state of individual tab items, active state is 1 and inactive state is 0.
   */ var tabsAnims = (0, _useAnimatedValueArray.default)(navigationState.routes.map(// focused === 1, unfocused === 0
    function(_, i) {
        return i === navigationState.index ? 1 : 0;
    }));
    /**
   * Index of the currently active tab. Used for setting the background color.
   * We don't use the color as an animated value directly, because `setValue` seems to be buggy with colors?.
   */ var indexAnim = (0, _useAnimatedValue.default)(navigationState.index);
    /**
   * Animation for the background color ripple, used to determine it's scale and opacity.
   */ var rippleAnim = (0, _useAnimatedValue.default)(MIN_RIPPLE_SCALE);
    /**
   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.
   */ var _useLayout1 = _sliced_to_array._((0, _useLayout.default)(), 2), layout = _useLayout1[0], onLayout = _useLayout1[1];
    /**
   * Track whether the keyboard is visible to show and hide the navigation bar.
   */ var _React_useState = _sliced_to_array._(_react.useState(false), 2), keyboardVisible = _React_useState[0], setKeyboardVisible = _React_useState[1];
    var handleKeyboardShow = _react.useCallback(function() {
        setKeyboardVisible(true);
        _reactnative.Animated.timing(visibleAnim, {
            toValue: 0,
            duration: 150 * scale,
            useNativeDriver: true
        }).start();
    }, [
        scale,
        visibleAnim
    ]);
    var handleKeyboardHide = _react.useCallback(function() {
        _reactnative.Animated.timing(visibleAnim, {
            toValue: 1,
            duration: 100 * scale,
            useNativeDriver: true
        }).start(function() {
            setKeyboardVisible(false);
        });
    }, [
        scale,
        visibleAnim
    ]);
    var animateToIndex = _react.useCallback(function(index) {
        // Reset the ripple to avoid glitch if it's currently animating
        rippleAnim.setValue(MIN_RIPPLE_SCALE);
        _reactnative.Animated.parallel([
            _reactnative.Animated.timing(rippleAnim, {
                toValue: 1,
                duration: theme.isV3 || shifting ? 400 * scale : 0,
                useNativeDriver: true
            })
        ].concat(_to_consumable_array._(navigationState.routes.map(function(_, i) {
            return _reactnative.Animated.timing(tabsAnims[i], {
                toValue: i === index ? 1 : 0,
                duration: theme.isV3 || shifting ? 150 * scale : 0,
                useNativeDriver: true,
                easing: animationEasing
            });
        })))).start(function() {
            // Workaround a bug in native animations where this is reset after first animation
            tabsAnims.map(function(tab, i) {
                return tab.setValue(i === index ? 1 : 0);
            });
            // Update the index to change bar's background color and then hide the ripple
            indexAnim.setValue(index);
            rippleAnim.setValue(MIN_RIPPLE_SCALE);
        });
    }, [
        rippleAnim,
        theme.isV3,
        shifting,
        scale,
        navigationState.routes,
        tabsAnims,
        animationEasing,
        indexAnim
    ]);
    _react.useEffect(function() {
        // Workaround for native animated bug in react-native@^0.57
        // Context: https://github.com/callstack/react-native-paper/pull/637
        animateToIndex(navigationState.index);
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    (0, _useIsKeyboardShown.default)({
        onShow: handleKeyboardShow,
        onHide: handleKeyboardHide
    });
    _react.useEffect(function() {
        animateToIndex(navigationState.index);
    }, [
        navigationState.index,
        animateToIndex
    ]);
    var eventForIndex = function(index) {
        var event = {
            route: navigationState.routes[index],
            defaultPrevented: false,
            preventDefault: function() {
                event.defaultPrevented = true;
            }
        };
        return event;
    };
    var routes = navigationState.routes;
    var colors = theme.colors, isDarkTheme = theme.dark, mode = theme.mode, isV3 = theme.isV3;
    var _ref = _reactnative.StyleSheet.flatten(style) || {}, customBackground = _ref.backgroundColor, _ref_elevation = _ref.elevation, elevation = _ref_elevation === void 0 ? 4 : _ref_elevation;
    var approxBackgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? (0, _overlay.default)(elevation, colors == null ? void 0 : colors.surface) : colors == null ? void 0 : colors.primary;
    var v2BackgroundColorInterpolation = shifting ? indexAnim.interpolate({
        inputRange: routes.map(function(_, i) {
            return i;
        }),
        // FIXME: does outputRange support ColorValue or just strings?
        // @ts-expect-error
        outputRange: routes.map(function(route) {
            return getColor({
                route: route
            }) || approxBackgroundColor;
        })
    }) : approxBackgroundColor;
    var backgroundColor = isV3 ? customBackground || theme.colors.elevation.level2 : shifting ? v2BackgroundColorInterpolation : approxBackgroundColor;
    var isDark = typeof approxBackgroundColor === 'string' ? !(0, _color.default)(approxBackgroundColor).isLight() : true;
    var textColor = isDark ? _colors.white : _colors.black;
    var activeTintColor = (0, _utils.getActiveTintColor)({
        activeColor: activeColor,
        defaultColor: textColor,
        theme: theme
    });
    var inactiveTintColor = (0, _utils.getInactiveTintColor)({
        inactiveColor: inactiveColor,
        defaultColor: textColor,
        theme: theme
    });
    var touchColor = (0, _color.default)(activeTintColor).alpha(0.12).rgb().string();
    var maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;
    var maxTabBarWidth = maxTabWidth * routes.length;
    var rippleSize = layout.width / 4;
    var _safeAreaInsets_left, _safeAreaInsets_right, _safeAreaInsets_bottom;
    var insets = {
        left: (_safeAreaInsets_left = safeAreaInsets == null ? void 0 : safeAreaInsets.left) != null ? _safeAreaInsets_left : left,
        right: (_safeAreaInsets_right = safeAreaInsets == null ? void 0 : safeAreaInsets.right) != null ? _safeAreaInsets_right : right,
        bottom: (_safeAreaInsets_bottom = safeAreaInsets == null ? void 0 : safeAreaInsets.bottom) != null ? _safeAreaInsets_bottom : bottom
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Surface.default, _extends._({}, theme.isV3 && {
        elevation: 0
    }, {
        testID: testID,
        style: [
            !theme.isV3 && styles.elevation,
            styles.bar,
            keyboardHidesNavigationBar // eslint-disable-next-line react-native/no-inline-styles
             ? {
                // When the keyboard is shown, slide down the navigation bar
                transform: [
                    {
                        translateY: visibleAnim.interpolate({
                            inputRange: [
                                0,
                                1
                            ],
                            outputRange: [
                                layout.height,
                                0
                            ]
                        })
                    }
                ],
                // Absolutely position the navigation bar so that the content is below it
                // This is needed to avoid gap at bottom when the navigation bar is hidden
                position: keyboardVisible ? 'absolute' : undefined
            } : null,
            style
        ],
        pointerEvents: layout.measured ? keyboardHidesNavigationBar && keyboardVisible ? 'none' : 'auto' : 'none',
        onLayout: onLayout,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
            style: [
                styles.barContent,
                {
                    backgroundColor: backgroundColor
                }
            ],
            testID: "" + testID + "-content",
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                style: [
                    styles.items,
                    {
                        marginBottom: insets.bottom,
                        marginHorizontal: Math.max(insets.left, insets.right)
                    },
                    compact && {
                        maxWidth: maxTabBarWidth
                    }
                ],
                accessibilityRole: 'tablist',
                testID: "" + testID + "-content-wrapper",
                children: [
                    shifting && !isV3 ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                        pointerEvents: "none",
                        style: [
                            styles.ripple,
                            {
                                // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.
                                // We need to move it from the top to center of the navigation bar and from the left to the active tab.
                                top: (BAR_HEIGHT - rippleSize) / 2,
                                left: Math.min(layout.width, maxTabBarWidth) / routes.length * (navigationState.index + 0.5) - rippleSize / 2,
                                height: rippleSize,
                                width: rippleSize,
                                borderRadius: rippleSize / 2,
                                backgroundColor: getColor({
                                    route: routes[navigationState.index]
                                }),
                                transform: [
                                    {
                                        // Scale to twice the size  to ensure it covers the whole navigation bar
                                        scale: rippleAnim.interpolate({
                                            inputRange: [
                                                0,
                                                1
                                            ],
                                            outputRange: [
                                                0,
                                                8
                                            ]
                                        })
                                    }
                                ],
                                opacity: rippleAnim.interpolate({
                                    inputRange: [
                                        0,
                                        MIN_RIPPLE_SCALE,
                                        0.3,
                                        1
                                    ],
                                    outputRange: [
                                        0,
                                        0,
                                        1,
                                        1
                                    ]
                                })
                            }
                        ],
                        testID: "" + testID + "-content-ripple"
                    }) : null,
                    routes.map(function(route, index) {
                        var focused = navigationState.index === index;
                        var active = tabsAnims[index];
                        // Scale the label up
                        var scale = labeled && shifting ? active.interpolate({
                            inputRange: [
                                0,
                                1
                            ],
                            outputRange: [
                                0.5,
                                1
                            ]
                        }) : 1;
                        // Move down the icon to account for no-label in shifting and smaller label in non-shifting.
                        var translateY = labeled ? shifting ? active.interpolate({
                            inputRange: [
                                0,
                                1
                            ],
                            outputRange: [
                                7,
                                0
                            ]
                        }) : 0 : 7;
                        // We render the active icon and label on top of inactive ones and cross-fade them on change.
                        // This trick gives the illusion that we are animating between active and inactive colors.
                        // This is to ensure that we can use native driver, as colors cannot be animated with native driver.
                        var activeOpacity = active;
                        var inactiveOpacity = active.interpolate({
                            inputRange: [
                                0,
                                1
                            ],
                            outputRange: [
                                1,
                                0
                            ]
                        });
                        var v3ActiveOpacity = focused ? 1 : 0;
                        var v3InactiveOpacity = shifting ? inactiveOpacity : focused ? 0 : 1;
                        // Scale horizontally the outline pill
                        var outlineScale = focused ? active.interpolate({
                            inputRange: [
                                0,
                                1
                            ],
                            outputRange: [
                                0.5,
                                1
                            ]
                        }) : 0;
                        var badge = getBadge({
                            route: route
                        });
                        var activeLabelColor = (0, _utils.getLabelColor)({
                            tintColor: activeTintColor,
                            hasColor: Boolean(activeColor),
                            focused: focused,
                            defaultColor: textColor,
                            theme: theme
                        });
                        var inactiveLabelColor = (0, _utils.getLabelColor)({
                            tintColor: inactiveTintColor,
                            hasColor: Boolean(inactiveColor),
                            focused: focused,
                            defaultColor: textColor,
                            theme: theme
                        });
                        var badgeStyle = {
                            top: !isV3 ? -2 : typeof badge === 'boolean' ? 4 : 2,
                            right: (badge != null && typeof badge !== 'boolean' ? String(badge).length * -2 : 0) - (!isV3 ? 2 : 0)
                        };
                        var isV3Shifting = isV3 && shifting && labeled;
                        var font = isV3 ? theme.fonts.labelMedium : {};
                        return renderTouchable({
                            key: route.key,
                            route: route,
                            borderless: true,
                            centered: true,
                            rippleColor: isV3 ? 'transparent' : touchColor,
                            onPress: function() {
                                return onTabPress(eventForIndex(index));
                            },
                            onLongPress: function() {
                                return onTabLongPress == null ? void 0 : onTabLongPress(eventForIndex(index));
                            },
                            testID: getTestID({
                                route: route
                            }),
                            accessibilityLabel: getAccessibilityLabel({
                                route: route
                            }),
                            accessibilityRole: _reactnative.Platform.OS === 'ios' ? 'button' : 'tab',
                            accessibilityState: {
                                selected: focused
                            },
                            style: [
                                styles.item,
                                isV3 && styles.v3Item
                            ],
                            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                                pointerEvents: "none",
                                style: isV3 && (labeled ? styles.v3TouchableContainer : styles.v3NoLabelContainer),
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.Animated.View, {
                                        style: [
                                            styles.iconContainer,
                                            isV3 && styles.v3IconContainer,
                                            (!isV3 || isV3Shifting) && {
                                                transform: [
                                                    {
                                                        translateY: translateY
                                                    }
                                                ]
                                            }
                                        ],
                                        children: [
                                            isV3 && focused && /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                                                style: [
                                                    styles.outline,
                                                    {
                                                        transform: [
                                                            {
                                                                scaleX: outlineScale
                                                            }
                                                        ],
                                                        backgroundColor: theme.colors.secondaryContainer
                                                    },
                                                    activeIndicatorStyle
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                                                style: [
                                                    styles.iconWrapper,
                                                    isV3 && styles.v3IconWrapper,
                                                    {
                                                        opacity: isV3 ? v3ActiveOpacity : activeOpacity
                                                    }
                                                ],
                                                children: renderIcon ? renderIcon({
                                                    route: route,
                                                    focused: true,
                                                    color: activeTintColor
                                                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.default, {
                                                    source: route.focusedIcon,
                                                    color: activeTintColor,
                                                    size: 24
                                                })
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                                                style: [
                                                    styles.iconWrapper,
                                                    isV3 && styles.v3IconWrapper,
                                                    {
                                                        opacity: isV3 ? v3InactiveOpacity : inactiveOpacity
                                                    }
                                                ],
                                                children: renderIcon ? renderIcon({
                                                    route: route,
                                                    focused: false,
                                                    color: inactiveTintColor
                                                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.default, {
                                                    source: theme.isV3 && route.unfocusedIcon !== undefined ? route.unfocusedIcon : route.focusedIcon,
                                                    color: inactiveTintColor,
                                                    size: 24
                                                })
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                                                style: [
                                                    styles.badgeContainer,
                                                    badgeStyle
                                                ],
                                                children: typeof badge === 'boolean' ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_Badge.default, {
                                                    visible: badge,
                                                    size: isV3 ? 6 : 8
                                                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_Badge.default, {
                                                    visible: badge != null,
                                                    size: 16,
                                                    children: badge
                                                })
                                            })
                                        ]
                                    }),
                                    labeled ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.Animated.View, {
                                        style: [
                                            styles.labelContainer,
                                            !isV3 && {
                                                transform: [
                                                    {
                                                        scale: scale
                                                    }
                                                ]
                                            }
                                        ],
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                                                style: [
                                                    styles.labelWrapper,
                                                    (!isV3 || isV3Shifting) && {
                                                        opacity: activeOpacity
                                                    }
                                                ],
                                                children: renderLabel ? renderLabel({
                                                    route: route,
                                                    focused: true,
                                                    color: activeLabelColor
                                                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                                                    maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
                                                    variant: "labelMedium",
                                                    style: [
                                                        styles.label,
                                                        _extends._({
                                                            color: activeLabelColor
                                                        }, font)
                                                    ],
                                                    children: getLabelText({
                                                        route: route
                                                    })
                                                })
                                            }),
                                            shifting ? null : /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                                                style: [
                                                    styles.labelWrapper,
                                                    {
                                                        opacity: inactiveOpacity
                                                    }
                                                ],
                                                children: renderLabel ? renderLabel({
                                                    route: route,
                                                    focused: false,
                                                    color: inactiveLabelColor
                                                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                                                    maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
                                                    variant: "labelMedium",
                                                    selectable: false,
                                                    style: [
                                                        styles.label,
                                                        _extends._({
                                                            color: inactiveLabelColor
                                                        }, font)
                                                    ],
                                                    children: getLabelText({
                                                        route: route
                                                    })
                                                })
                                            })
                                        ]
                                    }) : !isV3 && /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                                        style: styles.labelContainer
                                    })
                                ]
                            })
                        });
                    })
                ]
            })
        })
    }));
};
BottomNavigationBar.displayName = 'BottomNavigation.Bar';
var _default = BottomNavigationBar;
var styles = _reactnative.StyleSheet.create({
    bar: {
        left: 0,
        right: 0,
        bottom: 0
    },
    barContent: {
        alignItems: 'center',
        overflow: 'hidden'
    },
    items: _extends._({
        flexDirection: 'row'
    }, _reactnative.Platform.OS === 'web' ? {
        width: '100%'
    } : null),
    item: {
        flex: 1,
        // Top padding is 6 and bottom padding is 10
        // The extra 4dp bottom padding is offset by label's height
        paddingVertical: 6
    },
    v3Item: {
        paddingVertical: 0
    },
    ripple: {
        position: 'absolute'
    },
    iconContainer: {
        height: 24,
        width: 24,
        marginTop: 2,
        marginHorizontal: 12,
        alignSelf: 'center'
    },
    v3IconContainer: {
        height: 32,
        width: 32,
        marginBottom: 4,
        marginTop: 0,
        justifyContent: 'center'
    },
    iconWrapper: _extends._({}, _reactnative.StyleSheet.absoluteFillObject, {
        alignItems: 'center'
    }),
    v3IconWrapper: {
        top: 4
    },
    labelContainer: {
        height: 16,
        paddingBottom: 2
    },
    labelWrapper: _extends._({}, _reactnative.StyleSheet.absoluteFillObject),
    // eslint-disable-next-line react-native/no-color-literals
    label: _extends._({
        fontSize: 12,
        height: BAR_HEIGHT,
        textAlign: 'center',
        backgroundColor: 'transparent'
    }, _reactnative.Platform.OS === 'web' ? {
        whiteSpace: 'nowrap',
        alignSelf: 'center'
    } : null),
    badgeContainer: {
        position: 'absolute',
        left: 0
    },
    v3TouchableContainer: {
        paddingTop: 12,
        paddingBottom: 16
    },
    v3NoLabelContainer: {
        height: 80,
        justifyContent: 'center',
        alignItems: 'center'
    },
    outline: {
        width: OUTLINE_WIDTH,
        height: OUTLINE_WIDTH / 2,
        borderRadius: OUTLINE_WIDTH / 4,
        alignSelf: 'center'
    },
    elevation: {
        elevation: 4
    }
});


}),
"10338": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _inherits = __webpack_require__(92985);
var _interop_require_default = __webpack_require__(60133);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var BottomNavigationRouteScreen = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(BottomNavigationRouteScreen, _React_Component);
    function BottomNavigationRouteScreen() {
        return _React_Component.apply(this, arguments) || this;
    }
    var _proto = BottomNavigationRouteScreen.prototype;
    _proto.render = function render() {
        var _this_props = this.props, style = _this_props.style, index = _this_props.index, children = _this_props.children, visibility = _this_props.visibility, rest = _object_without_properties_loose._(_this_props, [
            "style",
            "index",
            "children",
            "visibility"
        ]);
        // On Web, the unfocused tab screens can still be clicked since they are transparent, but still there
        // Hiding them with `display: none` makes sure that they won't receive clicks
        // We only set it on Web since on native, react-native-pager-view's breaks due to layout changing
        var display = _reactnative.Platform.OS === 'web' ? visibility === 0 ? 'none' : 'flex' : undefined;
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _extends._({
            testID: "RouteScreen: " + index,
            style: [
                style,
                {
                    display: display
                }
            ]
        }, rest, {
            children: children
        }));
    };
    return BottomNavigationRouteScreen;
}(_react.default.Component);
var _default = _reactnative.Animated.createAnimatedComponent(BottomNavigationRouteScreen);


}),
"79972": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _utils = __webpack_require__(56010);
var _theming = __webpack_require__(10968);
var _forwardRef = __webpack_require__(45835);
var _hasTouchHandler = /*#__PURE__*/ _interop_require_default._(__webpack_require__(35717));
var _splitStyles = __webpack_require__(45975);
var _ActivityIndicator = /*#__PURE__*/ _interop_require_default._(__webpack_require__(94908));
var _Icon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80639));
var _Surface = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2403));
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
/**
 * A button is component that the user can press to trigger an action.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Button } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Button icon="camera" mode="contained" onPress={() => console.log('Pressed')}>
 *     Press me
 *   </Button>
 * );
 *
 * export default MyComponent;
 * ```
 */ var Button = function(_param, ref) {
    var disabled = _param.disabled, compact = _param.compact, _param_mode = _param.mode, mode = _param_mode === void 0 ? 'text' : _param_mode, dark = _param.dark, loading = _param.loading, icon = _param.icon, customButtonColor = _param.buttonColor, customTextColor = _param.textColor, customRippleColor = _param.rippleColor, children = _param.children, accessibilityLabel = _param.accessibilityLabel, accessibilityHint = _param.accessibilityHint, _param_accessibilityRole = _param.accessibilityRole, accessibilityRole = _param_accessibilityRole === void 0 ? 'button' : _param_accessibilityRole, onPress = _param.onPress, onPressIn = _param.onPressIn, onPressOut = _param.onPressOut, onLongPress = _param.onLongPress, delayLongPress = _param.delayLongPress, style = _param.style, themeOverrides = _param.theme, uppercaseProp = _param.uppercase, contentStyle = _param.contentStyle, labelStyle = _param.labelStyle, _param_testID = _param.testID, testID = _param_testID === void 0 ? 'button' : _param_testID, accessible = _param.accessible, background = _param.background, maxFontSizeMultiplier = _param.maxFontSizeMultiplier, touchableRef = _param.touchableRef, rest = _object_without_properties_loose._(_param, [
        "disabled",
        "compact",
        "mode",
        "dark",
        "loading",
        "icon",
        "buttonColor",
        "textColor",
        "rippleColor",
        "children",
        "accessibilityLabel",
        "accessibilityHint",
        "accessibilityRole",
        "onPress",
        "onPressIn",
        "onPressOut",
        "onLongPress",
        "delayLongPress",
        "style",
        "theme",
        "uppercase",
        "contentStyle",
        "labelStyle",
        "testID",
        "accessible",
        "background",
        "maxFontSizeMultiplier",
        "touchableRef"
    ]);
    var _StyleSheet_flatten;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isMode = _react.useCallback(function(modeToCompare) {
        return mode === modeToCompare;
    }, [
        mode
    ]);
    var roundness = theme.roundness, isV3 = theme.isV3, animation = theme.animation;
    var uppercase = uppercaseProp != null ? uppercaseProp : !theme.isV3;
    var hasPassedTouchHandler = (0, _hasTouchHandler.default)({
        onPress: onPress,
        onPressIn: onPressIn,
        onPressOut: onPressOut,
        onLongPress: onLongPress
    });
    var isElevationEntitled = !disabled && (isV3 ? isMode('elevated') : isMode('contained'));
    var initialElevation = isV3 ? 1 : 2;
    var activeElevation = isV3 ? 2 : 8;
    var _React_useRef = _react.useRef(new _reactnative.Animated.Value(isElevationEntitled ? initialElevation : 0)), elevation = _React_useRef.current;
    _react.useEffect(function() {
        elevation.setValue(isElevationEntitled ? initialElevation : 0);
    }, [
        isElevationEntitled,
        elevation,
        initialElevation
    ]);
    var handlePressIn = function(e) {
        onPressIn == null ? void 0 : onPressIn(e);
        if (isV3 ? isMode('elevated') : isMode('contained')) {
            var scale = animation.scale;
            _reactnative.Animated.timing(elevation, {
                toValue: activeElevation,
                duration: 200 * scale,
                useNativeDriver: _reactnative.Platform.OS === 'web' || _reactnative.Platform.constants.reactNativeVersion.minor <= 72
            }).start();
        }
    };
    var handlePressOut = function(e) {
        onPressOut == null ? void 0 : onPressOut(e);
        if (isV3 ? isMode('elevated') : isMode('contained')) {
            var scale = animation.scale;
            _reactnative.Animated.timing(elevation, {
                toValue: initialElevation,
                duration: 150 * scale,
                useNativeDriver: _reactnative.Platform.OS === 'web' || _reactnative.Platform.constants.reactNativeVersion.minor <= 72
            }).start();
        }
    };
    var flattenedStyles = _reactnative.StyleSheet.flatten(style) || {};
    var _splitStyles1 = _sliced_to_array._((0, _splitStyles.splitStyles)(flattenedStyles, function(style) {
        return style.startsWith('border') && style.endsWith('Radius');
    }), 2), borderRadiusStyles = _splitStyles1[1];
    var borderRadius = (isV3 ? 5 : 1) * roundness;
    var iconSize = isV3 ? 18 : 16;
    var _getButtonColors = (0, _utils.getButtonColors)({
        customButtonColor: customButtonColor,
        customTextColor: customTextColor,
        theme: theme,
        mode: mode,
        disabled: disabled,
        dark: dark
    }), backgroundColor = _getButtonColors.backgroundColor, borderColor = _getButtonColors.borderColor, textColor = _getButtonColors.textColor, borderWidth = _getButtonColors.borderWidth;
    var rippleColor = customRippleColor || (0, _color.default)(textColor).alpha(0.12).rgb().string();
    var _borderRadiusStyles_borderRadius;
    var touchableStyle = _extends._({}, borderRadiusStyles, {
        borderRadius: (_borderRadiusStyles_borderRadius = borderRadiusStyles.borderRadius) != null ? _borderRadiusStyles_borderRadius : borderRadius
    });
    var buttonStyle = _extends._({
        backgroundColor: backgroundColor,
        borderColor: borderColor,
        borderWidth: borderWidth
    }, touchableStyle);
    var _ref = _reactnative.StyleSheet.flatten(labelStyle) || {}, customLabelColor = _ref.color, customLabelSize = _ref.fontSize;
    var font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;
    var textStyle = _extends._({
        color: textColor
    }, font);
    var iconStyle = ((_StyleSheet_flatten = _reactnative.StyleSheet.flatten(contentStyle)) == null ? void 0 : _StyleSheet_flatten.flexDirection) === 'row-reverse' ? [
        styles.iconReverse,
        isV3 && styles["md3IconReverse" + (compact ? 'Compact' : '')],
        isV3 && isMode('text') && styles["md3IconReverseTextMode" + (compact ? 'Compact' : '')]
    ] : [
        styles.icon,
        isV3 && styles["md3Icon" + (compact ? 'Compact' : '')],
        isV3 && isMode('text') && styles["md3IconTextMode" + (compact ? 'Compact' : '')]
    ];
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Surface.default, _extends._({}, rest, {
        ref: ref,
        testID: "" + testID + "-container",
        style: [
            styles.button,
            compact && styles.compact,
            buttonStyle,
            style,
            !isV3 && !disabled && {
                elevation: elevation
            }
        ]
    }, isV3 && {
        elevation: elevation
    }, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, {
            borderless: true,
            background: background,
            onPress: onPress,
            onLongPress: onLongPress,
            onPressIn: hasPassedTouchHandler ? handlePressIn : undefined,
            onPressOut: hasPassedTouchHandler ? handlePressOut : undefined,
            delayLongPress: delayLongPress,
            accessibilityLabel: accessibilityLabel,
            accessibilityHint: accessibilityHint,
            accessibilityRole: accessibilityRole,
            accessibilityState: {
                disabled: disabled
            },
            accessible: accessible,
            disabled: disabled,
            rippleColor: rippleColor,
            style: touchableStyle,
            testID: testID,
            theme: theme,
            ref: touchableRef,
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                style: [
                    styles.content,
                    contentStyle
                ],
                children: [
                    icon && loading !== true ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                        style: iconStyle,
                        testID: "" + testID + "-icon-container",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.default, {
                            source: icon,
                            size: customLabelSize != null ? customLabelSize : iconSize,
                            color: typeof customLabelColor === 'string' ? customLabelColor : textColor
                        })
                    }) : null,
                    loading ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivityIndicator.default, {
                        size: customLabelSize != null ? customLabelSize : iconSize,
                        color: typeof customLabelColor === 'string' ? customLabelColor : textColor,
                        style: iconStyle
                    }) : null,
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                        variant: "labelLarge",
                        selectable: false,
                        numberOfLines: 1,
                        testID: "" + testID + "-text",
                        style: [
                            styles.label,
                            !isV3 && styles.md2Label,
                            isV3 && (isMode('text') ? icon || loading ? styles.md3LabelTextAddons : styles.md3LabelText : styles.md3Label),
                            compact && styles.compactLabel,
                            uppercase && styles.uppercaseLabel,
                            textStyle,
                            labelStyle
                        ],
                        maxFontSizeMultiplier: maxFontSizeMultiplier,
                        children: children
                    })
                ]
            })
        })
    }));
};
var styles = _reactnative.StyleSheet.create({
    button: {
        minWidth: 64,
        borderStyle: 'solid'
    },
    compact: {
        minWidth: 'auto'
    },
    content: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center'
    },
    icon: {
        marginLeft: 12,
        marginRight: -4
    },
    iconReverse: {
        marginRight: 12,
        marginLeft: -4
    },
    /* eslint-disable react-native/no-unused-styles */ md3Icon: {
        marginLeft: 16,
        marginRight: -16
    },
    md3IconCompact: {
        marginLeft: 8,
        marginRight: 0
    },
    md3IconReverse: {
        marginLeft: -16,
        marginRight: 16
    },
    md3IconReverseCompact: {
        marginLeft: 0,
        marginRight: 8
    },
    md3IconTextMode: {
        marginLeft: 12,
        marginRight: -8
    },
    md3IconTextModeCompact: {
        marginLeft: 6,
        marginRight: 0
    },
    md3IconReverseTextMode: {
        marginLeft: -8,
        marginRight: 12
    },
    md3IconReverseTextModeCompact: {
        marginLeft: 0,
        marginRight: 6
    },
    /* eslint-enable react-native/no-unused-styles */ label: {
        textAlign: 'center',
        marginVertical: 9,
        marginHorizontal: 16
    },
    md2Label: {
        letterSpacing: 1
    },
    compactLabel: {
        marginHorizontal: 8
    },
    uppercaseLabel: {
        textTransform: 'uppercase'
    },
    md3Label: {
        marginVertical: 10,
        marginHorizontal: 24
    },
    md3LabelText: {
        marginHorizontal: 12
    },
    md3LabelTextAddons: {
        marginHorizontal: 16
    }
});
var _default = (0, _forwardRef.forwardRef)(Button);


}),
"56010": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getButtonColors", ({
    enumerable: true,
    get: function() {
        return getButtonColors;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _colors = __webpack_require__(18847);
var isDark = function(param) {
    var dark = param.dark, backgroundColor = param.backgroundColor;
    if (typeof dark === 'boolean') {
        return dark;
    }
    if (backgroundColor === 'transparent') {
        return false;
    }
    if (backgroundColor !== 'transparent') {
        return !(0, _color.default)(backgroundColor).isLight();
    }
    return false;
};
var getButtonBackgroundColor = function(param) {
    var isMode = param.isMode, theme = param.theme, disabled = param.disabled, customButtonColor = param.customButtonColor;
    if (customButtonColor && !disabled) {
        return customButtonColor;
    }
    if (theme.isV3) {
        if (disabled) {
            if (isMode('outlined') || isMode('text')) {
                return 'transparent';
            }
            return theme.colors.surfaceDisabled;
        }
        if (isMode('elevated')) {
            return theme.colors.elevation.level1;
        }
        if (isMode('contained')) {
            return theme.colors.primary;
        }
        if (isMode('contained-tonal')) {
            return theme.colors.secondaryContainer;
        }
    }
    if (isMode('contained')) {
        if (disabled) {
            return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();
        }
        return theme.colors.primary;
    }
    return 'transparent';
};
var getButtonTextColor = function(param) {
    var isMode = param.isMode, theme = param.theme, disabled = param.disabled, customTextColor = param.customTextColor, backgroundColor = param.backgroundColor, dark = param.dark;
    if (customTextColor && !disabled) {
        return customTextColor;
    }
    if (theme.isV3) {
        if (disabled) {
            return theme.colors.onSurfaceDisabled;
        }
        if (typeof dark === 'boolean') {
            if (isMode('contained') || isMode('contained-tonal') || isMode('elevated')) {
                return isDark({
                    dark: dark,
                    backgroundColor: backgroundColor
                }) ? _colors.white : _colors.black;
            }
        }
        if (isMode('outlined') || isMode('text') || isMode('elevated')) {
            return theme.colors.primary;
        }
        if (isMode('contained')) {
            return theme.colors.onPrimary;
        }
        if (isMode('contained-tonal')) {
            return theme.colors.onSecondaryContainer;
        }
    }
    if (disabled) {
        return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();
    }
    if (isMode('contained')) {
        return isDark({
            dark: dark,
            backgroundColor: backgroundColor
        }) ? _colors.white : _colors.black;
    }
    return theme.colors.primary;
};
var getButtonBorderColor = function(param) {
    var isMode = param.isMode, disabled = param.disabled, theme = param.theme;
    if (theme.isV3) {
        if (disabled && isMode('outlined')) {
            return theme.colors.surfaceDisabled;
        }
        if (isMode('outlined')) {
            return theme.colors.outline;
        }
    }
    if (isMode('outlined')) {
        return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();
    }
    return 'transparent';
};
var getButtonBorderWidth = function(param) {
    var isMode = param.isMode, theme = param.theme;
    if (theme.isV3) {
        if (isMode('outlined')) {
            return 1;
        }
    }
    if (isMode('outlined')) {
        return _reactnative.StyleSheet.hairlineWidth;
    }
    return 0;
};
var getButtonColors = function(param) {
    var theme = param.theme, mode = param.mode, customButtonColor = param.customButtonColor, customTextColor = param.customTextColor, disabled = param.disabled, dark = param.dark;
    var isMode = function(modeToCompare) {
        return mode === modeToCompare;
    };
    var backgroundColor = getButtonBackgroundColor({
        isMode: isMode,
        theme: theme,
        disabled: disabled,
        customButtonColor: customButtonColor
    });
    var textColor = getButtonTextColor({
        isMode: isMode,
        theme: theme,
        disabled: disabled,
        customTextColor: customTextColor,
        backgroundColor: backgroundColor,
        dark: dark
    });
    var borderColor = getButtonBorderColor({
        isMode: isMode,
        theme: theme,
        disabled: disabled
    });
    var borderWidth = getButtonBorderWidth({
        isMode: isMode,
        theme: theme
    });
    return {
        backgroundColor: backgroundColor,
        borderColor: borderColor,
        textColor: textColor,
        borderWidth: borderWidth
    };
};


}),
"88649": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _uselatestcallback = /*#__PURE__*/ _interop_require_default._(__webpack_require__(20249));
var _CardActions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(45551));
var _CardContent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(16756));
var _CardCover = /*#__PURE__*/ _interop_require_default._(__webpack_require__(69157));
var _CardTitle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(47640));
var _utils = __webpack_require__(70511);
var _theming = __webpack_require__(10968);
var _forwardRef = __webpack_require__(45835);
var _hasTouchHandler = /*#__PURE__*/ _interop_require_default._(__webpack_require__(35717));
var _splitStyles = __webpack_require__(45975);
var _Surface = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2403));
/**
 * A card is a sheet of material that serves as an entry point to more detailed information.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Avatar, Button, Card, Text } from 'react-native-paper';
 *
 * const LeftContent = props => <Avatar.Icon {...props} icon="folder" />
 *
 * const MyComponent = () => (
 *   <Card>
 *     <Card.Title title="Card Title" subtitle="Card Subtitle" left={LeftContent} />
 *     <Card.Content>
 *       <Text variant="titleLarge">Card title</Text>
 *       <Text variant="bodyMedium">Card content</Text>
 *     </Card.Content>
 *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />
 *     <Card.Actions>
 *       <Button>Cancel</Button>
 *       <Button>Ok</Button>
 *     </Card.Actions>
 *   </Card>
 * );
 *
 * export default MyComponent;
 * ```
 */ var CardComponent = function(_param, ref) {
    var tmp = _param.elevation, cardElevation = tmp === void 0 ? 1 : tmp, delayLongPress = _param.delayLongPress, onPress = _param.onPress, onLongPress = _param.onLongPress, onPressOut = _param.onPressOut, onPressIn = _param.onPressIn, tmp1 = _param.mode, cardMode = tmp1 === void 0 ? 'elevated' : tmp1, children = _param.children, style = _param.style, contentStyle = _param.contentStyle, themeOverrides = _param.theme, _param_testID = _param.testID, testID = _param_testID === void 0 ? 'card' : _param_testID, accessible = _param.accessible, disabled = _param.disabled, rest = _object_without_properties_loose._(_param, [
        "elevation",
        "delayLongPress",
        "onPress",
        "onLongPress",
        "onPressOut",
        "onPressIn",
        "mode",
        "children",
        "style",
        "contentStyle",
        "theme",
        "testID",
        "accessible",
        "disabled"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isMode = _react.useCallback(function(modeToCompare) {
        return cardMode === modeToCompare;
    }, [
        cardMode
    ]);
    var hasPassedTouchHandler = (0, _hasTouchHandler.default)({
        onPress: onPress,
        onLongPress: onLongPress,
        onPressIn: onPressIn,
        onPressOut: onPressOut
    });
    // Default animated value
    var _React_useRef = _react.useRef(new _reactnative.Animated.Value(cardElevation)), elevation = _React_useRef.current;
    // Dark adaptive animated value, used in case of toggling the theme,
    // it prevents animating the background with native drivers inside Surface
    var _React_useRef1 = _react.useRef(new _reactnative.Animated.Value(cardElevation)), elevationDarkAdaptive = _React_useRef1.current;
    var animation = theme.animation, dark = theme.dark, mode = theme.mode, roundness = theme.roundness, isV3 = theme.isV3;
    var prevDarkRef = _react.useRef(dark);
    _react.useEffect(function() {
        prevDarkRef.current = dark;
    });
    var prevDark = prevDarkRef.current;
    var isAdaptiveMode = mode === 'adaptive';
    var animationDuration = 150 * animation.scale;
    _react.useEffect(function() {
        /**
     * Resets animations values if updating to dark adaptive mode,
     * otherwise, any card that is in the middle of animation while
     * toggling the theme will stay at that animated value until
     * the next press-in
     */ if (dark && isAdaptiveMode && !prevDark) {
            elevation.setValue(cardElevation);
            elevationDarkAdaptive.setValue(cardElevation);
        }
    }, [
        prevDark,
        dark,
        isAdaptiveMode,
        cardElevation,
        elevation,
        elevationDarkAdaptive
    ]);
    var runElevationAnimation = function(pressType) {
        var isPressTypeIn = pressType === 'in';
        if (dark && isAdaptiveMode) {
            _reactnative.Animated.timing(elevationDarkAdaptive, {
                toValue: isPressTypeIn ? isV3 ? 2 : 8 : cardElevation,
                duration: animationDuration,
                useNativeDriver: false
            }).start();
        } else {
            _reactnative.Animated.timing(elevation, {
                toValue: isPressTypeIn ? isV3 ? 2 : 8 : cardElevation,
                duration: animationDuration,
                useNativeDriver: false
            }).start();
        }
    };
    var handlePressIn = (0, _uselatestcallback.default)(function(e) {
        onPressIn == null ? void 0 : onPressIn(e);
        runElevationAnimation('in');
    });
    var handlePressOut = (0, _uselatestcallback.default)(function(e) {
        onPressOut == null ? void 0 : onPressOut(e);
        runElevationAnimation('out');
    });
    var total = _react.Children.count(children);
    var siblings = _react.Children.map(children, function(child) {
        return /*#__PURE__*/ _react.isValidElement(child) && child.type ? child.type.displayName : null;
    });
    var computedElevation = dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;
    var _getCardColors = (0, _utils.getCardColors)({
        theme: theme,
        mode: cardMode
    }), backgroundColor = _getCardColors.backgroundColor, themedBorderColor = _getCardColors.borderColor;
    var flattenedStyles = _reactnative.StyleSheet.flatten(style) || {};
    var _flattenedStyles_borderColor = flattenedStyles.borderColor, borderColor = _flattenedStyles_borderColor === void 0 ? themedBorderColor : _flattenedStyles_borderColor;
    var _splitStyles1 = _sliced_to_array._((0, _splitStyles.splitStyles)(flattenedStyles, function(style) {
        return style.startsWith('border') && style.endsWith('Radius');
    }), 2), borderRadiusStyles = _splitStyles1[1];
    var borderRadiusCombinedStyles = _extends._({
        borderRadius: (isV3 ? 3 : 1) * roundness
    }, borderRadiusStyles);
    var content = /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
        style: [
            styles.innerContainer,
            contentStyle
        ],
        testID: testID,
        children: _react.Children.map(children, function(child, index) {
            return /*#__PURE__*/ _react.isValidElement(child) ? /*#__PURE__*/ _react.cloneElement(child, {
                index: index,
                total: total,
                siblings: siblings,
                borderRadiusStyles: borderRadiusStyles
            }) : child;
        })
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Surface.default, _extends._({
        ref: ref,
        style: [
            isV3 && !isMode('elevated') && {
                backgroundColor: backgroundColor
            },
            !isV3 && isMode('outlined') ? styles.resetElevation : {
                elevation: computedElevation
            },
            borderRadiusCombinedStyles,
            style
        ],
        theme: theme
    }, isV3 && {
        elevation: isMode('elevated') ? computedElevation : 0
    }, {
        testID: "" + testID + "-container"
    }, rest, {
        children: [
            isMode('outlined') && /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                pointerEvents: "none",
                testID: "" + testID + "-outline",
                style: [
                    {
                        borderColor: borderColor
                    },
                    styles.outline,
                    borderRadiusCombinedStyles
                ]
            }),
            hasPassedTouchHandler ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Pressable, {
                accessible: accessible,
                unstable_pressDelay: 0,
                disabled: disabled,
                delayLongPress: delayLongPress,
                onLongPress: onLongPress,
                onPress: onPress,
                onPressIn: handlePressIn,
                onPressOut: handlePressOut,
                children: content
            }) : content
        ]
    }));
};
var Component = (0, _forwardRef.forwardRef)(CardComponent);
Component.displayName = 'Card';
var Card = Component;
// @component ./CardContent.tsx
Card.Content = _CardContent.default;
// @component ./CardActions.tsx
Card.Actions = _CardActions.default;
// @component ./CardCover.tsx
Card.Cover = _CardCover.default;
// @component ./CardTitle.tsx
Card.Title = _CardTitle.default;
var styles = _reactnative.StyleSheet.create({
    innerContainer: {
        flexShrink: 1
    },
    outline: {
        borderWidth: 1,
        position: 'absolute',
        width: '100%',
        height: '100%',
        zIndex: 2
    },
    resetElevation: {
        elevation: 0
    }
});
var _default = Card;


}),
"45551": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _theming = __webpack_require__(10968);
/**
 * A component to show a list of actions inside a Card.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Card, Button } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Card>
 *     <Card.Actions>
 *       <Button>Cancel</Button>
 *       <Button>Ok</Button>
 *     </Card.Actions>
 *   </Card>
 * );
 *
 * export default MyComponent;
 * ```
 */ var CardActions = function(props) {
    var isV3 = (0, _theming.useInternalTheme)(props.theme).isV3;
    var justifyContent = isV3 ? 'flex-end' : 'flex-start';
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _extends._({}, props, {
        style: [
            styles.container,
            props.style,
            {
                justifyContent: justifyContent
            }
        ],
        children: _react.Children.map(props.children, function(child, i) {
            return /*#__PURE__*/ _react.isValidElement(child) ? /*#__PURE__*/ _react.cloneElement(child, {
                compact: !isV3 && child.props.compact !== false,
                mode: child.props.mode || isV3 && (i === 0 ? 'outlined' : 'contained'),
                style: [
                    isV3 && styles.button,
                    child.props.style
                ]
            }) : child;
        })
    }));
};
CardActions.displayName = 'Card.Actions';
var styles = _reactnative.StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
        padding: 8
    },
    button: {
        marginLeft: 8
    }
});
var _default = CardActions;


}),
"16756": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
/**
 * A component to show content inside a Card.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Card, Text } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Card>
 *     <Card.Content>
 *       <Text variant="titleLarge">Card title</Text>
 *       <Text variant="bodyMedium">Card content</Text>
 *     </Card.Content>
 *   </Card>
 * );
 *
 * export default MyComponent;
 * ```
 */ var CardContent = function(_param) {
    var index = _param.index, total = _param.total, siblings = _param.siblings, style = _param.style, rest = _object_without_properties_loose._(_param, [
        "index",
        "total",
        "siblings",
        "style"
    ]);
    var cover = 'withInternalTheme(CardCover)';
    var title = 'withInternalTheme(CardTitle)';
    var contentStyle, prev, next;
    if (typeof index === 'number' && siblings) {
        prev = siblings[index - 1];
        next = siblings[index + 1];
    }
    if (prev === cover && next === cover || prev === title && next === title || total === 1) {
        contentStyle = styles.only;
    } else if (index === 0) {
        if (next === cover || next === title) {
            contentStyle = styles.only;
        } else {
            contentStyle = styles.first;
        }
    } else if (typeof total === 'number' && index === total - 1) {
        if (prev === cover || prev === title) {
            contentStyle = styles.only;
        } else {
            contentStyle = styles.last;
        }
    } else if (prev === cover || prev === title) {
        contentStyle = styles.first;
    } else if (next === cover || next === title) {
        contentStyle = styles.last;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _extends._({}, rest, {
        style: [
            styles.container,
            contentStyle,
            style
        ]
    }));
};
CardContent.displayName = 'Card.Content';
var styles = _reactnative.StyleSheet.create({
    container: {
        paddingHorizontal: 16
    },
    first: {
        paddingTop: 16
    },
    last: {
        paddingBottom: 16
    },
    only: {
        paddingVertical: 16
    }
});
var _default = CardContent;


}),
"69157": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CardCover: function() {
        return CardCover;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _utils = __webpack_require__(70511);
var _theming = __webpack_require__(10968);
var _colors = __webpack_require__(18847);
var _splitStyles = __webpack_require__(45975);
/**
 * A component to show a cover image inside a Card.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Card } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Card>
 *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />
 *   </Card>
 * );
 *
 * export default MyComponent;
 * ```
 *
 * @extends Image props https://reactnative.dev/docs/image#props
 */ var CardCover = function(_param) {
    var index = _param.index, total = _param.total, style = _param.style, themeOverrides = _param.theme, rest = _object_without_properties_loose._(_param, [
        "index",
        "total",
        "style",
        "theme"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var flattenedStyles = _reactnative.StyleSheet.flatten(style) || {};
    var _splitStyles1 = _sliced_to_array._((0, _splitStyles.splitStyles)(flattenedStyles, function(style) {
        return style.startsWith('border') && style.endsWith('Radius');
    }), 2), borderRadiusStyles = _splitStyles1[1];
    var coverStyle = (0, _utils.getCardCoverStyle)({
        theme: theme,
        index: index,
        total: total,
        borderRadiusStyles: borderRadiusStyles
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
        style: [
            styles.container,
            coverStyle,
            style
        ],
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Image, _extends._({}, rest, {
            style: [
                styles.image,
                coverStyle
            ],
            accessibilityIgnoresInvertColors: true
        }))
    });
};
CardCover.displayName = 'Card.Cover';
var styles = _reactnative.StyleSheet.create({
    container: {
        height: 195,
        backgroundColor: _colors.grey200,
        overflow: 'hidden'
    },
    image: {
        flex: 1,
        height: undefined,
        width: undefined,
        justifyContent: 'flex-end'
    }
});
var _default = CardCover;


}),
"47640": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CardTitle: function() {
        return CardTitle;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _theming = __webpack_require__(10968);
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
var _Caption = /*#__PURE__*/ _interop_require_default._(__webpack_require__(17911));
var _Title = /*#__PURE__*/ _interop_require_default._(__webpack_require__(14041));
var LEFT_SIZE = 40;
/**
 * A component to show a title, subtitle and an avatar inside a Card.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Avatar, Card, IconButton } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Card.Title
 *     title="Card Title"
 *     subtitle="Card Subtitle"
 *     left={(props) => <Avatar.Icon {...props} icon="folder" />}
 *     right={(props) => <IconButton {...props} icon="dots-vertical" onPress={() => {}} />}
 *   />
 * );
 *
 * export default MyComponent;
 * ```
 */ var CardTitle = function(param) {
    var title = param.title, titleStyle = param.titleStyle, _param_titleNumberOfLines = param.titleNumberOfLines, titleNumberOfLines = _param_titleNumberOfLines === void 0 ? 1 : _param_titleNumberOfLines, _param_titleVariant = param.titleVariant, titleVariant = _param_titleVariant === void 0 ? 'bodyLarge' : _param_titleVariant, titleMaxFontSizeMultiplier = param.titleMaxFontSizeMultiplier, subtitle = param.subtitle, subtitleStyle = param.subtitleStyle, _param_subtitleNumberOfLines = param.subtitleNumberOfLines, subtitleNumberOfLines = _param_subtitleNumberOfLines === void 0 ? 1 : _param_subtitleNumberOfLines, _param_subtitleVariant = param.subtitleVariant, subtitleVariant = _param_subtitleVariant === void 0 ? 'bodyMedium' : _param_subtitleVariant, subtitleMaxFontSizeMultiplier = param.subtitleMaxFontSizeMultiplier, left = param.left, leftStyle = param.leftStyle, right = param.right, rightStyle = param.rightStyle, style = param.style, themeOverrides = param.theme;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var TitleComponent = theme.isV3 ? _Text.default : _Title.default;
    var SubtitleComponent = theme.isV3 ? _Text.default : _Caption.default;
    var minHeight = subtitle || left || right ? 72 : 50;
    var marginBottom = subtitle ? 0 : 2;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
        style: [
            styles.container,
            {
                minHeight: minHeight
            },
            style
        ],
        children: [
            left ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                style: [
                    styles.left,
                    leftStyle
                ],
                children: left({
                    size: LEFT_SIZE
                })
            }) : null,
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                style: [
                    styles.titles
                ],
                children: [
                    title && /*#__PURE__*/ (0, _jsxruntime.jsx)(TitleComponent, {
                        style: [
                            styles.title,
                            {
                                marginBottom: marginBottom
                            },
                            titleStyle
                        ],
                        numberOfLines: titleNumberOfLines,
                        variant: titleVariant,
                        maxFontSizeMultiplier: titleMaxFontSizeMultiplier,
                        children: title
                    }),
                    subtitle && /*#__PURE__*/ (0, _jsxruntime.jsx)(SubtitleComponent, {
                        style: [
                            styles.subtitle,
                            subtitleStyle
                        ],
                        numberOfLines: subtitleNumberOfLines,
                        variant: subtitleVariant,
                        maxFontSizeMultiplier: subtitleMaxFontSizeMultiplier,
                        children: subtitle
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                style: rightStyle,
                children: right ? right({
                    size: 24
                }) : null
            })
        ]
    });
};
CardTitle.displayName = 'Card.Title';
var styles = _reactnative.StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        paddingLeft: 16
    },
    left: {
        justifyContent: 'center',
        marginRight: 16,
        height: LEFT_SIZE,
        width: LEFT_SIZE
    },
    titles: {
        flex: 1,
        flexDirection: 'column',
        justifyContent: 'center'
    },
    title: {
        minHeight: 30,
        paddingRight: 16
    },
    subtitle: {
        minHeight: 20,
        marginVertical: 0,
        paddingRight: 16
    }
});
var _default = CardTitle;


}),
"70511": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getCardColors: function() {
        return getCardColors;
    },
    getCardCoverStyle: function() {
        return getCardCoverStyle;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _colors = __webpack_require__(18847);
var getCardCoverStyle = function(param) {
    var theme = param.theme, index = param.index, total = param.total, borderRadiusStyles = param.borderRadiusStyles;
    var isV3 = theme.isV3, roundness = theme.roundness;
    if (Object.keys(borderRadiusStyles).length > 0) {
        return _extends._({
            borderRadius: 3 * roundness
        }, borderRadiusStyles);
    }
    if (isV3) {
        return {
            borderRadius: 3 * roundness
        };
    }
    if (index === 0) {
        if (total === 1) {
            return {
                borderRadius: roundness
            };
        }
        return {
            borderTopLeftRadius: roundness,
            borderTopRightRadius: roundness
        };
    }
    if (typeof total === 'number' && index === total - 1) {
        return {
            borderBottomLeftRadius: roundness
        };
    }
    return undefined;
};
var getBorderColor = function(param) {
    var theme = param.theme;
    if (theme.isV3) {
        return theme.colors.outline;
    }
    if (theme.dark) {
        return (0, _color.default)(_colors.white).alpha(0.12).rgb().string();
    }
    return (0, _color.default)(_colors.black).alpha(0.12).rgb().string();
};
var getBackgroundColor = function(param) {
    var theme = param.theme, isMode = param.isMode;
    if (theme.isV3) {
        if (isMode('contained')) {
            return theme.colors.surfaceVariant;
        }
        if (isMode('outlined')) {
            return theme.colors.surface;
        }
    }
    return undefined;
};
var getCardColors = function(param) {
    var theme = param.theme, mode = param.mode;
    var isMode = function(modeToCompare) {
        return mode === modeToCompare;
    };
    return {
        backgroundColor: getBackgroundColor({
            theme: theme,
            isMode: isMode
        }),
        borderColor: getBorderColor({
            theme: theme
        })
    };
};


}),
"26513": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Checkbox: function() {
        return CheckboxWithTheme;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _CheckboxAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(61358));
var _CheckboxIOS = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83430));
var _theming = __webpack_require__(10968);
/**
 * Checkboxes allow the selection of multiple options from a set.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Checkbox } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [checked, setChecked] = React.useState(false);
 *
 *   return (
 *     <Checkbox
 *       status={checked ? 'checked' : 'unchecked'}
 *       onPress={() => {
 *         setChecked(!checked);
 *       }}
 *     />
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ var Checkbox = function(_param) {
    var themeOverrides = _param.theme, props = _object_without_properties_loose._(_param, [
        "theme"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    return _reactnative.Platform.OS === 'ios' ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_CheckboxIOS.default, _extends._({}, props, {
        theme: theme
    })) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_CheckboxAndroid.default, _extends._({}, props, {
        theme: theme
    }));
};
var _default = Checkbox;
// @component-docs ignore-next-line
var CheckboxWithTheme = Checkbox;


}),
"61358": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CheckboxAndroid: function() {
        return CheckboxAndroid;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _utils = __webpack_require__(9832);
var _theming = __webpack_require__(10968);
var _MaterialCommunityIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(81045));
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
// From https://material.io/design/motion/speed.html#duration
var ANIMATION_DURATION = 100;
/**
 * Checkboxes allow the selection of multiple options from a set.
 * This component follows platform guidelines for Android, but can be used
 * on any platform.
 *
 * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple
 */ var CheckboxAndroid = function(_param) {
    var status = _param.status, themeOverrides = _param.theme, disabled = _param.disabled, onPress = _param.onPress, testID = _param.testID, rest = _object_without_properties_loose._(_param, [
        "status",
        "theme",
        "disabled",
        "onPress",
        "testID"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React_useRef = _react.useRef(new _reactnative.Animated.Value(1)), scaleAnim = _React_useRef.current;
    var isFirstRendering = _react.useRef(true);
    var scale = theme.animation.scale;
    _react.useEffect(function() {
        // Do not run animation on very first rendering
        if (isFirstRendering.current) {
            isFirstRendering.current = false;
            return;
        }
        var checked = status === 'checked';
        _reactnative.Animated.sequence([
            _reactnative.Animated.timing(scaleAnim, {
                toValue: 0.85,
                duration: checked ? ANIMATION_DURATION * scale : 0,
                useNativeDriver: false
            }),
            _reactnative.Animated.timing(scaleAnim, {
                toValue: 1,
                duration: checked ? ANIMATION_DURATION * scale : ANIMATION_DURATION * scale * 1.75,
                useNativeDriver: false
            })
        ]).start();
    }, [
        status,
        scaleAnim,
        scale
    ]);
    var checked = status === 'checked';
    var indeterminate = status === 'indeterminate';
    var _getAndroidSelectionControlColor = (0, _utils.getAndroidSelectionControlColor)({
        theme: theme,
        disabled: disabled,
        checked: checked,
        customColor: rest.color,
        customUncheckedColor: rest.uncheckedColor
    }), rippleColor = _getAndroidSelectionControlColor.rippleColor, selectionControlColor = _getAndroidSelectionControlColor.selectionControlColor;
    var borderWidth = scaleAnim.interpolate({
        inputRange: [
            0.8,
            1
        ],
        outputRange: [
            7,
            0
        ]
    });
    var icon = indeterminate ? 'minus-box' : checked ? 'checkbox-marked' : 'checkbox-blank-outline';
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, _extends._({}, rest, {
        borderless: true,
        rippleColor: rippleColor,
        onPress: onPress,
        disabled: disabled,
        accessibilityRole: "checkbox",
        accessibilityState: {
            disabled: disabled,
            checked: checked
        },
        accessibilityLiveRegion: "polite",
        style: styles.container,
        testID: testID,
        theme: theme,
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.Animated.View, {
            style: {
                transform: [
                    {
                        scale: scaleAnim
                    }
                ]
            },
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_MaterialCommunityIcon.default, {
                    allowFontScaling: false,
                    name: icon,
                    size: 24,
                    color: selectionControlColor,
                    direction: "ltr"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                    style: [
                        _reactnative.StyleSheet.absoluteFill,
                        styles.fillContainer
                    ],
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                        style: [
                            styles.fill,
                            {
                                borderColor: selectionControlColor
                            },
                            {
                                borderWidth: borderWidth
                            }
                        ]
                    })
                })
            ]
        })
    }));
};
CheckboxAndroid.displayName = 'Checkbox.Android';
var styles = _reactnative.StyleSheet.create({
    container: {
        borderRadius: 18,
        width: 36,
        height: 36,
        padding: 6
    },
    fillContainer: {
        alignItems: 'center',
        justifyContent: 'center'
    },
    fill: {
        height: 14,
        width: 14
    }
});
var _default = CheckboxAndroid;


}),
"83430": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CheckboxIOS: function() {
        return CheckboxIOS;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _utils = __webpack_require__(9832);
var _theming = __webpack_require__(10968);
var _MaterialCommunityIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(81045));
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
/**
 * Checkboxes allow the selection of multiple options from a set.
 * This component follows platform guidelines for iOS, but can be used
 * on any platform.
 *
 * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple
 */ var CheckboxIOS = function(_param) {
    var status = _param.status, disabled = _param.disabled, onPress = _param.onPress, themeOverrides = _param.theme, testID = _param.testID, rest = _object_without_properties_loose._(_param, [
        "status",
        "disabled",
        "onPress",
        "theme",
        "testID"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var checked = status === 'checked';
    var indeterminate = status === 'indeterminate';
    var _getSelectionControlIOSColor = (0, _utils.getSelectionControlIOSColor)({
        theme: theme,
        disabled: disabled,
        customColor: rest.color
    }), checkedColor = _getSelectionControlIOSColor.checkedColor, rippleColor = _getSelectionControlIOSColor.rippleColor;
    var icon = indeterminate ? 'minus' : 'check';
    var opacity = indeterminate || checked ? 1 : 0;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, _extends._({}, rest, {
        borderless: true,
        rippleColor: rippleColor,
        onPress: onPress,
        disabled: disabled,
        accessibilityRole: "checkbox",
        accessibilityState: {
            disabled: disabled,
            checked: checked
        },
        accessibilityLiveRegion: "polite",
        style: styles.container,
        testID: testID,
        theme: theme,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
            style: {
                opacity: opacity
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_MaterialCommunityIcon.default, {
                allowFontScaling: false,
                name: icon,
                size: 24,
                color: checkedColor,
                direction: "ltr"
            })
        })
    }));
};
CheckboxIOS.displayName = 'Checkbox.IOS';
var styles = _reactnative.StyleSheet.create({
    container: {
        borderRadius: 18,
        padding: 6
    }
});
var _default = CheckboxIOS;


}),
"39673": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CheckboxItem: function() {
        return CheckboxItem;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _Checkbox = /*#__PURE__*/ _interop_require_default._(__webpack_require__(26513));
var _CheckboxAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(61358));
var _CheckboxIOS = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83430));
var _theming = __webpack_require__(10968);
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
/**
 * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { View } from 'react-native';
 * import { Checkbox } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <View>
 *     <Checkbox.Item label="Item" status="checked" />
 *   </View>
 * );
 *
 * export default MyComponent;
 *```
 */ var CheckboxItem = function(_param) {
    var style = _param.style, status = _param.status, label = _param.label, onPress = _param.onPress, onLongPress = _param.onLongPress, labelStyle = _param.labelStyle, themeOverrides = _param.theme, testID = _param.testID, mode = _param.mode, _param_position = _param.position, position = _param_position === void 0 ? 'trailing' : _param_position, _param_accessibilityLabel = _param.accessibilityLabel, accessibilityLabel = _param_accessibilityLabel === void 0 ? label : _param_accessibilityLabel, disabled = _param.disabled, _param_labelVariant = _param.labelVariant, labelVariant = _param_labelVariant === void 0 ? 'bodyLarge' : _param_labelVariant, _param_labelMaxFontSizeMultiplier = _param.labelMaxFontSizeMultiplier, labelMaxFontSizeMultiplier = _param_labelMaxFontSizeMultiplier === void 0 ? 1.5 : _param_labelMaxFontSizeMultiplier, rippleColor = _param.rippleColor, background = _param.background, props = _object_without_properties_loose._(_param, [
        "style",
        "status",
        "label",
        "onPress",
        "onLongPress",
        "labelStyle",
        "theme",
        "testID",
        "mode",
        "position",
        "accessibilityLabel",
        "disabled",
        "labelVariant",
        "labelMaxFontSizeMultiplier",
        "rippleColor",
        "background"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var checkboxProps = _extends._({}, props, {
        status: status,
        theme: theme,
        disabled: disabled
    });
    var isLeading = position === 'leading';
    var checkbox;
    if (mode === 'android') {
        checkbox = /*#__PURE__*/ (0, _jsxruntime.jsx)(_CheckboxAndroid.default, _extends._({}, checkboxProps));
    } else if (mode === 'ios') {
        checkbox = /*#__PURE__*/ (0, _jsxruntime.jsx)(_CheckboxIOS.default, _extends._({}, checkboxProps));
    } else {
        checkbox = /*#__PURE__*/ (0, _jsxruntime.jsx)(_Checkbox.default, _extends._({}, checkboxProps));
    }
    var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;
    var disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;
    var textAlign = isLeading ? 'right' : 'left';
    var computedStyle = {
        color: disabled ? disabledTextColor : textColor,
        textAlign: textAlign
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, {
        accessibilityLabel: accessibilityLabel,
        accessibilityRole: "checkbox",
        accessibilityState: {
            checked: status === 'checked',
            disabled: disabled
        },
        onPress: onPress,
        onLongPress: onLongPress,
        testID: testID,
        disabled: disabled,
        rippleColor: rippleColor,
        theme: theme,
        background: background,
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
            style: [
                styles.container,
                style
            ],
            pointerEvents: "none",
            importantForAccessibility: "no-hide-descendants",
            children: [
                isLeading && checkbox,
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                    variant: labelVariant,
                    testID: "" + testID + "-text",
                    maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
                    style: [
                        styles.label,
                        !theme.isV3 && styles.font,
                        computedStyle,
                        labelStyle
                    ],
                    children: label
                }),
                !isLeading && checkbox
            ]
        })
    });
};
CheckboxItem.displayName = 'Checkbox.Item';
var _default = CheckboxItem;
var styles = _reactnative.StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        paddingVertical: 8,
        paddingHorizontal: 16
    },
    label: {
        flexShrink: 1,
        flexGrow: 1
    },
    font: {
        fontSize: 16
    }
});


}),
"73692": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _uselatestcallback = /*#__PURE__*/ _interop_require_default._(__webpack_require__(20249));
var _helpers = __webpack_require__(74175);
var _theming = __webpack_require__(10968);
var _colors = __webpack_require__(18847);
var _hasTouchHandler = /*#__PURE__*/ _interop_require_default._(__webpack_require__(35717));
var _Icon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80639));
var _MaterialCommunityIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(81045));
var _Surface = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2403));
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
/**
 * Chips are compact elements that can represent inputs, attributes, or actions.
 * They can have an icon or avatar on the left, and a close button icon on the right.
 * They are typically used to:
 * <ul>
 *  <li>Present multiple options </li>
 *  <li>Represent attributes active or chosen </li>
 *  <li>Present filter options </li>
 *  <li>Trigger actions related to primary content </li>
 * </ul>
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Chip } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Chip icon="information" onPress={() => console.log('Pressed')}>Example Chip</Chip>
 * );
 *
 * export default MyComponent;
 * ```
 */ var Chip = function(_param) {
    var _param_mode = _param.mode, mode = _param_mode === void 0 ? 'flat' : _param_mode, children = _param.children, icon = _param.icon, avatar = _param.avatar, _param_selected = _param.selected, selected = _param_selected === void 0 ? false : _param_selected, _param_disabled = _param.disabled, disabled = _param_disabled === void 0 ? false : _param_disabled, background = _param.background, accessibilityLabel = _param.accessibilityLabel, _param_accessibilityRole = _param.accessibilityRole, accessibilityRole = _param_accessibilityRole === void 0 ? 'button' : _param_accessibilityRole, _param_closeIconAccessibilityLabel = _param.closeIconAccessibilityLabel, closeIconAccessibilityLabel = _param_closeIconAccessibilityLabel === void 0 ? 'Close' : _param_closeIconAccessibilityLabel, onPress = _param.onPress, onLongPress = _param.onLongPress, onPressOut = _param.onPressOut, onPressIn = _param.onPressIn, delayLongPress = _param.delayLongPress, onClose = _param.onClose, closeIcon = _param.closeIcon, textStyle = _param.textStyle, style = _param.style, themeOverrides = _param.theme, _param_testID = _param.testID, testID = _param_testID === void 0 ? 'chip' : _param_testID, selectedColor = _param.selectedColor, customRippleColor = _param.rippleColor, _param_showSelectedOverlay = _param.showSelectedOverlay, showSelectedOverlay = _param_showSelectedOverlay === void 0 ? false : _param_showSelectedOverlay, _param_showSelectedCheck = _param.showSelectedCheck, showSelectedCheck = _param_showSelectedCheck === void 0 ? true : _param_showSelectedCheck, ellipsizeMode = _param.ellipsizeMode, compact = _param.compact, _param_elevated = _param.elevated, elevated = _param_elevated === void 0 ? false : _param_elevated, maxFontSizeMultiplier = _param.maxFontSizeMultiplier, rest = _object_without_properties_loose._(_param, [
        "mode",
        "children",
        "icon",
        "avatar",
        "selected",
        "disabled",
        "background",
        "accessibilityLabel",
        "accessibilityRole",
        "closeIconAccessibilityLabel",
        "onPress",
        "onLongPress",
        "onPressOut",
        "onPressIn",
        "delayLongPress",
        "onClose",
        "closeIcon",
        "textStyle",
        "style",
        "theme",
        "testID",
        "selectedColor",
        "rippleColor",
        "showSelectedOverlay",
        "showSelectedCheck",
        "ellipsizeMode",
        "compact",
        "elevated",
        "maxFontSizeMultiplier"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isV3 = theme.isV3, roundness = theme.roundness;
    var _React_useRef = _react.useRef(new _reactnative.Animated.Value(isV3 && elevated ? 1 : 0)), elevation = _React_useRef.current;
    var hasPassedTouchHandler = (0, _hasTouchHandler.default)({
        onPress: onPress,
        onLongPress: onLongPress,
        onPressIn: onPressIn,
        onPressOut: onPressOut
    });
    var isOutlined = mode === 'outlined';
    var handlePressIn = (0, _uselatestcallback.default)(function(e) {
        var scale = theme.animation.scale;
        onPressIn == null ? void 0 : onPressIn(e);
        _reactnative.Animated.timing(elevation, {
            toValue: isV3 ? elevated ? 2 : 0 : 4,
            duration: 200 * scale,
            useNativeDriver: _reactnative.Platform.OS === 'web' || _reactnative.Platform.constants.reactNativeVersion.minor <= 72
        }).start();
    });
    var handlePressOut = (0, _uselatestcallback.default)(function(e) {
        var scale = theme.animation.scale;
        onPressOut == null ? void 0 : onPressOut(e);
        _reactnative.Animated.timing(elevation, {
            toValue: isV3 && elevated ? 1 : 0,
            duration: 150 * scale,
            useNativeDriver: _reactnative.Platform.OS === 'web' || _reactnative.Platform.constants.reactNativeVersion.minor <= 72
        }).start();
    });
    var opacity = isV3 ? 0.38 : 0.26;
    var defaultBorderRadius = roundness * (isV3 ? 2 : 4);
    var iconSize = isV3 ? 18 : 16;
    var _ref = _reactnative.StyleSheet.flatten(style) || {}, customBackgroundColor = _ref.backgroundColor, _ref_borderRadius = _ref.borderRadius, borderRadius = _ref_borderRadius === void 0 ? defaultBorderRadius : _ref_borderRadius;
    var _getChipColors = (0, _helpers.getChipColors)({
        isOutlined: isOutlined,
        theme: theme,
        selectedColor: selectedColor,
        showSelectedOverlay: showSelectedOverlay,
        customBackgroundColor: customBackgroundColor,
        disabled: disabled,
        customRippleColor: customRippleColor
    }), borderColor = _getChipColors.borderColor, textColor = _getChipColors.textColor, iconColor = _getChipColors.iconColor, rippleColor = _getChipColors.rippleColor, selectedBackgroundColor = _getChipColors.selectedBackgroundColor, backgroundColor = _getChipColors.backgroundColor;
    var accessibilityState = {
        selected: selected,
        disabled: disabled
    };
    var elevationStyle = isV3 || _reactnative.Platform.OS === 'android' ? elevation : 0;
    var multiplier = isV3 ? compact ? 1.5 : 2 : 1;
    var labelSpacings = {
        marginRight: onClose ? 0 : 8 * multiplier,
        marginLeft: avatar || icon || selected && showSelectedCheck ? 4 * multiplier : 8 * multiplier
    };
    var contentSpacings = {
        paddingRight: isV3 ? onClose ? 34 : 0 : onClose ? 32 : 4
    };
    var labelTextStyle = _extends._({
        color: textColor
    }, isV3 ? theme.fonts.labelLarge : theme.fonts.regular);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Surface.default, _extends._({
        style: [
            styles.container,
            isV3 && (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer),
            !theme.isV3 && {
                elevation: elevationStyle
            },
            {
                backgroundColor: selected ? selectedBackgroundColor : backgroundColor,
                borderColor: borderColor,
                borderRadius: borderRadius
            },
            style
        ]
    }, theme.isV3 && {
        elevation: elevationStyle
    }, rest, {
        testID: "" + testID + "-container",
        theme: theme,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, {
                borderless: true,
                background: background,
                style: [
                    {
                        borderRadius: borderRadius
                    },
                    styles.touchable
                ],
                onPress: onPress,
                onLongPress: onLongPress,
                onPressIn: hasPassedTouchHandler ? handlePressIn : undefined,
                onPressOut: hasPassedTouchHandler ? handlePressOut : undefined,
                delayLongPress: delayLongPress,
                rippleColor: rippleColor,
                disabled: disabled,
                accessibilityLabel: accessibilityLabel,
                accessibilityRole: accessibilityRole,
                accessibilityState: accessibilityState,
                testID: testID,
                theme: theme,
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                    style: [
                        styles.content,
                        isV3 && styles.md3Content,
                        contentSpacings
                    ],
                    children: [
                        avatar && !icon ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                            style: [
                                styles.avatarWrapper,
                                isV3 && styles.md3AvatarWrapper,
                                disabled && {
                                    opacity: opacity
                                }
                            ],
                            children: /*#__PURE__*/ _react.isValidElement(avatar) ? /*#__PURE__*/ _react.cloneElement(avatar, {
                                style: [
                                    styles.avatar,
                                    avatar.props.style
                                ]
                            }) : avatar
                        }) : null,
                        icon || selected && showSelectedCheck ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                            style: [
                                styles.icon,
                                isV3 && styles.md3Icon,
                                avatar ? [
                                    styles.avatar,
                                    styles.avatarSelected,
                                    isV3 && selected && styles.md3SelectedIcon
                                ] : null
                            ],
                            children: icon ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.default, {
                                source: icon,
                                color: avatar ? _colors.white : !disabled && theme.isV3 ? theme.colors.primary : iconColor,
                                size: 18,
                                theme: theme
                            }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_MaterialCommunityIcon.default, {
                                name: "check",
                                color: avatar ? _colors.white : iconColor,
                                size: 18,
                                direction: "ltr"
                            })
                        }) : null,
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                            variant: "labelLarge",
                            selectable: false,
                            numberOfLines: 1,
                            style: [
                                isV3 ? styles.md3LabelText : styles.labelText,
                                labelTextStyle,
                                labelSpacings,
                                textStyle
                            ],
                            ellipsizeMode: ellipsizeMode,
                            maxFontSizeMultiplier: maxFontSizeMultiplier,
                            children: children
                        })
                    ]
                })
            }),
            onClose ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                style: styles.closeButtonStyle,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Pressable, {
                    onPress: onClose,
                    disabled: disabled,
                    accessibilityRole: "button",
                    accessibilityLabel: closeIconAccessibilityLabel,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                        style: [
                            styles.icon,
                            styles.closeIcon,
                            isV3 && styles.md3CloseIcon
                        ],
                        children: closeIcon ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.default, {
                            source: closeIcon,
                            color: iconColor,
                            size: iconSize
                        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_MaterialCommunityIcon.default, {
                            name: isV3 ? 'close' : 'close-circle',
                            size: iconSize,
                            color: iconColor,
                            direction: "ltr"
                        })
                    })
                })
            }) : null
        ]
    }));
};
var styles = _reactnative.StyleSheet.create({
    container: {
        borderWidth: _reactnative.StyleSheet.hairlineWidth,
        borderStyle: 'solid',
        flexDirection: _reactnative.Platform.select({
            "default": 'column',
            web: 'row'
        })
    },
    md3OutlineContainer: {
        borderWidth: 1
    },
    md3FlatContainer: {
        borderWidth: 0
    },
    content: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingLeft: 4,
        position: 'relative'
    },
    md3Content: {
        paddingLeft: 0
    },
    icon: {
        padding: 4,
        alignSelf: 'center'
    },
    md3Icon: {
        paddingLeft: 8,
        paddingRight: 0
    },
    closeIcon: {
        marginRight: 4
    },
    md3CloseIcon: {
        marginRight: 8,
        padding: 0
    },
    labelText: {
        minHeight: 24,
        lineHeight: 24,
        textAlignVertical: 'center',
        marginVertical: 4
    },
    md3LabelText: {
        textAlignVertical: 'center',
        marginVertical: 6
    },
    avatar: {
        width: 24,
        height: 24,
        borderRadius: 12
    },
    avatarWrapper: {
        marginRight: 4
    },
    md3AvatarWrapper: {
        marginLeft: 4,
        marginRight: 0
    },
    md3SelectedIcon: {
        paddingLeft: 4
    },
    // eslint-disable-next-line react-native/no-color-literals
    avatarSelected: {
        position: 'absolute',
        top: 4,
        left: 4,
        backgroundColor: 'rgba(0, 0, 0, .29)'
    },
    closeButtonStyle: {
        position: 'absolute',
        right: 0,
        height: '100%',
        justifyContent: 'center',
        alignItems: 'center'
    },
    touchable: {
        width: '100%'
    }
});
var _default = Chip;


}),
"74175": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "getChipColors", ({
    enumerable: true,
    get: function() {
        return getChipColors;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _colors = __webpack_require__(18847);
var getBorderColor = function(param) {
    var theme = param.theme, isOutlined = param.isOutlined, disabled = param.disabled, selectedColor = param.selectedColor, backgroundColor = param.backgroundColor;
    var isSelectedColor = selectedColor !== undefined;
    if (theme.isV3) {
        if (disabled) {
            return (0, _color.default)(theme.colors.onSurfaceVariant).alpha(0.12).rgb().string();
        }
        if (isSelectedColor) {
            return (0, _color.default)(selectedColor).alpha(0.29).rgb().string();
        }
        return theme.colors.outline;
    }
    if (isOutlined) {
        if (isSelectedColor) {
            return (0, _color.default)(selectedColor).alpha(0.29).rgb().string();
        }
        if (theme.dark) {
            return (0, _color.default)(_colors.white).alpha(0.29).rgb().string();
        }
        return (0, _color.default)(_colors.black).alpha(0.29).rgb().string();
    }
    return backgroundColor;
};
var getTextColor = function(param) {
    var theme = param.theme, isOutlined = param.isOutlined, disabled = param.disabled, selectedColor = param.selectedColor;
    var isSelectedColor = selectedColor !== undefined;
    if (theme.isV3) {
        if (disabled) {
            return theme.colors.onSurfaceDisabled;
        }
        if (isSelectedColor) {
            return selectedColor;
        }
        if (isOutlined) {
            return theme.colors.onSurfaceVariant;
        }
        return theme.colors.onSecondaryContainer;
    }
    if (disabled) {
        return theme.colors.disabled;
    }
    if (isSelectedColor) {
        return (0, _color.default)(selectedColor).alpha(0.87).rgb().string();
    }
    return (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();
};
var getDefaultBackgroundColor = function(param) {
    var theme = param.theme, isOutlined = param.isOutlined;
    if (theme.isV3) {
        if (isOutlined) {
            return theme.colors.surface;
        }
        return theme.colors.secondaryContainer;
    }
    if (isOutlined) {
        var _theme_colors;
        return (_theme_colors = theme.colors) == null ? void 0 : _theme_colors.surface;
    }
    if (theme.dark) {
        return '#383838';
    }
    return '#ebebeb';
};
var getBackgroundColor = function(param) {
    var theme = param.theme, isOutlined = param.isOutlined, disabled = param.disabled, customBackgroundColor = param.customBackgroundColor;
    if (typeof customBackgroundColor === 'string') {
        return customBackgroundColor;
    }
    if (theme.isV3) {
        if (disabled) {
            if (isOutlined) {
                return 'transparent';
            }
            return (0, _color.default)(theme.colors.onSurfaceVariant).alpha(0.12).rgb().string();
        }
    }
    return getDefaultBackgroundColor({
        theme: theme,
        isOutlined: isOutlined
    });
};
var getSelectedBackgroundColor = function(param) {
    var theme = param.theme, isOutlined = param.isOutlined, disabled = param.disabled, customBackgroundColor = param.customBackgroundColor, showSelectedOverlay = param.showSelectedOverlay;
    var backgroundColor = getBackgroundColor({
        theme: theme,
        disabled: disabled,
        isOutlined: isOutlined,
        customBackgroundColor: customBackgroundColor
    });
    if (theme.isV3) {
        if (isOutlined) {
            if (showSelectedOverlay) {
                return (0, _color.default)(backgroundColor).mix((0, _color.default)(theme.colors.onSurfaceVariant), 0.12).rgb().string();
            }
            return (0, _color.default)(backgroundColor).mix((0, _color.default)(theme.colors.onSurfaceVariant), 0).rgb().string();
        }
        if (showSelectedOverlay) {
            return (0, _color.default)(backgroundColor).mix((0, _color.default)(theme.colors.onSecondaryContainer), 0.12).rgb().string();
        }
        return (0, _color.default)(backgroundColor).mix((0, _color.default)(theme.colors.onSecondaryContainer), 0).rgb().string();
    }
    if (theme.dark) {
        if (isOutlined) {
            return (0, _color.default)(backgroundColor).lighten(0.2).rgb().string();
        }
        return (0, _color.default)(backgroundColor).lighten(0.4).rgb().string();
    }
    if (isOutlined) {
        return (0, _color.default)(backgroundColor).darken(0.08).rgb().string();
    }
    return (0, _color.default)(backgroundColor).darken(0.2).rgb().string();
};
var getIconColor = function(param) {
    var theme = param.theme, isOutlined = param.isOutlined, disabled = param.disabled, selectedColor = param.selectedColor;
    var isSelectedColor = selectedColor !== undefined;
    if (theme.isV3) {
        if (disabled) {
            return theme.colors.onSurfaceDisabled;
        }
        if (isSelectedColor) {
            return selectedColor;
        }
        if (isOutlined) {
            return theme.colors.onSurfaceVariant;
        }
        return theme.colors.onSecondaryContainer;
    }
    if (disabled) {
        return theme.colors.disabled;
    }
    if (isSelectedColor) {
        return (0, _color.default)(selectedColor).alpha(0.54).rgb().string();
    }
    return (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
};
var getRippleColor = function(param) {
    var theme = param.theme, isOutlined = param.isOutlined, disabled = param.disabled, selectedColor = param.selectedColor, selectedBackgroundColor = param.selectedBackgroundColor, customRippleColor = param.customRippleColor;
    if (customRippleColor) {
        return customRippleColor;
    }
    var isSelectedColor = selectedColor !== undefined;
    var textColor = getTextColor({
        theme: theme,
        disabled: disabled,
        selectedColor: selectedColor,
        isOutlined: isOutlined
    });
    if (theme.isV3) {
        if (isSelectedColor) {
            return (0, _color.default)(selectedColor).alpha(0.12).rgb().string();
        }
        return (0, _color.default)(textColor).alpha(0.12).rgb().string();
    }
    if (isSelectedColor) {
        return (0, _color.default)(selectedColor).fade(0.5).rgb().string();
    }
    return selectedBackgroundColor;
};
var getChipColors = function(param) {
    var isOutlined = param.isOutlined, theme = param.theme, selectedColor = param.selectedColor, showSelectedOverlay = param.showSelectedOverlay, customBackgroundColor = param.customBackgroundColor, disabled = param.disabled, customRippleColor = param.customRippleColor;
    var baseChipColorProps = {
        theme: theme,
        isOutlined: isOutlined,
        disabled: disabled
    };
    var backgroundColor = getBackgroundColor(_extends._({}, baseChipColorProps, {
        customBackgroundColor: customBackgroundColor
    }));
    var selectedBackgroundColor = getSelectedBackgroundColor(_extends._({}, baseChipColorProps, {
        customBackgroundColor: customBackgroundColor,
        showSelectedOverlay: showSelectedOverlay
    }));
    return {
        borderColor: getBorderColor(_extends._({}, baseChipColorProps, {
            selectedColor: selectedColor,
            backgroundColor: backgroundColor
        })),
        textColor: getTextColor(_extends._({}, baseChipColorProps, {
            selectedColor: selectedColor
        })),
        iconColor: getIconColor(_extends._({}, baseChipColorProps, {
            selectedColor: selectedColor
        })),
        rippleColor: getRippleColor(_extends._({}, baseChipColorProps, {
            selectedColor: selectedColor,
            selectedBackgroundColor: selectedBackgroundColor,
            customRippleColor: customRippleColor
        })),
        backgroundColor: backgroundColor,
        selectedBackgroundColor: selectedBackgroundColor
    };
};


}),
"66640": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(3557);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _Icon = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(80639));
var _theming = __webpack_require__(10968);
var CrossFadeIcon = function(param) {
    var color = param.color, size = param.size, source = param.source, themeOverrides = param.theme, _param_testID = param.testID, testID = _param_testID === void 0 ? 'cross-fade-icon' : _param_testID;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React_useState = _sliced_to_array._(_react.useState(function() {
        return source;
    }), 2), currentIcon = _React_useState[0], setCurrentIcon = _React_useState[1];
    var _React_useState1 = _sliced_to_array._(_react.useState(null), 2), previousIcon = _React_useState1[0], setPreviousIcon = _React_useState1[1];
    var _React_useRef = _react.useRef(new _reactnative.Animated.Value(1)), fade = _React_useRef.current;
    var scale = theme.animation.scale;
    if (currentIcon !== source) {
        setPreviousIcon(function() {
            return currentIcon;
        });
        setCurrentIcon(function() {
            return source;
        });
    }
    _react.useEffect(function() {
        if ((0, _Icon.isValidIcon)(previousIcon) && !(0, _Icon.isEqualIcon)(previousIcon, currentIcon)) {
            fade.setValue(1);
            _reactnative.Animated.timing(fade, {
                duration: scale * 200,
                toValue: 0,
                useNativeDriver: true
            }).start();
        }
    }, [
        currentIcon,
        previousIcon,
        fade,
        scale
    ]);
    var opacityPrev = fade;
    var opacityNext = previousIcon ? fade.interpolate({
        inputRange: [
            0,
            1
        ],
        outputRange: [
            1,
            0
        ]
    }) : 1;
    var rotatePrev = fade.interpolate({
        inputRange: [
            0,
            1
        ],
        outputRange: [
            '-90deg',
            '0deg'
        ]
    });
    var rotateNext = previousIcon ? fade.interpolate({
        inputRange: [
            0,
            1
        ],
        outputRange: [
            '0deg',
            '-180deg'
        ]
    }) : '0deg';
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
        style: [
            styles.content,
            {
                height: size,
                width: size
            }
        ],
        children: [
            previousIcon ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                style: [
                    styles.icon,
                    {
                        opacity: opacityPrev,
                        transform: [
                            {
                                rotate: rotatePrev
                            }
                        ]
                    }
                ],
                testID: "" + testID + "-previous",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.default, {
                    source: previousIcon,
                    size: size,
                    color: color,
                    theme: theme
                })
            }) : null,
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                style: [
                    styles.icon,
                    {
                        opacity: opacityNext,
                        transform: [
                            {
                                rotate: rotateNext
                            }
                        ]
                    }
                ],
                testID: "" + testID + "-current",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.default, {
                    source: currentIcon,
                    size: size,
                    color: color,
                    theme: theme
                })
            })
        ]
    });
};
var _default = CrossFadeIcon;
var styles = _reactnative.StyleSheet.create({
    content: {
        alignItems: 'center',
        justifyContent: 'center'
    },
    icon: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
    }
});


}),
"600": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _DataTableCell = /*#__PURE__*/ _interop_require_default._(__webpack_require__(38275));
var _DataTableHeader = /*#__PURE__*/ _interop_require_default._(__webpack_require__(6693));
var _DataTablePagination = /*#__PURE__*/ _interop_require_default._(__webpack_require__(94817));
var _DataTableRow = /*#__PURE__*/ _interop_require_default._(__webpack_require__(68927));
var _DataTableTitle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89091));
/**
 * Data tables allow displaying sets of data.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { DataTable } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [page, setPage] = React.useState<number>(0);
 *   const [numberOfItemsPerPageList] = React.useState([2, 3, 4]);
 *   const [itemsPerPage, onItemsPerPageChange] = React.useState(
 *     numberOfItemsPerPageList[0]
 *   );
 *
 *   const [items] = React.useState([
 *    {
 *      key: 1,
 *      name: 'Cupcake',
 *      calories: 356,
 *      fat: 16,
 *    },
 *    {
 *      key: 2,
 *      name: 'Eclair',
 *      calories: 262,
 *      fat: 16,
 *    },
 *    {
 *      key: 3,
 *      name: 'Frozen yogurt',
 *      calories: 159,
 *      fat: 6,
 *    },
 *    {
 *      key: 4,
 *      name: 'Gingerbread',
 *      calories: 305,
 *      fat: 3.7,
 *    },
 *   ]);
 *
 *   const from = page * itemsPerPage;
 *   const to = Math.min((page + 1) * itemsPerPage, items.length);
 *
 *   React.useEffect(() => {
 *     setPage(0);
 *   }, [itemsPerPage]);
 *
 *   return (
 *     <DataTable>
 *       <DataTable.Header>
 *         <DataTable.Title>Dessert</DataTable.Title>
 *         <DataTable.Title numeric>Calories</DataTable.Title>
 *         <DataTable.Title numeric>Fat</DataTable.Title>
 *       </DataTable.Header>
 *
 *       {items.slice(from, to).map((item) => (
 *         <DataTable.Row key={item.key}>
 *           <DataTable.Cell>{item.name}</DataTable.Cell>
 *           <DataTable.Cell numeric>{item.calories}</DataTable.Cell>
 *           <DataTable.Cell numeric>{item.fat}</DataTable.Cell>
 *         </DataTable.Row>
 *       ))}
 *
 *       <DataTable.Pagination
 *         page={page}
 *         numberOfPages={Math.ceil(items.length / itemsPerPage)}
 *         onPageChange={(page) => setPage(page)}
 *         label={`${from + 1}-${to} of ${items.length}`}
 *         numberOfItemsPerPageList={numberOfItemsPerPageList}
 *         numberOfItemsPerPage={itemsPerPage}
 *         onItemsPerPageChange={onItemsPerPageChange}
 *         showFastPaginationControls
 *         selectPageDropdownLabel={'Rows per page'}
 *       />
 *     </DataTable>
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ var DataTable = function(_param) {
    var children = _param.children, style = _param.style, rest = _object_without_properties_loose._(_param, [
        "children",
        "style"
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _extends._({}, rest, {
        style: [
            styles.container,
            style
        ],
        children: children
    }));
};
// @component ./DataTableHeader.tsx
DataTable.Header = _DataTableHeader.default;
// @component ./DataTableTitle.tsx
DataTable.Title = _DataTableTitle.default;
// @component ./DataTableRow.tsx
DataTable.Row = _DataTableRow.default;
// @component ./DataTableCell.tsx
DataTable.Cell = _DataTableCell.default;
// @component ./DataTablePagination.tsx
DataTable.Pagination = _DataTablePagination.default;
var styles = _reactnative.StyleSheet.create({
    container: {
        width: '100%'
    }
});
var _default = DataTable;


}),
"38275": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
/**
 * A component to show a single cell inside of a table.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { DataTable } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *      <DataTable.Row>
 *        <DataTable.Cell numeric>1</DataTable.Cell>
 *        <DataTable.Cell numeric>2</DataTable.Cell>
 *        <DataTable.Cell numeric>3</DataTable.Cell>
 *        <DataTable.Cell numeric>4</DataTable.Cell>
 *      </DataTable.Row>
 * );
 *
 * export default MyComponent;
 * ```
 *
 * If you want to support multiline text, please use View instead, as multiline text doesn't comply with
 * MD Guidelines (https://github.com/callstack/react-native-paper/issues/2381).
 *
 * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple
 */ var DataTableCell = function(_param) {
    var children = _param.children, textStyle = _param.textStyle, style = _param.style, numeric = _param.numeric, maxFontSizeMultiplier = _param.maxFontSizeMultiplier, testID = _param.testID, rest = _object_without_properties_loose._(_param, [
        "children",
        "textStyle",
        "style",
        "numeric",
        "maxFontSizeMultiplier",
        "testID"
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, _extends._({}, rest, {
        testID: testID,
        style: [
            styles.container,
            numeric && styles.right,
            style
        ],
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(CellContent, {
            textStyle: textStyle,
            testID: testID,
            maxFontSizeMultiplier: maxFontSizeMultiplier,
            children: children
        })
    }));
};
var CellContent = function(param) {
    var children = param.children, textStyle = param.textStyle, maxFontSizeMultiplier = param.maxFontSizeMultiplier, testID = param.testID;
    if (/*#__PURE__*/ _react.isValidElement(children)) {
        return children;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
        style: textStyle,
        numberOfLines: 1,
        maxFontSizeMultiplier: maxFontSizeMultiplier,
        testID: "" + testID + "-text-container",
        children: children
    });
};
DataTableCell.displayName = 'DataTable.Cell';
var styles = _reactnative.StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'row',
        alignItems: 'center'
    },
    right: {
        justifyContent: 'flex-end'
    }
});
var _default = DataTableCell;


}),
"6693": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DataTableHeader: function() {
        return DataTableHeader;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _theming = __webpack_require__(10968);
var _colors = __webpack_require__(18847);
/**
 * A component to display title in table header.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { DataTable } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *       <DataTable>
 *         <DataTable.Header>
 *           <DataTable.Title
 *             sortDirection='descending'
 *           >
 *             Dessert
 *           </DataTable.Title>
 *           <DataTable.Title numeric>Calories</DataTable.Title>
 *           <DataTable.Title numeric>Fat (g)</DataTable.Title>
 *         </DataTable.Header>
 *       </DataTable>
 * );
 *
 * export default MyComponent;
 * ```
 */ var DataTableHeader = function(_param) {
    var children = _param.children, style = _param.style, themeOverrides = _param.theme, rest = _object_without_properties_loose._(_param, [
        "children",
        "style",
        "theme"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var borderBottomColor = theme.isV3 ? theme.colors.surfaceVariant : (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _extends._({}, rest, {
        style: [
            styles.header,
            {
                borderBottomColor: borderBottomColor
            },
            style
        ],
        children: children
    }));
};
DataTableHeader.displayName = 'DataTable.Header';
var styles = _reactnative.StyleSheet.create({
    header: {
        flexDirection: 'row',
        paddingHorizontal: 16,
        borderBottomWidth: _reactnative.StyleSheet.hairlineWidth * 2
    }
});
var _default = DataTableHeader;


}),
"94817": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DataTablePagination: function() {
        return DataTablePagination;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _theming = __webpack_require__(10968);
var _Button = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79972));
var _IconButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86395));
var _MaterialCommunityIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(81045));
var _Menu = /*#__PURE__*/ _interop_require_default._(__webpack_require__(7350));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
var PaginationControls = function(param) {
    var page = param.page, numberOfPages = param.numberOfPages, onPageChange = param.onPageChange, showFastPaginationControls = param.showFastPaginationControls, themeOverrides = param.theme, paginationControlRippleColor = param.paginationControlRippleColor;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            showFastPaginationControls ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_IconButton.default, {
                icon: function(param) {
                    var size = param.size, color = param.color;
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_MaterialCommunityIcon.default, {
                        name: "page-first",
                        color: color,
                        size: size,
                        direction: _reactnative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
                    });
                },
                iconColor: textColor,
                rippleColor: paginationControlRippleColor,
                disabled: page === 0,
                onPress: function() {
                    return onPageChange(0);
                },
                accessibilityLabel: "page-first",
                theme: theme
            }) : null,
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_IconButton.default, {
                icon: function(param) {
                    var size = param.size, color = param.color;
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_MaterialCommunityIcon.default, {
                        name: "chevron-left",
                        color: color,
                        size: size,
                        direction: _reactnative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
                    });
                },
                iconColor: textColor,
                rippleColor: paginationControlRippleColor,
                disabled: page === 0,
                onPress: function() {
                    return onPageChange(page - 1);
                },
                accessibilityLabel: "chevron-left",
                theme: theme
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_IconButton.default, {
                icon: function(param) {
                    var size = param.size, color = param.color;
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_MaterialCommunityIcon.default, {
                        name: "chevron-right",
                        color: color,
                        size: size,
                        direction: _reactnative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
                    });
                },
                iconColor: textColor,
                rippleColor: paginationControlRippleColor,
                disabled: numberOfPages === 0 || page === numberOfPages - 1,
                onPress: function() {
                    return onPageChange(page + 1);
                },
                accessibilityLabel: "chevron-right",
                theme: theme
            }),
            showFastPaginationControls ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_IconButton.default, {
                icon: function(param) {
                    var size = param.size, color = param.color;
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_MaterialCommunityIcon.default, {
                        name: "page-last",
                        color: color,
                        size: size,
                        direction: _reactnative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
                    });
                },
                iconColor: textColor,
                rippleColor: paginationControlRippleColor,
                disabled: numberOfPages === 0 || page === numberOfPages - 1,
                onPress: function() {
                    return onPageChange(numberOfPages - 1);
                },
                accessibilityLabel: "page-last",
                theme: theme
            }) : null
        ]
    });
};
var PaginationDropdown = function(param) {
    var numberOfItemsPerPageList = param.numberOfItemsPerPageList, numberOfItemsPerPage = param.numberOfItemsPerPage, onItemsPerPageChange = param.onItemsPerPageChange, themeOverrides = param.theme, selectPageDropdownRippleColor = param.selectPageDropdownRippleColor, dropdownItemRippleColor = param.dropdownItemRippleColor;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var colors = theme.colors;
    var _React_useState = _sliced_to_array._(_react.useState(false), 2), showSelect = _React_useState[0], toggleSelect = _React_useState[1];
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Menu.default, {
        visible: showSelect,
        onDismiss: function() {
            return toggleSelect(!showSelect);
        },
        theme: theme,
        anchor: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.default, {
            mode: "outlined",
            onPress: function() {
                return toggleSelect(true);
            },
            style: styles.button,
            icon: "menu-down",
            contentStyle: styles.contentStyle,
            theme: theme,
            rippleColor: selectPageDropdownRippleColor,
            children: "" + numberOfItemsPerPage
        }),
        children: numberOfItemsPerPageList == null ? void 0 : numberOfItemsPerPageList.map(function(option) {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Menu.default.Item, {
                titleStyle: option === numberOfItemsPerPage && {
                    color: colors == null ? void 0 : colors.primary
                },
                onPress: function() {
                    onItemsPerPageChange == null ? void 0 : onItemsPerPageChange(option);
                    toggleSelect(false);
                },
                rippleColor: dropdownItemRippleColor,
                title: option,
                theme: theme
            }, option);
        })
    });
};
/**
 * A component to show pagination for data table.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { DataTable } from 'react-native-paper';
 *
 * const numberOfItemsPerPageList = [2, 3, 4];
 *
 * const items = [
 *   {
 *     key: 1,
 *     name: 'Page 1',
 *   },
 *   {
 *     key: 2,
 *     name: 'Page 2',
 *   },
 *   {
 *     key: 3,
 *     name: 'Page 3',
 *   },
 * ];
 *
 * const MyComponent = () => {
 *   const [page, setPage] = React.useState(0);
 *   const [numberOfItemsPerPage, onItemsPerPageChange] = React.useState(numberOfItemsPerPageList[0]);
 *   const from = page * numberOfItemsPerPage;
 *   const to = Math.min((page + 1) * numberOfItemsPerPage, items.length);
 *
 *   React.useEffect(() => {
 *      setPage(0);
 *   }, [numberOfItemsPerPage]);
 *
 *   return (
 *     <DataTable>
 *       <DataTable.Pagination
 *         page={page}
 *         numberOfPages={Math.ceil(items.length / numberOfItemsPerPage)}
 *         onPageChange={page => setPage(page)}
 *         label={`${from + 1}-${to} of ${items.length}`}
 *         showFastPaginationControls
 *         numberOfItemsPerPageList={numberOfItemsPerPageList}
 *         numberOfItemsPerPage={numberOfItemsPerPage}
 *         onItemsPerPageChange={onItemsPerPageChange}
 *         selectPageDropdownLabel={'Rows per page'}
 *       />
 *     </DataTable>
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ var DataTablePagination = function(_param) {
    var label = _param.label, accessibilityLabel = _param.accessibilityLabel, page = _param.page, numberOfPages = _param.numberOfPages, onPageChange = _param.onPageChange, style = _param.style, _param_showFastPaginationControls = _param.showFastPaginationControls, showFastPaginationControls = _param_showFastPaginationControls === void 0 ? false : _param_showFastPaginationControls, numberOfItemsPerPageList = _param.numberOfItemsPerPageList, numberOfItemsPerPage = _param.numberOfItemsPerPage, onItemsPerPageChange = _param.onItemsPerPageChange, selectPageDropdownLabel = _param.selectPageDropdownLabel, selectPageDropdownAccessibilityLabel = _param.selectPageDropdownAccessibilityLabel, selectPageDropdownRippleColor = _param.selectPageDropdownRippleColor, dropdownItemRippleColor = _param.dropdownItemRippleColor, themeOverrides = _param.theme, rest = _object_without_properties_loose._(_param, [
        "label",
        "accessibilityLabel",
        "page",
        "numberOfPages",
        "onPageChange",
        "style",
        "showFastPaginationControls",
        "numberOfItemsPerPageList",
        "numberOfItemsPerPage",
        "onItemsPerPageChange",
        "selectPageDropdownLabel",
        "selectPageDropdownAccessibilityLabel",
        "selectPageDropdownRippleColor",
        "dropdownItemRippleColor",
        "theme"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var labelColor = (0, _color.default)(theme.isV3 ? theme.colors.onSurface : theme == null ? void 0 : theme.colors.text).alpha(0.6).rgb().string();
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, _extends._({}, rest, {
        style: [
            styles.container,
            style
        ],
        accessibilityLabel: "pagination-container",
        children: [
            numberOfItemsPerPageList && numberOfItemsPerPage && onItemsPerPageChange && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                accessibilityLabel: "Options Select",
                style: styles.optionsContainer,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                        style: [
                            styles.label,
                            {
                                color: labelColor
                            }
                        ],
                        numberOfLines: 3,
                        accessibilityLabel: selectPageDropdownAccessibilityLabel || 'selectPageDropdownLabel',
                        children: selectPageDropdownLabel
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(PaginationDropdown, {
                        numberOfItemsPerPageList: numberOfItemsPerPageList,
                        numberOfItemsPerPage: numberOfItemsPerPage,
                        onItemsPerPageChange: onItemsPerPageChange,
                        selectPageDropdownRippleColor: selectPageDropdownRippleColor,
                        dropdownItemRippleColor: dropdownItemRippleColor,
                        theme: theme
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                style: [
                    styles.label,
                    {
                        color: labelColor
                    }
                ],
                numberOfLines: 3,
                accessibilityLabel: accessibilityLabel || 'label',
                children: label
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                style: styles.iconsContainer,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(PaginationControls, {
                    showFastPaginationControls: showFastPaginationControls,
                    onPageChange: onPageChange,
                    page: page,
                    numberOfPages: numberOfPages,
                    theme: theme
                })
            })
        ]
    }));
};
DataTablePagination.displayName = 'DataTable.Pagination';
var styles = _reactnative.StyleSheet.create({
    container: {
        justifyContent: 'flex-end',
        flexDirection: 'row',
        alignItems: 'center',
        paddingLeft: 16,
        flexWrap: 'wrap'
    },
    optionsContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        marginVertical: 6
    },
    label: {
        fontSize: 12,
        marginRight: 16
    },
    button: {
        textAlign: 'center',
        marginRight: 16
    },
    iconsContainer: {
        flexDirection: 'row'
    },
    contentStyle: {
        flexDirection: 'row-reverse'
    }
});
var _default = DataTablePagination;


}),
"68927": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DataTableRow: function() {
        return DataTableRow;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _theming = __webpack_require__(10968);
var _colors = __webpack_require__(18847);
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
/**
 * A component to show a single row inside of a table.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { DataTable } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *      <DataTable.Row>
 *        <DataTable.Cell numeric>1</DataTable.Cell>
 *        <DataTable.Cell numeric>2</DataTable.Cell>
 *        <DataTable.Cell numeric>3</DataTable.Cell>
 *        <DataTable.Cell numeric>4</DataTable.Cell>
 *      </DataTable.Row>
 * );
 *
 * export default MyComponent;
 * ```
 *
 * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple
 */ var DataTableRow = function(_param) {
    var onPress = _param.onPress, style = _param.style, children = _param.children, pointerEvents = _param.pointerEvents, themeOverrides = _param.theme, rest = _object_without_properties_loose._(_param, [
        "onPress",
        "style",
        "children",
        "pointerEvents",
        "theme"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var borderBottomColor = theme.isV3 ? theme.colors.surfaceVariant : (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, _extends._({}, rest, {
        onPress: onPress,
        style: [
            styles.container,
            {
                borderBottomColor: borderBottomColor
            },
            style
        ],
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
            style: styles.content,
            pointerEvents: pointerEvents,
            children: children
        })
    }));
};
DataTableRow.displayName = 'DataTable.Row';
var styles = _reactnative.StyleSheet.create({
    container: {
        borderStyle: 'solid',
        borderBottomWidth: _reactnative.StyleSheet.hairlineWidth,
        minHeight: 48,
        paddingHorizontal: 16
    },
    content: {
        flex: 1,
        flexDirection: 'row'
    }
});
var _default = DataTableRow;


}),
"89091": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DataTableTitle: function() {
        return DataTableTitle;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _theming = __webpack_require__(10968);
var _MaterialCommunityIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(81045));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
/**
 * A component to display title in table header.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { DataTable } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *       <DataTable>
 *         <DataTable.Header>
 *           <DataTable.Title
 *             sortDirection='descending'
 *           >
 *             Dessert
 *           </DataTable.Title>
 *           <DataTable.Title numeric>Calories</DataTable.Title>
 *           <DataTable.Title numeric>Fat (g)</DataTable.Title>
 *         </DataTable.Header>
 *       </DataTable>
 * );
 *
 * export default MyComponent;
 * ```
 */ var DataTableTitle = function(_param) {
    var numeric = _param.numeric, children = _param.children, onPress = _param.onPress, sortDirection = _param.sortDirection, textStyle = _param.textStyle, style = _param.style, themeOverrides = _param.theme, _param_numberOfLines = _param.numberOfLines, numberOfLines = _param_numberOfLines === void 0 ? 1 : _param_numberOfLines, maxFontSizeMultiplier = _param.maxFontSizeMultiplier, rest = _object_without_properties_loose._(_param, [
        "numeric",
        "children",
        "onPress",
        "sortDirection",
        "textStyle",
        "style",
        "theme",
        "numberOfLines",
        "maxFontSizeMultiplier"
    ]);
    var _theme_colors;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React_useRef = _react.useRef(new _reactnative.Animated.Value(sortDirection === 'ascending' ? 0 : 1)), spinAnim = _React_useRef.current;
    _react.useEffect(function() {
        _reactnative.Animated.timing(spinAnim, {
            toValue: sortDirection === 'ascending' ? 0 : 1,
            duration: 150,
            useNativeDriver: true
        }).start();
    }, [
        sortDirection,
        spinAnim
    ]);
    var textColor = theme.isV3 ? theme.colors.onSurface : theme == null ? void 0 : (_theme_colors = theme.colors) == null ? void 0 : _theme_colors.text;
    var alphaTextColor = (0, _color.default)(textColor).alpha(0.6).rgb().string();
    var spin = spinAnim.interpolate({
        inputRange: [
            0,
            1
        ],
        outputRange: [
            '0deg',
            '180deg'
        ]
    });
    var icon = sortDirection ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
        style: [
            styles.icon,
            {
                transform: [
                    {
                        rotate: spin
                    }
                ]
            }
        ],
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_MaterialCommunityIcon.default, {
            name: "arrow-up",
            size: 16,
            color: textColor,
            direction: _reactnative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
        })
    }) : null;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.Pressable, _extends._({
        disabled: !onPress,
        onPress: onPress
    }, rest, {
        style: [
            styles.container,
            numeric && styles.right,
            style
        ],
        children: [
            icon,
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                style: [
                    styles.cell,
                    // height must scale with numberOfLines
                    {
                        maxHeight: 24 * numberOfLines
                    },
                    // if numberOfLines causes wrap, center is lost. Align directly, sensitive to numeric and RTL
                    numberOfLines > 1 ? numeric ? _reactnative.I18nManager.getConstants().isRTL ? styles.leftText : styles.rightText : styles.centerText : {},
                    sortDirection ? styles.sorted : {
                        color: alphaTextColor
                    },
                    textStyle
                ],
                numberOfLines: numberOfLines,
                maxFontSizeMultiplier: maxFontSizeMultiplier,
                children: children
            })
        ]
    }));
};
DataTableTitle.displayName = 'DataTable.Title';
var styles = _reactnative.StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'row',
        alignContent: 'center',
        paddingVertical: 12
    },
    rightText: {
        textAlign: 'right'
    },
    leftText: {
        textAlign: 'left'
    },
    centerText: {
        textAlign: 'center'
    },
    right: {
        justifyContent: 'flex-end'
    },
    cell: {
        lineHeight: 24,
        fontSize: 12,
        fontWeight: '500',
        alignItems: 'center'
    },
    sorted: {
        marginLeft: 8
    },
    icon: {
        height: 24,
        justifyContent: 'center'
    }
});
var _default = DataTableTitle;


}),
"57421": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _reactnativesafeareacontext = __webpack_require__(24144);
var _DialogActions = /*#__PURE__*/ _interop_require_default._(__webpack_require__(18858));
var _DialogContent = /*#__PURE__*/ _interop_require_default._(__webpack_require__(95386));
var _DialogIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(52665));
var _DialogScrollArea = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8265));
var _DialogTitle = /*#__PURE__*/ _interop_require_default._(__webpack_require__(95791));
var _theming = __webpack_require__(10968);
var _overlay = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87701));
var _Modal = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23213));
var DIALOG_ELEVATION = 24;
/**
 * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.
 * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](../../Portal) component.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { View } from 'react-native';
 * import { Button, Dialog, Portal, PaperProvider, Text } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [visible, setVisible] = React.useState(false);
 *
 *   const showDialog = () => setVisible(true);
 *
 *   const hideDialog = () => setVisible(false);
 *
 *   return (
 *     <PaperProvider>
 *       <View>
 *         <Button onPress={showDialog}>Show Dialog</Button>
 *         <Portal>
 *           <Dialog visible={visible} onDismiss={hideDialog}>
 *             <Dialog.Title>Alert</Dialog.Title>
 *             <Dialog.Content>
 *               <Text variant="bodyMedium">This is simple dialog</Text>
 *             </Dialog.Content>
 *             <Dialog.Actions>
 *               <Button onPress={hideDialog}>Done</Button>
 *             </Dialog.Actions>
 *           </Dialog>
 *         </Portal>
 *       </View>
 *     </PaperProvider>
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ var Dialog = function(param) {
    var children = param.children, _param_dismissable = param.dismissable, dismissable = _param_dismissable === void 0 ? true : _param_dismissable, _param_dismissableBackButton = param.dismissableBackButton, dismissableBackButton = _param_dismissableBackButton === void 0 ? dismissable : _param_dismissableBackButton, onDismiss = param.onDismiss, _param_visible = param.visible, visible = _param_visible === void 0 ? false : _param_visible, style = param.style, themeOverrides = param.theme, testID = param.testID;
    var _useSafeAreaInsets = (0, _reactnativesafeareacontext.useSafeAreaInsets)(), right = _useSafeAreaInsets.right, left = _useSafeAreaInsets.left;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isV3 = theme.isV3, dark = theme.dark, mode = theme.mode, colors = theme.colors, roundness = theme.roundness;
    var borderRadius = (isV3 ? 7 : 1) * roundness;
    var backgroundColorV2 = dark && mode === 'adaptive' ? (0, _overlay.default)(DIALOG_ELEVATION, colors == null ? void 0 : colors.surface) : colors == null ? void 0 : colors.surface;
    var backgroundColor = isV3 ? theme.colors.elevation.level3 : backgroundColorV2;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
        dismissable: dismissable,
        dismissableBackButton: dismissableBackButton,
        onDismiss: onDismiss,
        visible: visible,
        contentContainerStyle: [
            {
                borderRadius: borderRadius,
                backgroundColor: backgroundColor,
                marginHorizontal: Math.max(left, right, 26)
            },
            styles.container,
            style
        ],
        theme: theme,
        testID: testID,
        children: _react.Children.toArray(children).filter(function(child) {
            return child != null && typeof child !== 'boolean';
        }).map(function(child, i) {
            if (isV3) {
                if (i === 0 && /*#__PURE__*/ _react.isValidElement(child)) {
                    return /*#__PURE__*/ _react.cloneElement(child, {
                        style: [
                            {
                                marginTop: 24
                            },
                            child.props.style
                        ]
                    });
                }
            }
            if (i === 0 && /*#__PURE__*/ _react.isValidElement(child) && child.type === _DialogContent.default) {
                // Dialog content is the first item, so we add a top padding
                return /*#__PURE__*/ _react.cloneElement(child, {
                    style: [
                        {
                            paddingTop: 24
                        },
                        child.props.style
                    ]
                });
            }
            return child;
        })
    });
};
// @component ./DialogContent.tsx
Dialog.Content = _DialogContent.default;
// @component ./DialogActions.tsx
Dialog.Actions = _DialogActions.default;
// @component ./DialogTitle.tsx
Dialog.Title = _DialogTitle.default;
// @component ./DialogScrollArea.tsx
Dialog.ScrollArea = _DialogScrollArea.default;
// @component ./DialogIcon.tsx
Dialog.Icon = _DialogIcon.default;
var styles = _reactnative.StyleSheet.create({
    container: {
        /**
     * This prevents the shadow from being clipped on Android since Android
     * doesn't support `overflow: visible`.
     * One downside for this fix is that it will disable clicks on the area
     * of the shadow around the dialog, consequently, if you click around the
     * dialog (44 pixel from the top and bottom) it won't be dismissed.
     */ marginVertical: _reactnative.Platform.OS === 'android' ? 44 : 0,
        elevation: DIALOG_ELEVATION,
        justifyContent: 'flex-start'
    }
});
var _default = Dialog;


}),
"18858": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _theming = __webpack_require__(10968);
/**
 * A component to show a list of actions in a Dialog.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Button, Dialog, Portal } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [visible, setVisible] = React.useState(false);
 *
 *   const hideDialog = () => setVisible(false);
 *
 *   return (
 *     <Portal>
 *       <Dialog visible={visible} onDismiss={hideDialog}>
 *         <Dialog.Actions>
 *           <Button onPress={() => console.log('Cancel')}>Cancel</Button>
 *           <Button onPress={() => console.log('Ok')}>Ok</Button>
 *         </Dialog.Actions>
 *       </Dialog>
 *     </Portal>
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ var DialogActions = function(props) {
    var isV3 = (0, _theming.useInternalTheme)(props.theme).isV3;
    var actionsLength = _react.Children.toArray(props.children).length;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _extends._({}, props, {
        style: [
            isV3 ? styles.v3Container : styles.container,
            props.style
        ],
        children: _react.Children.map(props.children, function(child, i) {
            return /*#__PURE__*/ _react.isValidElement(child) ? /*#__PURE__*/ _react.cloneElement(child, {
                compact: true,
                uppercase: !isV3,
                style: [
                    isV3 && {
                        marginRight: i + 1 === actionsLength ? 0 : 8
                    },
                    child.props.style
                ]
            }) : child;
        })
    }));
};
DialogActions.displayName = 'Dialog.Actions';
var styles = _reactnative.StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'flex-end',
        padding: 8
    },
    v3Container: {
        flexDirection: 'row',
        flexGrow: 1,
        alignItems: 'center',
        justifyContent: 'flex-end',
        paddingBottom: 24,
        paddingHorizontal: 24
    }
});
var _default = DialogActions;


}),
"95386": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
/**
 * A component to show content in a Dialog.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Dialog, Portal, Text } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [visible, setVisible] = React.useState(false);
 *
 *   const hideDialog = () => setVisible(false);
 *
 *   return (
 *     <Portal>
 *       <Dialog visible={visible} onDismiss={hideDialog}>
 *         <Dialog.Content>
 *           <Text variant="bodyMedium">This is simple dialog</Text>
 *         </Dialog.Content>
 *       </Dialog>
 *     </Portal>
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ var DialogContent = function(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _extends._({}, props, {
        style: [
            styles.container,
            props.style
        ],
        children: props.children
    }));
};
DialogContent.displayName = 'Dialog.Content';
var styles = _reactnative.StyleSheet.create({
    container: {
        paddingBottom: 24,
        paddingHorizontal: 24
    }
});
var _default = DialogContent;


}),
"52665": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DialogIcon: function() {
        return DialogIcon;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _theming = __webpack_require__(10968);
var _Icon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80639));
/**
 * @supported Available in v5.x with theme version 3
 * A component to show an icon in a Dialog.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { StyleSheet } from 'react-native';
 * import { Dialog, Portal, Text } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [visible, setVisible] = React.useState(false);
 *
 *   const hideDialog = () => setVisible(false);
 *
 *   return (
 *     <Portal>
 *       <Dialog visible={visible} onDismiss={hideDialog}>
 *         <Dialog.Icon icon="alert" />
 *         <Dialog.Title style={styles.title}>This is a title</Dialog.Title>
 *         <Dialog.Content>
 *           <Text variant="bodyMedium">This is simple dialog</Text>
 *         </Dialog.Content>
 *       </Dialog>
 *     </Portal>
 *   );
 * };
 *
 * const styles = StyleSheet.create({
 *   title: {
 *     textAlign: 'center',
 *   },
 * })
 *
 * export default MyComponent;
 * ```
 */ var DialogIcon = function(param) {
    var _param_size = param.size, size = _param_size === void 0 ? 24 : _param_size, color = param.color, icon = param.icon, themeOverrides = param.theme;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    if (!theme.isV3) {
        return null;
    }
    //@ts-ignore
    var iconColor = color || theme.colors.secondary;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
        style: styles.wrapper,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.default, {
            source: icon,
            color: iconColor,
            size: size
        })
    });
};
DialogIcon.displayName = 'Dialog.Icon';
var styles = _reactnative.StyleSheet.create({
    wrapper: {
        alignItems: 'center',
        justifyContent: 'center',
        paddingTop: 24
    }
});
var _default = DialogIcon;


}),
"8265": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _theming = __webpack_require__(10968);
/**
 * A component to show a scrollable content in a Dialog. The component only provides appropriate styling.
 * For the scrollable content you can use `ScrollView`, `FlatList` etc. depending on your requirement.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { ScrollView } from 'react-native';
 * import { Dialog, Portal, Text } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [visible, setVisible] = React.useState(false);
 *
 *   const hideDialog = () => setVisible(false);
 *
 *   return (
 *     <Portal>
 *       <Dialog visible={visible} onDismiss={hideDialog}>
 *         <Dialog.ScrollArea>
 *           <ScrollView contentContainerStyle={{paddingHorizontal: 24}}>
 *             <Text>This is a scrollable area</Text>
 *           </ScrollView>
 *         </Dialog.ScrollArea>
 *       </Dialog>
 *     </Portal>
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ var DialogScrollArea = function(props) {
    var theme = (0, _theming.useInternalTheme)(props.theme);
    var borderStyles = {
        borderColor: theme.isV3 ? theme.colors.surfaceVariant : 'rgba(0, 0, 0, .12)',
        borderTopWidth: theme.isV3 ? 1 : _reactnative.StyleSheet.hairlineWidth,
        borderBottomWidth: theme.isV3 ? 1 : _reactnative.StyleSheet.hairlineWidth
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _extends._({}, props, {
        style: [
            styles.container,
            borderStyles,
            theme.isV3 && styles.v3Container,
            props.style
        ],
        children: props.children
    }));
};
DialogScrollArea.displayName = 'Dialog.ScrollArea';
var styles = _reactnative.StyleSheet.create({
    container: {
        paddingHorizontal: 24,
        flexGrow: 1,
        flexShrink: 1
    },
    v3Container: {
        marginBottom: 24
    }
});
var _default = DialogScrollArea;


}),
"95791": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DialogTitle: function() {
        return DialogTitle;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _theming = __webpack_require__(10968);
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
var _Title = /*#__PURE__*/ _interop_require_default._(__webpack_require__(14041));
/**
 * A component to show a title in a Dialog.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Dialog, Portal, Text } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [visible, setVisible] = React.useState(false);
 *
 *   const hideDialog = () => setVisible(false);
 *
 *   return (
 *     <Portal>
 *       <Dialog visible={visible} onDismiss={hideDialog}>
 *         <Dialog.Title>This is a title</Dialog.Title>
 *         <Dialog.Content>
 *           <Text variant="bodyMedium">This is simple dialog</Text>
 *         </Dialog.Content>
 *       </Dialog>
 *     </Portal>
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ var DialogTitle = function(_param) {
    var children = _param.children, themeOverrides = _param.theme, style = _param.style, rest = _object_without_properties_loose._(_param, [
        "children",
        "theme",
        "style"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isV3 = theme.isV3, colors = theme.colors, fonts = theme.fonts;
    var TextComponent = isV3 ? _Text.default : _Title.default;
    var headerTextStyle = _extends._({
        color: isV3 ? colors.onSurface : colors == null ? void 0 : colors.text
    }, isV3 ? fonts.headlineSmall : {});
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(TextComponent, _extends._({
        variant: "headlineSmall",
        accessibilityRole: "header",
        style: [
            styles.text,
            isV3 && styles.v3Text,
            headerTextStyle,
            style
        ]
    }, rest, {
        children: children
    }));
};
DialogTitle.displayName = 'Dialog.Title';
var styles = _reactnative.StyleSheet.create({
    text: {
        marginTop: 22,
        marginBottom: 18,
        marginHorizontal: 24
    },
    v3Text: {
        marginTop: 16,
        marginBottom: 16
    }
});
var _default = DialogTitle;


}),
"62550": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _theming = __webpack_require__(10968);
var _colors = __webpack_require__(18847);
/**
 * A divider is a thin, lightweight separator that groups content in lists and page layouts.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { View } from 'react-native';
 * import { Divider, Text } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <View>
 *     <Text>Lemon</Text>
 *     <Divider />
 *     <Text>Mango</Text>
 *     <Divider />
 *   </View>
 * );
 *
 * export default MyComponent;
 * ```
 */ var Divider = function(_param) {
    var leftInset = _param.leftInset, _param_horizontalInset = _param.horizontalInset, horizontalInset = _param_horizontalInset === void 0 ? false : _param_horizontalInset, style = _param.style, themeOverrides = _param.theme, _param_bold = _param.bold, bold = _param_bold === void 0 ? false : _param_bold, rest = _object_without_properties_loose._(_param, [
        "leftInset",
        "horizontalInset",
        "style",
        "theme",
        "bold"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isDarkTheme = theme.dark, isV3 = theme.isV3;
    var dividerColor = isV3 ? theme.colors.outlineVariant : (0, _color.default)(isDarkTheme ? _colors.white : _colors.black).alpha(0.12).rgb().string();
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _extends._({}, rest, {
        style: [
            {
                height: _reactnative.StyleSheet.hairlineWidth,
                backgroundColor: dividerColor
            },
            leftInset && (isV3 ? styles.v3LeftInset : styles.leftInset),
            isV3 && horizontalInset && styles.horizontalInset,
            isV3 && bold && styles.bold,
            style
        ]
    }));
};
var styles = _reactnative.StyleSheet.create({
    leftInset: {
        marginLeft: 72
    },
    v3LeftInset: {
        marginLeft: 16
    },
    horizontalInset: {
        marginLeft: 16,
        marginRight: 16
    },
    bold: {
        height: 1
    }
});
var _default = Divider;


}),
"42538": (function (__unused_webpack_module, exports, __webpack_require__) {
// @component ./DrawerItem.tsx
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CollapsedItem: function() {
        return _DrawerCollapsedItem.default;
    },
    Item: function() {
        return _DrawerItem.default;
    },
    Section: function() {
        return _DrawerSection.default;
    }
});
var _interop_require_default = __webpack_require__(60133);
var _DrawerItem = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2502));
var _DrawerCollapsedItem = /*#__PURE__*/ _interop_require_default._(__webpack_require__(62403));
var _DrawerSection = /*#__PURE__*/ _interop_require_default._(__webpack_require__(41034));


}),
"62403": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _theming = __webpack_require__(10968);
var _Badge = /*#__PURE__*/ _interop_require_default._(__webpack_require__(60515));
var _Icon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80639));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
var badgeSize = 8;
var iconSize = 24;
var itemSize = 56;
var outlineHeight = 32;
/**
 * Note: Available in v5.x with theme version 3
 *
 * Collapsed component used to show an action item with an icon and optionally label in a navigation drawer.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Drawer } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *    <Drawer.CollapsedItem
 *      focusedIcon="inbox"
 *      unfocusedIcon="inbox-outline"
 *      label="Inbox"
 *    />
 * );
 *
 * export default MyComponent;
 * ```
 */ var DrawerCollapsedItem = function(_param) {
    var focusedIcon = _param.focusedIcon, unfocusedIcon = _param.unfocusedIcon, label = _param.label, active = _param.active, themeOverrides = _param.theme, style = _param.style, onPress = _param.onPress, disabled = _param.disabled, accessibilityLabel = _param.accessibilityLabel, _param_badge = _param.badge, badge = _param_badge === void 0 ? false : _param_badge, _param_testID = _param.testID, testID = _param_testID === void 0 ? 'drawer-collapsed-item' : _param_testID, labelMaxFontSizeMultiplier = _param.labelMaxFontSizeMultiplier, rest = _object_without_properties_loose._(_param, [
        "focusedIcon",
        "unfocusedIcon",
        "label",
        "active",
        "theme",
        "style",
        "onPress",
        "disabled",
        "accessibilityLabel",
        "badge",
        "testID",
        "labelMaxFontSizeMultiplier"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isV3 = theme.isV3;
    var scale = theme.animation.scale;
    var _React_useState = _sliced_to_array._(_react.useState(1), 2), numOfLines = _React_useState[0], setNumOfLines = _React_useState[1];
    var _React_useRef = _react.useRef(new _reactnative.Animated.Value(active ? 1 : 0.5)), animScale = _React_useRef.current;
    _react.useEffect(function() {
        if (!active) {
            animScale.setValue(0.5);
        }
    }, [
        animScale,
        active
    ]);
    if (!isV3) {
        return null;
    }
    var handlePressOut = function() {
        _reactnative.Animated.timing(animScale, {
            toValue: 1,
            duration: 150 * scale,
            useNativeDriver: true
        }).start();
    };
    var iconPadding = ((!label ? itemSize : outlineHeight) - iconSize) / 2;
    var backgroundColor = active ? theme.colors.secondaryContainer : 'transparent';
    var labelColor = active ? theme.colors.onSurface : theme.colors.onSurfaceVariant;
    var iconColor = active ? theme.colors.onSecondaryContainer : theme.colors.onSurfaceVariant;
    var onTextLayout = function(param) {
        var nativeEvent = param.nativeEvent;
        setNumOfLines(nativeEvent.lines.length);
    };
    // Label is cut off on Android, when centered "labelMedium" text
    // has more than 4 lines, so there is a need to decrease the letter spacing.
    var androidLetterSpacingStyle = _reactnative.Platform.OS === 'android' && numOfLines > 4 && styles.letterSpacing;
    var labelTextStyle = _extends._({
        color: labelColor
    }, isV3 ? theme.fonts.labelMedium : {});
    var icon = !active && unfocusedIcon !== undefined ? unfocusedIcon : focusedIcon;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _extends._({}, rest, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Pressable, {
            onPress: onPress,
            onPressOut: onPress ? handlePressOut : undefined,
            disabled: disabled,
            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions
            accessibilityTraits: active ? [
                'button',
                'selected'
            ] : 'button',
            accessibilityComponentType: "button",
            accessibilityRole: "button",
            accessibilityState: {
                selected: active
            },
            accessibilityLabel: accessibilityLabel,
            testID: testID,
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                style: styles.wrapper,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                        style: [
                            styles.outline,
                            !label && styles.roundedOutline,
                            {
                                transform: [
                                    label ? {
                                        scaleX: animScale
                                    } : {
                                        scale: animScale
                                    }
                                ],
                                backgroundColor: backgroundColor
                            },
                            style
                        ],
                        testID: "" + testID + "-outline"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                        style: [
                            styles.icon,
                            {
                                top: iconPadding
                            }
                        ],
                        testID: "" + testID + "-container",
                        children: [
                            badge && /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                                style: styles.badgeContainer,
                                children: typeof badge === 'boolean' ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_Badge.default, {
                                    visible: badge,
                                    size: badgeSize
                                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_Badge.default, {
                                    visible: badge != null,
                                    size: 2 * badgeSize,
                                    children: badge
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.default, {
                                source: icon,
                                size: iconSize,
                                color: iconColor
                            })
                        ]
                    }),
                    label ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                        variant: "labelMedium",
                        selectable: false,
                        numberOfLines: 2,
                        onTextLayout: onTextLayout,
                        style: [
                            styles.label,
                            androidLetterSpacingStyle,
                            labelTextStyle
                        ],
                        maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
                        children: label
                    }) : null
                ]
            })
        })
    }));
};
DrawerCollapsedItem.displayName = 'Drawer.CollapsedItem';
var styles = _reactnative.StyleSheet.create({
    wrapper: {
        width: 80,
        marginBottom: 12,
        minHeight: itemSize,
        alignItems: 'center'
    },
    outline: {
        width: itemSize,
        height: outlineHeight,
        borderRadius: itemSize / 2,
        alignItems: 'center',
        justifyContent: 'center'
    },
    roundedOutline: {
        height: itemSize
    },
    icon: {
        position: 'absolute'
    },
    letterSpacing: {
        letterSpacing: 0.3,
        alignSelf: 'stretch'
    },
    label: {
        marginHorizontal: 12,
        marginTop: 4,
        textAlign: 'center'
    },
    badgeContainer: {
        position: 'absolute',
        left: 20,
        bottom: 20,
        zIndex: 2
    }
});
var _default = DrawerCollapsedItem;


}),
"2502": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _theming = __webpack_require__(10968);
var _Icon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80639));
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
/**
 * A component used to show an action item with an icon and a label in a navigation drawer.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Drawer } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *    <Drawer.Item
 *      style={{ backgroundColor: '#64ffda' }}
 *      icon="star"
 *      label="First Item"
 *    />
 * );
 *
 * export default MyComponent;
 * ```
 */ var DrawerItem = function(_param) {
    var icon = _param.icon, label = _param.label, active = _param.active, disabled = _param.disabled, themeOverrides = _param.theme, customRippleColor = _param.rippleColor, style = _param.style, onPress = _param.onPress, background = _param.background, accessibilityLabel = _param.accessibilityLabel, right = _param.right, labelMaxFontSizeMultiplier = _param.labelMaxFontSizeMultiplier, rest = _object_without_properties_loose._(_param, [
        "icon",
        "label",
        "active",
        "disabled",
        "theme",
        "rippleColor",
        "style",
        "onPress",
        "background",
        "accessibilityLabel",
        "right",
        "labelMaxFontSizeMultiplier"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var roundness = theme.roundness, isV3 = theme.isV3;
    var backgroundColor = active ? isV3 ? theme.colors.secondaryContainer : (0, _color.default)(theme.colors.primary).alpha(0.12).rgb().string() : undefined;
    var contentColor = active ? isV3 ? theme.colors.onSecondaryContainer : theme.colors.primary : isV3 ? theme.colors.onSurfaceVariant : (0, _color.default)(theme.colors.text).alpha(0.68).rgb().string();
    var labelMargin = icon ? isV3 ? 12 : 32 : 0;
    var borderRadius = (isV3 ? 7 : 1) * roundness;
    var rippleColor = isV3 ? (0, _color.default)(contentColor).alpha(0.12).rgb().string() : undefined;
    var font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _extends._({}, rest, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, {
            borderless: true,
            disabled: disabled,
            background: background,
            onPress: onPress,
            style: [
                styles.container,
                {
                    backgroundColor: backgroundColor,
                    borderRadius: borderRadius
                },
                isV3 && styles.v3Container,
                style
            ],
            accessibilityRole: "button",
            accessibilityState: {
                selected: active
            },
            accessibilityLabel: accessibilityLabel,
            rippleColor: customRippleColor || rippleColor,
            theme: theme,
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                style: [
                    styles.wrapper,
                    isV3 && styles.v3Wrapper
                ],
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                        style: styles.content,
                        children: [
                            icon ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.default, {
                                source: icon,
                                size: 24,
                                color: contentColor
                            }) : null,
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                                variant: "labelLarge",
                                selectable: false,
                                numberOfLines: 1,
                                style: [
                                    styles.label,
                                    _extends._({
                                        color: contentColor,
                                        marginLeft: labelMargin
                                    }, font)
                                ],
                                maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
                                children: label
                            })
                        ]
                    }),
                    right == null ? void 0 : right({
                        color: contentColor
                    })
                ]
            })
        })
    }));
};
DrawerItem.displayName = 'Drawer.Item';
var styles = _reactnative.StyleSheet.create({
    container: {
        marginHorizontal: 10,
        marginVertical: 4
    },
    v3Container: {
        justifyContent: 'center',
        height: 56,
        marginLeft: 12,
        marginRight: 12,
        marginVertical: 0
    },
    wrapper: {
        flexDirection: 'row',
        alignItems: 'center',
        padding: 8
    },
    v3Wrapper: {
        marginLeft: 16,
        marginRight: 24,
        padding: 0
    },
    content: {
        flex: 1,
        flexDirection: 'row',
        alignItems: 'center'
    },
    label: {
        marginRight: 32
    }
});
var _default = DrawerItem;


}),
"41034": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _theming = __webpack_require__(10968);
var _tokens = __webpack_require__(95157);
var _Divider = /*#__PURE__*/ _interop_require_default._(__webpack_require__(62550));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
/**
 * A component to group content inside a navigation drawer.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Drawer } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [active, setActive] = React.useState('');
 *
 *   return (
 *     <Drawer.Section title="Some title">
 *       <Drawer.Item
 *         label="First Item"
 *         active={active === 'first'}
 *         onPress={() => setActive('first')}
 *       />
 *       <Drawer.Item
 *         label="Second Item"
 *         active={active === 'second'}
 *         onPress={() => setActive('second')}
 *       />
 *     </Drawer.Section>
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ var DrawerSection = function(_param) {
    var children = _param.children, title = _param.title, themeOverrides = _param.theme, style = _param.style, _param_showDivider = _param.showDivider, showDivider = _param_showDivider === void 0 ? true : _param_showDivider, titleMaxFontSizeMultiplier = _param.titleMaxFontSizeMultiplier, rest = _object_without_properties_loose._(_param, [
        "children",
        "title",
        "theme",
        "style",
        "showDivider",
        "titleMaxFontSizeMultiplier"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isV3 = theme.isV3;
    var titleColor = isV3 ? theme.colors.onSurfaceVariant : (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
    var titleMargin = isV3 ? 28 : 16;
    var font = isV3 ? theme.fonts.titleSmall : theme.fonts.medium;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, _extends._({
        style: [
            styles.container,
            style
        ]
    }, rest, {
        children: [
            title && /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                style: [
                    styles.titleContainer,
                    isV3 && styles.v3TitleContainer
                ],
                children: title && /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                    variant: "titleSmall",
                    numberOfLines: 1,
                    style: [
                        _extends._({
                            color: titleColor,
                            marginLeft: titleMargin
                        }, font)
                    ],
                    maxFontSizeMultiplier: titleMaxFontSizeMultiplier,
                    children: title
                })
            }),
            children,
            showDivider && /*#__PURE__*/ (0, _jsxruntime.jsx)(_Divider.default, _extends._({}, isV3 && {
                horizontalInset: true,
                bold: true
            }, {
                style: [
                    styles.divider,
                    isV3 && styles.v3Divider
                ],
                theme: theme
            }))
        ]
    }));
};
DrawerSection.displayName = 'Drawer.Section';
var styles = _reactnative.StyleSheet.create({
    container: {
        marginBottom: 4
    },
    titleContainer: {
        height: 40,
        justifyContent: 'center'
    },
    v3TitleContainer: {
        height: 56
    },
    divider: {
        marginTop: 4
    },
    v3Divider: {
        backgroundColor: _tokens.MD3Colors.neutralVariant50
    }
});
var _default = DrawerSection;


}),
"61659": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _define_property = __webpack_require__(11649);
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _utils = __webpack_require__(71116);
var _theming = __webpack_require__(10968);
var _Icon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80639));
var _Surface = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2403));
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
var _AnimatedText = /*#__PURE__*/ _interop_require_default._(__webpack_require__(24904));
var SIZE = 56;
var SCALE = 0.9;
/**
 * An animated, extending horizontally floating action button represents the primary action in an application.
 *
 * ## Usage
 * ```js
 * import React from 'react';
 * import {
 *   StyleProp,
 *   ViewStyle,
 *   Animated,
 *   StyleSheet,
 *   Platform,
 *   ScrollView,
 *   Text,
 *   SafeAreaView,
 *   I18nManager,
 * } from 'react-native';
 * import { AnimatedFAB } from 'react-native-paper';
 *
 * const MyComponent = ({
 *   animatedValue,
 *   visible,
 *   extended,
 *   label,
 *   animateFrom,
 *   style,
 *   iconMode,
 * }) => {
 *   const [isExtended, setIsExtended] = React.useState(true);
 *
 *   const isIOS = Platform.OS === 'ios';
 *
 *   const onScroll = ({ nativeEvent }) => {
 *     const currentScrollPosition =
 *       Math.floor(nativeEvent?.contentOffset?.y) ?? 0;
 *
 *     setIsExtended(currentScrollPosition <= 0);
 *   };
 *
 *   const fabStyle = { [animateFrom]: 16 };
 *
 *   return (
 *     <SafeAreaView style={styles.container}>
 *       <ScrollView onScroll={onScroll}>
 *         {[...new Array(100).keys()].map((_, i) => (
 *           <Text>{i}</Text>
 *         ))}
 *       </ScrollView>
 *       <AnimatedFAB
 *         icon={'plus'}
 *         label={'Label'}
 *         extended={isExtended}
 *         onPress={() => console.log('Pressed')}
 *         visible={visible}
 *         animateFrom={'right'}
 *         iconMode={'static'}
 *         style={[styles.fabStyle, style, fabStyle]}
 *       />
 *     </SafeAreaView>
 *   );
 * };
 *
 * export default MyComponent;
 *
 * const styles = StyleSheet.create({
 *   container: {
 *     flexGrow: 1,
 *   },
 *   fabStyle: {
 *     bottom: 16,
 *     right: 16,
 *     position: 'absolute',
 *   },
 * });
 * ```
 */ var AnimatedFAB = function(_param) {
    var icon = _param.icon, label = _param.label, background = _param.background, _param_accessibilityLabel = _param.accessibilityLabel, accessibilityLabel = _param_accessibilityLabel === void 0 ? label : _param_accessibilityLabel, accessibilityState = _param.accessibilityState, customColor = _param.color, customRippleColor = _param.rippleColor, disabled = _param.disabled, onPress = _param.onPress, onLongPress = _param.onLongPress, delayLongPress = _param.delayLongPress, themeOverrides = _param.theme, style = _param.style, _param_visible = _param.visible, visible = _param_visible === void 0 ? true : _param_visible, uppercaseProp = _param.uppercase, _param_testID = _param.testID, testID = _param_testID === void 0 ? 'animated-fab' : _param_testID, _param_animateFrom = _param.animateFrom, animateFrom = _param_animateFrom === void 0 ? 'right' : _param_animateFrom, _param_extended = _param.extended, extended = _param_extended === void 0 ? false : _param_extended, _param_iconMode = _param.iconMode, iconMode = _param_iconMode === void 0 ? 'dynamic' : _param_iconMode, _param_variant = _param.variant, variant = _param_variant === void 0 ? 'primary' : _param_variant, labelMaxFontSizeMultiplier = _param.labelMaxFontSizeMultiplier, rest = _object_without_properties_loose._(_param, [
        "icon",
        "label",
        "background",
        "accessibilityLabel",
        "accessibilityState",
        "color",
        "rippleColor",
        "disabled",
        "onPress",
        "onLongPress",
        "delayLongPress",
        "theme",
        "style",
        "visible",
        "uppercase",
        "testID",
        "animateFrom",
        "extended",
        "iconMode",
        "variant",
        "labelMaxFontSizeMultiplier"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var uppercase = uppercaseProp != null ? uppercaseProp : !theme.isV3;
    var isIOS = _reactnative.Platform.OS === 'ios';
    var isAnimatedFromRight = animateFrom === 'right';
    var isIconStatic = iconMode === 'static';
    var isRTL = _reactnative.I18nManager.isRTL;
    var _React_useRef = _react.useRef(new _reactnative.Animated.Value(visible ? 1 : 0)), visibility = _React_useRef.current;
    var _React_useRef1 = _react.useRef(new _reactnative.Animated.Value(0)), animFAB = _React_useRef1.current;
    var isV3 = theme.isV3, animation = theme.animation;
    var scale = animation.scale;
    var _React_useState = _sliced_to_array._(_react.useState(0), 2), textWidth = _React_useState[0], setTextWidth = _React_useState[1];
    var _React_useState1 = _sliced_to_array._(_react.useState(0), 2), textHeight = _React_useState1[0], setTextHeight = _React_useState1[1];
    var borderRadius = SIZE / (isV3 ? 3.5 : 2);
    _react.useEffect(function() {
        if (visible) {
            _reactnative.Animated.timing(visibility, {
                toValue: 1,
                duration: 200 * scale,
                useNativeDriver: true
            }).start();
        } else {
            _reactnative.Animated.timing(visibility, {
                toValue: 0,
                duration: 150 * scale,
                useNativeDriver: true
            }).start();
        }
    }, [
        visible,
        scale,
        visibility
    ]);
    var _ref = _reactnative.StyleSheet.flatten(style) || {}, customBackgroundColor = _ref.backgroundColor, restStyle = _object_without_properties_loose._(_ref, [
        "backgroundColor"
    ]);
    var _getFABColors = (0, _utils.getFABColors)({
        theme: theme,
        variant: variant,
        disabled: disabled,
        customColor: customColor,
        customBackgroundColor: customBackgroundColor
    }), backgroundColor = _getFABColors.backgroundColor, foregroundColor = _getFABColors.foregroundColor;
    var rippleColor = customRippleColor || (0, _color.default)(foregroundColor).alpha(0.12).rgb().string();
    var extendedWidth = textWidth + SIZE + borderRadius;
    var distance = isAnimatedFromRight ? -textWidth - borderRadius : textWidth + borderRadius;
    _react.useEffect(function() {
        _reactnative.Animated.timing(animFAB, {
            toValue: !extended ? 0 : distance,
            duration: 150 * scale,
            useNativeDriver: true,
            easing: _reactnative.Easing.linear
        }).start();
    }, [
        animFAB,
        scale,
        distance,
        extended
    ]);
    var onTextLayout = function(param) {
        var nativeEvent = param.nativeEvent;
        var currentWidth = Math.ceil(nativeEvent.lines[0].width);
        var currentHeight = Math.ceil(nativeEvent.lines[0].height);
        if (currentWidth !== textWidth || currentHeight !== textHeight) {
            setTextHeight(currentHeight);
            if (isIOS) {
                return setTextWidth(currentWidth - 12);
            }
            setTextWidth(currentWidth);
        }
    };
    var propForDirection = function(right) {
        if (isAnimatedFromRight) {
            return right;
        }
        return right.reverse();
    };
    var combinedStyles = (0, _utils.getCombinedStyles)({
        isAnimatedFromRight: isAnimatedFromRight,
        isIconStatic: isIconStatic,
        distance: distance,
        animFAB: animFAB
    });
    var font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;
    var textStyle = _extends._({
        color: foregroundColor
    }, font);
    var md2Elevation = disabled || !isIOS ? 0 : 6;
    var md3Elevation = disabled || !isIOS ? 0 : 3;
    var shadowStyle = isV3 ? styles.v3Shadow : styles.shadow;
    var baseStyle = [
        _reactnative.StyleSheet.absoluteFill,
        disabled ? styles.disabled : shadowStyle
    ];
    var newAccessibilityState = _extends._({}, accessibilityState, {
        disabled: disabled
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Surface.default, _extends._({}, rest, {
        testID: "" + testID + "-container",
        style: [
            {
                opacity: visibility,
                transform: [
                    {
                        scale: visibility
                    }
                ],
                borderRadius: borderRadius
            },
            !isV3 && {
                elevation: md2Elevation
            },
            styles.container,
            restStyle
        ]
    }, isV3 && {
        elevation: md3Elevation
    }, {
        theme: theme,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.Animated.View, {
                style: [
                    !isV3 && {
                        transform: [
                            {
                                scaleY: animFAB.interpolate({
                                    inputRange: propForDirection([
                                        distance,
                                        0
                                    ]),
                                    outputRange: propForDirection([
                                        SCALE,
                                        1
                                    ])
                                })
                            }
                        ]
                    },
                    styles.standard,
                    {
                        borderRadius: borderRadius
                    }
                ],
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                        style: [
                            _reactnative.StyleSheet.absoluteFill,
                            styles.shadowWrapper
                        ],
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                                pointerEvents: "none",
                                style: [
                                    baseStyle,
                                    {
                                        width: extendedWidth,
                                        opacity: animFAB.interpolate({
                                            inputRange: propForDirection([
                                                distance,
                                                0.9 * distance,
                                                0
                                            ]),
                                            outputRange: propForDirection([
                                                1,
                                                0.15,
                                                0
                                            ])
                                        }),
                                        borderRadius: borderRadius
                                    }
                                ],
                                testID: "" + testID + "-extended-shadow"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                                pointerEvents: "none",
                                style: [
                                    baseStyle,
                                    {
                                        opacity: animFAB.interpolate({
                                            inputRange: propForDirection([
                                                distance,
                                                0.9 * distance,
                                                0
                                            ]),
                                            outputRange: propForDirection([
                                                0,
                                                0.85,
                                                1
                                            ])
                                        }),
                                        width: SIZE,
                                        borderRadius: animFAB.interpolate({
                                            inputRange: propForDirection([
                                                distance,
                                                0
                                            ]),
                                            outputRange: propForDirection([
                                                SIZE / (extendedWidth / SIZE),
                                                borderRadius
                                            ])
                                        })
                                    },
                                    combinedStyles.absoluteFill
                                ],
                                testID: "" + testID + "-shadow"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                        pointerEvents: "box-none",
                        style: [
                            styles.innerWrapper,
                            {
                                borderRadius: borderRadius
                            }
                        ],
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                            style: [
                                styles.standard,
                                {
                                    width: extendedWidth,
                                    backgroundColor: backgroundColor,
                                    borderRadius: borderRadius
                                },
                                combinedStyles.innerWrapper
                            ],
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, {
                                borderless: true,
                                background: background,
                                onPress: onPress,
                                onLongPress: onLongPress,
                                delayLongPress: delayLongPress,
                                rippleColor: rippleColor,
                                disabled: disabled,
                                accessibilityLabel: accessibilityLabel,
                                accessibilityRole: "button",
                                accessibilityState: newAccessibilityState,
                                testID: testID,
                                style: {
                                    borderRadius: borderRadius
                                },
                                theme: theme,
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                                    style: [
                                        styles.standard,
                                        {
                                            width: extendedWidth,
                                            borderRadius: borderRadius
                                        }
                                    ]
                                })
                            })
                        })
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                style: [
                    styles.iconWrapper,
                    combinedStyles.iconWrapper
                ],
                pointerEvents: "none",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.default, {
                    source: icon,
                    size: 24,
                    color: foregroundColor,
                    theme: theme
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                pointerEvents: "none",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AnimatedText.default, {
                    variant: "labelLarge",
                    numberOfLines: 1,
                    onTextLayout: isIOS ? onTextLayout : undefined,
                    ellipsizeMode: 'tail',
                    style: [
                        _define_property._({}, isAnimatedFromRight || isRTL ? 'right' : 'left', isIconStatic ? textWidth - SIZE + borderRadius / (isV3 ? 1 : 2) : borderRadius),
                        {
                            minWidth: textWidth,
                            top: -SIZE / 2 - textHeight / 2,
                            opacity: animFAB.interpolate({
                                inputRange: propForDirection([
                                    distance,
                                    0.7 * distance,
                                    0
                                ]),
                                outputRange: propForDirection([
                                    1,
                                    0,
                                    0
                                ])
                            }),
                            // TODO: check
                            transform: [
                                {
                                    translateX: animFAB.interpolate({
                                        inputRange: propForDirection([
                                            distance,
                                            0
                                        ]),
                                        outputRange: propForDirection([
                                            0,
                                            SIZE
                                        ])
                                    })
                                }
                            ]
                        },
                        styles.label,
                        uppercase && styles.uppercaseLabel,
                        textStyle
                    ],
                    theme: theme,
                    testID: "" + testID + "-text",
                    maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
                    children: label
                })
            }),
            !isIOS && // Method `onTextLayout` on Android returns sizes of text visible on the screen,
            // however during render the text in `FAB` isn't fully visible. In order to get
            // proper text measurements there is a need to additionaly render that text, but
            // wrapped in absolutely positioned `ScrollView` which height is 0.
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.ScrollView, {
                style: styles.textPlaceholderContainer,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AnimatedText.default, {
                    variant: "labelLarge",
                    numberOfLines: 1,
                    onTextLayout: onTextLayout,
                    ellipsizeMode: 'tail',
                    style: [
                        styles.label,
                        uppercase && styles.uppercaseLabel,
                        textStyle
                    ],
                    theme: theme,
                    children: label
                })
            })
        ]
    }));
};
var styles = _reactnative.StyleSheet.create({
    standard: {
        height: SIZE
    },
    disabled: {
        elevation: 0
    },
    // eslint-disable-next-line react-native/no-color-literals
    container: {
        position: 'absolute',
        backgroundColor: 'transparent'
    },
    innerWrapper: {
        flexDirection: 'row',
        overflow: 'hidden'
    },
    shadowWrapper: {
        elevation: 0
    },
    shadow: {
        elevation: 6
    },
    v3Shadow: {
        elevation: 3
    },
    iconWrapper: {
        alignItems: 'center',
        justifyContent: 'center',
        position: 'absolute',
        height: SIZE,
        width: SIZE
    },
    label: {
        position: 'absolute'
    },
    uppercaseLabel: {
        textTransform: 'uppercase'
    },
    textPlaceholderContainer: {
        height: 0,
        position: 'absolute'
    }
});
var _default = AnimatedFAB;


}),
"95317": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    FAB: function() {
        return FAB;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _utils = __webpack_require__(71116);
var _theming = __webpack_require__(10968);
var _forwardRef = __webpack_require__(45835);
var _ActivityIndicator = /*#__PURE__*/ _interop_require_default._(__webpack_require__(94908));
var _CrossFadeIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66640));
var _Icon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80639));
var _Surface = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2403));
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
/**
 * A floating action button represents the primary action on a screen. It appears in front of all screen content.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { StyleSheet } from 'react-native';
 * import { FAB } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <FAB
 *     icon="plus"
 *     style={styles.fab}
 *     onPress={() => console.log('Pressed')}
 *   />
 * );
 *
 * const styles = StyleSheet.create({
 *   fab: {
 *     position: 'absolute',
 *     margin: 16,
 *     right: 0,
 *     bottom: 0,
 *   },
 * })
 *
 * export default MyComponent;
 * ```
 */ var FAB = (0, _forwardRef.forwardRef)(function(_param, ref) {
    var icon = _param.icon, label = _param.label, background = _param.background, _param_accessibilityLabel = _param.accessibilityLabel, accessibilityLabel = _param_accessibilityLabel === void 0 ? label : _param_accessibilityLabel, accessibilityState = _param.accessibilityState, _param_animated = _param.animated, animated = _param_animated === void 0 ? true : _param_animated, customColor = _param.color, customRippleColor = _param.rippleColor, disabled = _param.disabled, onPress = _param.onPress, onLongPress = _param.onLongPress, delayLongPress = _param.delayLongPress, themeOverrides = _param.theme, style = _param.style, _param_visible = _param.visible, visible = _param_visible === void 0 ? true : _param_visible, uppercaseProp = _param.uppercase, loading = _param.loading, _param_testID = _param.testID, testID = _param_testID === void 0 ? 'fab' : _param_testID, _param_size = _param.size, size = _param_size === void 0 ? 'medium' : _param_size, customSize = _param.customSize, _param_mode = _param.mode, mode = _param_mode === void 0 ? 'elevated' : _param_mode, _param_variant = _param.variant, variant = _param_variant === void 0 ? 'primary' : _param_variant, labelMaxFontSizeMultiplier = _param.labelMaxFontSizeMultiplier, rest = _object_without_properties_loose._(_param, [
        "icon",
        "label",
        "background",
        "accessibilityLabel",
        "accessibilityState",
        "animated",
        "color",
        "rippleColor",
        "disabled",
        "onPress",
        "onLongPress",
        "delayLongPress",
        "theme",
        "style",
        "visible",
        "uppercase",
        "loading",
        "testID",
        "size",
        "customSize",
        "mode",
        "variant",
        "labelMaxFontSizeMultiplier"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var uppercase = uppercaseProp != null ? uppercaseProp : !theme.isV3;
    var _React_useRef = _react.useRef(new _reactnative.Animated.Value(visible ? 1 : 0)), visibility = _React_useRef.current;
    var isV3 = theme.isV3, animation = theme.animation;
    var scale = animation.scale;
    _react.useEffect(function() {
        if (visible) {
            _reactnative.Animated.timing(visibility, {
                toValue: 1,
                duration: 200 * scale,
                useNativeDriver: true
            }).start();
        } else {
            _reactnative.Animated.timing(visibility, {
                toValue: 0,
                duration: 150 * scale,
                useNativeDriver: true
            }).start();
        }
    }, [
        visible,
        scale,
        visibility
    ]);
    var IconComponent = animated ? _CrossFadeIcon.default : _Icon.default;
    var fabStyle = (0, _utils.getFabStyle)({
        customSize: customSize,
        size: size,
        theme: theme
    });
    var _ref = _reactnative.StyleSheet.flatten(style) || {}, _ref_borderRadius = _ref.borderRadius, borderRadius = _ref_borderRadius === void 0 ? fabStyle.borderRadius : _ref_borderRadius, customBackgroundColor = _ref.backgroundColor;
    var _getFABColors = (0, _utils.getFABColors)({
        theme: theme,
        variant: variant,
        disabled: disabled,
        customColor: customColor,
        customBackgroundColor: customBackgroundColor,
        customRippleColor: customRippleColor
    }), backgroundColor = _getFABColors.backgroundColor, foregroundColor = _getFABColors.foregroundColor, rippleColor = _getFABColors.rippleColor;
    var isLargeSize = size === 'large';
    var isFlatMode = mode === 'flat';
    var iconSize = isLargeSize ? 36 : 24;
    var loadingIndicatorSize = isLargeSize ? 24 : 18;
    var font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;
    var extendedStyle = (0, _utils.getExtendedFabStyle)({
        customSize: customSize,
        theme: theme
    });
    var textStyle = _extends._({
        color: foregroundColor
    }, font);
    var md3Elevation = isFlatMode || disabled ? 0 : 3;
    var newAccessibilityState = _extends._({}, accessibilityState, {
        disabled: disabled
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Surface.default, _extends._({
        ref: ref
    }, rest, {
        style: [
            {
                borderRadius: borderRadius,
                backgroundColor: backgroundColor,
                opacity: visibility,
                transform: [
                    {
                        scale: visibility
                    }
                ]
            },
            !isV3 && styles.elevated,
            !isV3 && disabled && styles.disabled,
            style
        ],
        pointerEvents: visible ? 'auto' : 'none',
        testID: "" + testID + "-container"
    }, isV3 && {
        elevation: md3Elevation
    }, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, _extends._({
            borderless: true,
            background: background,
            onPress: onPress,
            onLongPress: onLongPress,
            delayLongPress: delayLongPress,
            rippleColor: rippleColor,
            disabled: disabled,
            accessibilityLabel: accessibilityLabel,
            accessibilityRole: "button",
            accessibilityState: newAccessibilityState,
            testID: testID,
            style: {
                borderRadius: borderRadius
            }
        }, rest, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                style: [
                    styles.content,
                    label ? extendedStyle : fabStyle
                ],
                testID: "" + testID + "-content",
                pointerEvents: "none",
                children: [
                    icon && loading !== true ? /*#__PURE__*/ (0, _jsxruntime.jsx)(IconComponent, {
                        source: icon,
                        size: customSize ? customSize / 2 : iconSize,
                        color: foregroundColor
                    }) : null,
                    loading ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivityIndicator.default, {
                        size: customSize ? customSize / 2 : loadingIndicatorSize,
                        color: foregroundColor
                    }) : null,
                    label ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                        variant: "labelLarge",
                        selectable: false,
                        testID: "" + testID + "-text",
                        style: [
                            styles.label,
                            uppercase && styles.uppercaseLabel,
                            textStyle
                        ],
                        maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
                        children: label
                    }) : null
                ]
            })
        }))
    }));
});
var styles = _reactnative.StyleSheet.create({
    elevated: {
        elevation: 6
    },
    content: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center'
    },
    label: {
        marginHorizontal: 8
    },
    uppercaseLabel: {
        textTransform: 'uppercase'
    },
    disabled: {
        elevation: 0
    }
});
var _default = FAB;


}),
"81094": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    FABGroup: function() {
        return FABGroup;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _sliced_to_array = __webpack_require__(38097);
var _to_consumable_array = __webpack_require__(2670);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _reactnativesafeareacontext = __webpack_require__(24144);
var _FAB = /*#__PURE__*/ _interop_require_default._(__webpack_require__(95317));
var _utils = __webpack_require__(71116);
var _theming = __webpack_require__(10968);
var _Card = /*#__PURE__*/ _interop_require_default._(__webpack_require__(88649));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
var AnimatedPressable = _reactnative.Animated.createAnimatedComponent(_reactnative.Pressable);
/**
 * A component to display a stack of FABs with related actions in a speed dial.
 * To render the group above other components, you'll need to wrap it with the [`Portal`](../Portal) component.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { FAB, Portal, PaperProvider } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [state, setState] = React.useState({ open: false });
 *
 *   const onStateChange = ({ open }) => setState({ open });
 *
 *   const { open } = state;
 *
 *   return (
 *     <PaperProvider>
 *       <Portal>
 *         <FAB.Group
 *           open={open}
 *           visible
 *           icon={open ? 'calendar-today' : 'plus'}
 *           actions={[
 *             { icon: 'plus', onPress: () => console.log('Pressed add') },
 *             {
 *               icon: 'star',
 *               label: 'Star',
 *               onPress: () => console.log('Pressed star'),
 *             },
 *             {
 *               icon: 'email',
 *               label: 'Email',
 *               onPress: () => console.log('Pressed email'),
 *             },
 *             {
 *               icon: 'bell',
 *               label: 'Remind',
 *               onPress: () => console.log('Pressed notifications'),
 *             },
 *           ]}
 *           onStateChange={onStateChange}
 *           onPress={() => {
 *             if (open) {
 *               // do something if the speed dial is open
 *             }
 *           }}
 *         />
 *       </Portal>
 *     </PaperProvider>
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ var FABGroup = function(param) {
    var actions = param.actions, icon = param.icon, open = param.open, onPress = param.onPress, onLongPress = param.onLongPress, toggleStackOnLongPress = param.toggleStackOnLongPress, accessibilityLabel = param.accessibilityLabel, themeOverrides = param.theme, style = param.style, fabStyle = param.fabStyle, visible = param.visible, label = param.label, testID = param.testID, onStateChange = param.onStateChange, colorProp = param.color, _param_delayLongPress = param.delayLongPress, delayLongPress = _param_delayLongPress === void 0 ? 200 : _param_delayLongPress, _param_variant = param.variant, variant = _param_variant === void 0 ? 'primary' : _param_variant, _param_enableLongPressWhenStackOpened = param.enableLongPressWhenStackOpened, enableLongPressWhenStackOpened = _param_enableLongPressWhenStackOpened === void 0 ? false : _param_enableLongPressWhenStackOpened, customBackdropColor = param.backdropColor, rippleColor = param.rippleColor;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React_useRef = _react.useRef(new _reactnative.Animated.Value(0)), backdrop = _React_useRef.current;
    var animations = _react.useRef(actions.map(function() {
        return new _reactnative.Animated.Value(open ? 1 : 0);
    }));
    var _React_useState = _sliced_to_array._(_react.useState(null), 2), prevActions = _React_useState[0], setPrevActions = _React_useState[1];
    var scale = theme.animation.scale;
    var isV3 = theme.isV3;
    _react.useEffect(function() {
        if (open) {
            _reactnative.Animated.parallel([
                _reactnative.Animated.timing(backdrop, {
                    toValue: 1,
                    duration: 250 * scale,
                    useNativeDriver: true
                }),
                _reactnative.Animated.stagger(isV3 ? 15 : 50 * scale, animations.current.map(function(animation) {
                    return _reactnative.Animated.timing(animation, {
                        toValue: 1,
                        duration: 150 * scale,
                        useNativeDriver: true
                    });
                }).reverse())
            ]).start();
        } else {
            _reactnative.Animated.parallel([
                _reactnative.Animated.timing(backdrop, {
                    toValue: 0,
                    duration: 200 * scale,
                    useNativeDriver: true
                })
            ].concat(_to_consumable_array._(animations.current.map(function(animation) {
                return _reactnative.Animated.timing(animation, {
                    toValue: 0,
                    duration: 150 * scale,
                    useNativeDriver: true
                });
            })))).start();
        }
    }, [
        open,
        actions,
        backdrop,
        scale,
        isV3
    ]);
    var close = function() {
        return onStateChange({
            open: false
        });
    };
    var toggle = function() {
        return onStateChange({
            open: !open
        });
    };
    var _getFABGroupColors = (0, _utils.getFABGroupColors)({
        theme: theme,
        customBackdropColor: customBackdropColor
    }), labelColor = _getFABGroupColors.labelColor, backdropColor = _getFABGroupColors.backdropColor, stackedFABBackgroundColor = _getFABGroupColors.stackedFABBackgroundColor;
    var backdropOpacity = open ? backdrop.interpolate({
        inputRange: [
            0,
            0.5,
            1
        ],
        outputRange: [
            0,
            1,
            1
        ]
    }) : backdrop;
    var opacities = animations.current;
    var scales = opacities.map(function(opacity) {
        return open ? opacity.interpolate({
            inputRange: [
                0,
                1
            ],
            outputRange: [
                0.5,
                1
            ]
        }) : 1;
    });
    var translations = opacities.map(function(opacity) {
        return open ? opacity.interpolate({
            inputRange: [
                0,
                1
            ],
            outputRange: [
                24,
                -8
            ]
        }) : -8;
    });
    var labelTranslations = opacities.map(function(opacity) {
        return open ? opacity.interpolate({
            inputRange: [
                0,
                1
            ],
            outputRange: [
                8,
                -8
            ]
        }) : -8;
    });
    var _useSafeAreaInsets = (0, _reactnativesafeareacontext.useSafeAreaInsets)(), top = _useSafeAreaInsets.top, bottom = _useSafeAreaInsets.bottom, right = _useSafeAreaInsets.right, left = _useSafeAreaInsets.left;
    var containerPaddings = {
        paddingBottom: bottom,
        paddingRight: right,
        paddingLeft: left,
        paddingTop: top
    };
    if (actions.length !== (prevActions == null ? void 0 : prevActions.length)) {
        animations.current = actions.map(function(_, i) {
            return animations.current[i] || new _reactnative.Animated.Value(open ? 1 : 0);
        });
        setPrevActions(actions);
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
        pointerEvents: "box-none",
        style: [
            styles.container,
            containerPaddings,
            style
        ],
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedPressable, {
                accessibilityRole: "button",
                onPress: close,
                pointerEvents: open ? 'auto' : 'none',
                style: [
                    styles.backdrop,
                    {
                        opacity: backdropOpacity,
                        backgroundColor: backdropColor
                    }
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                pointerEvents: "box-none",
                style: styles.safeArea,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                        pointerEvents: open ? 'box-none' : 'none',
                        children: actions.map(function(it, i) {
                            var _it_labelTextColor;
                            var labelTextStyle = _extends._({
                                color: (_it_labelTextColor = it.labelTextColor) != null ? _it_labelTextColor : labelColor
                            }, isV3 ? theme.fonts.titleMedium : {});
                            var marginHorizontal = typeof it.size === 'undefined' || it.size === 'small' ? 24 : 16;
                            var accessibilityLabel = typeof it.accessibilityLabel !== 'undefined' ? it.accessibilityLabel : it.label;
                            var size = typeof it.size !== 'undefined' ? it.size : 'small';
                            return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                                style: [
                                    styles.item,
                                    {
                                        marginHorizontal: marginHorizontal
                                    }
                                ],
                                pointerEvents: open ? 'box-none' : 'none',
                                accessibilityRole: "button",
                                importantForAccessibility: "yes",
                                accessible: true,
                                accessibilityLabel: accessibilityLabel,
                                children: [
                                    it.label && /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Card.default, {
                                            mode: isV3 ? 'contained' : 'elevated',
                                            onPress: function(e) {
                                                it.onPress(e);
                                                close();
                                            },
                                            accessibilityHint: it.accessibilityHint,
                                            importantForAccessibility: "no-hide-descendants",
                                            accessibilityElementsHidden: true,
                                            style: [
                                                styles.containerStyle,
                                                {
                                                    transform: [
                                                        isV3 ? {
                                                            translateY: labelTranslations[i]
                                                        } : {
                                                            scale: scales[i]
                                                        }
                                                    ],
                                                    opacity: opacities[i]
                                                },
                                                isV3 && styles.v3ContainerStyle,
                                                it.containerStyle
                                            ],
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                                                variant: "titleMedium",
                                                importantForAccessibility: "no-hide-descendants",
                                                accessibilityElementsHidden: true,
                                                style: [
                                                    labelTextStyle,
                                                    it.labelStyle
                                                ],
                                                maxFontSizeMultiplier: it.labelMaxFontSizeMultiplier,
                                                children: it.label
                                            })
                                        })
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_FAB.default, {
                                        size: size,
                                        icon: it.icon,
                                        color: it.color,
                                        style: [
                                            {
                                                transform: [
                                                    {
                                                        scale: scales[i]
                                                    }
                                                ],
                                                opacity: opacities[i],
                                                backgroundColor: stackedFABBackgroundColor
                                            },
                                            isV3 && {
                                                transform: [
                                                    {
                                                        translateY: translations[i]
                                                    }
                                                ]
                                            },
                                            it.style
                                        ],
                                        accessibilityElementsHidden: true,
                                        theme: theme,
                                        onPress: function(e) {
                                            it.onPress(e);
                                            close();
                                        },
                                        importantForAccessibility: "no-hide-descendants",
                                        testID: it.testID,
                                        visible: open,
                                        rippleColor: it.rippleColor
                                    })
                                ]
                            }, i);
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_FAB.default, {
                        onPress: function(e) {
                            onPress == null ? void 0 : onPress(e);
                            if (!toggleStackOnLongPress || open) {
                                toggle();
                            }
                        },
                        onLongPress: function(e) {
                            if (!open || enableLongPressWhenStackOpened) {
                                onLongPress == null ? void 0 : onLongPress(e);
                                if (toggleStackOnLongPress) {
                                    toggle();
                                }
                            }
                        },
                        delayLongPress: delayLongPress,
                        icon: icon,
                        color: colorProp,
                        accessibilityLabel: accessibilityLabel,
                        accessibilityRole: "button",
                        accessibilityState: {
                            expanded: open
                        },
                        style: [
                            styles.fab,
                            fabStyle
                        ],
                        theme: theme,
                        visible: visible,
                        label: label,
                        testID: testID,
                        variant: variant,
                        rippleColor: rippleColor
                    })
                ]
            })
        ]
    });
};
FABGroup.displayName = 'FAB.Group';
var _default = FABGroup;
var styles = _reactnative.StyleSheet.create({
    safeArea: {
        alignItems: 'flex-end'
    },
    container: _extends._({}, _reactnative.StyleSheet.absoluteFillObject, {
        justifyContent: 'flex-end'
    }),
    fab: {
        marginHorizontal: 16,
        marginBottom: 16,
        marginTop: 0
    },
    backdrop: _extends._({}, _reactnative.StyleSheet.absoluteFillObject),
    containerStyle: {
        borderRadius: 5,
        paddingHorizontal: 12,
        paddingVertical: 6,
        marginVertical: 8,
        marginHorizontal: 16,
        elevation: 2
    },
    item: {
        marginBottom: 16,
        flexDirection: 'row',
        justifyContent: 'flex-end',
        alignItems: 'center'
    },
    // eslint-disable-next-line react-native/no-color-literals
    v3ContainerStyle: {
        backgroundColor: 'transparent',
        elevation: 0
    }
});


}),
"36586": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _utils = __webpack_require__(34660);
var _theming = __webpack_require__(10968);
var _AnimatedText = /*#__PURE__*/ _interop_require_default._(__webpack_require__(24904));
/**
 * Helper text is used in conjuction with input elements to provide additional hints for the user.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { View } from 'react-native';
 * import { HelperText, TextInput } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [text, setText] = React.useState('');
 *
 *    const onChangeText = text => setText(text);
 *
 *   const hasErrors = () => {
 *     return !text.includes('@');
 *   };
 *
 *  return (
 *     <View>
 *       <TextInput label="Email" value={text} onChangeText={onChangeText} />
 *       <HelperText type="error" visible={hasErrors()}>
 *         Email address is invalid!
 *       </HelperText>
 *     </View>
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ var HelperText = function(_param) {
    var style = _param.style, _param_type = _param.type, type = _param_type === void 0 ? 'info' : _param_type, _param_visible = _param.visible, visible = _param_visible === void 0 ? true : _param_visible, themeOverrides = _param.theme, onLayout = _param.onLayout, _param_padding = _param.padding, padding = _param_padding === void 0 ? 'normal' : _param_padding, disabled = _param.disabled, rest = _object_without_properties_loose._(_param, [
        "style",
        "type",
        "visible",
        "theme",
        "onLayout",
        "padding",
        "disabled"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React_useRef = _react.useRef(new _reactnative.Animated.Value(visible ? 1 : 0)), shown = _React_useRef.current;
    var _React_useRef1 = _react.useRef(0), textHeight = _React_useRef1.current;
    var scale = theme.animation.scale;
    var _rest_maxFontSizeMultiplier = rest.maxFontSizeMultiplier, maxFontSizeMultiplier = _rest_maxFontSizeMultiplier === void 0 ? 1.5 : _rest_maxFontSizeMultiplier;
    _react.useEffect(function() {
        if (visible) {
            // show text
            _reactnative.Animated.timing(shown, {
                toValue: 1,
                duration: 150 * scale,
                useNativeDriver: true
            }).start();
        } else {
            // hide text
            _reactnative.Animated.timing(shown, {
                toValue: 0,
                duration: 180 * scale,
                useNativeDriver: true
            }).start();
        }
    }, [
        visible,
        scale,
        shown
    ]);
    var handleTextLayout = function(e) {
        onLayout == null ? void 0 : onLayout(e);
        textHeight = e.nativeEvent.layout.height;
    };
    var textColor = (0, _utils.getTextColor)({
        theme: theme,
        disabled: disabled,
        type: type
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_AnimatedText.default, _extends._({
        onLayout: handleTextLayout,
        style: [
            styles.text,
            padding !== 'none' ? styles.padding : {},
            {
                color: textColor,
                opacity: shown,
                transform: visible && type === 'error' ? [
                    {
                        translateY: shown.interpolate({
                            inputRange: [
                                0,
                                1
                            ],
                            outputRange: [
                                -textHeight / 2,
                                0
                            ]
                        })
                    }
                ] : []
            },
            style
        ],
        maxFontSizeMultiplier: maxFontSizeMultiplier
    }, rest, {
        children: rest.children
    }));
};
var styles = _reactnative.StyleSheet.create({
    text: {
        fontSize: 12,
        paddingVertical: 4
    },
    padding: {
        paddingHorizontal: 12
    }
});
var _default = HelperText;


}),
"80639": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    isEqualIcon: function() {
        return isEqualIcon;
    },
    isValidIcon: function() {
        return isValidIcon;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _type_of = __webpack_require__(15576);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _MaterialCommunityIcon = __webpack_require__(81045);
var _settings = __webpack_require__(97527);
var _theming = __webpack_require__(10968);
var isImageSource = function(source) {
    return(// source is an object with uri
    (typeof source === "undefined" ? "undefined" : _type_of._(source)) === 'object' && source !== null && Object.prototype.hasOwnProperty.call(source, 'uri') && typeof source.uri === 'string' || // source is a module, e.g. - require('image')
    typeof source === 'number' || // image url on web
    _reactnative.Platform.OS === 'web' && typeof source === 'string' && (source.startsWith('data:image') || /\.(bmp|jpg|jpeg|png|gif|svg)$/.test(source)));
};
var getIconId = function(source) {
    if ((typeof source === "undefined" ? "undefined" : _type_of._(source)) === 'object' && source !== null && Object.prototype.hasOwnProperty.call(source, 'uri') && typeof source.uri === 'string') {
        return source.uri;
    }
    return source;
};
var isValidIcon = function(source) {
    return typeof source === 'string' || typeof source === 'function' || isImageSource(source);
};
var isEqualIcon = function(a, b) {
    return a === b || getIconId(a) === getIconId(b);
};
/**
 * An icon component which renders icon from vector library.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Icon, MD3Colors } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Icon
 *     source="camera"
 *     color={MD3Colors.error50}
 *     size={20}
 *   />
 * );
 *
 * export default MyComponent;
 * ```
 */ var Icon = function(_param) {
    var source = _param.source, color = _param.color, size = _param.size, themeOverrides = _param.theme, testID = _param.testID, rest = _object_without_properties_loose._(_param, [
        "source",
        "color",
        "size",
        "theme",
        "testID"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var direction = (typeof source === "undefined" ? "undefined" : _type_of._(source)) === 'object' && source.direction && source.source ? source.direction === 'auto' ? _reactnative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr' : source.direction : null;
    var s = (typeof source === "undefined" ? "undefined" : _type_of._(source)) === 'object' && source.direction && source.source ? source.source : source;
    var iconColor = color || (theme.isV3 ? theme.colors.onSurface : theme.colors.text);
    if (isImageSource(s)) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Image, _extends._({}, rest, {
            testID: testID,
            source: s,
            style: [
                {
                    transform: [
                        {
                            scaleX: direction === 'rtl' ? -1 : 1
                        }
                    ]
                },
                {
                    width: size,
                    height: size,
                    tintColor: color,
                    resizeMode: "contain"
                }
            ]
        }, _MaterialCommunityIcon.accessibilityProps, {
            accessibilityIgnoresInvertColors: true
        }));
    } else if (typeof s === 'string') {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_settings.Consumer, {
            children: function(param) {
                var icon = param.icon;
                return icon == null ? void 0 : icon({
                    name: s,
                    color: iconColor,
                    size: size,
                    direction: direction,
                    testID: testID
                });
            }
        });
    } else if (typeof s === 'function') {
        return s({
            color: iconColor,
            size: size,
            direction: direction,
            testID: testID
        });
    }
    return null;
};
var _default = Icon;


}),
"86395": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _utils = __webpack_require__(76242);
var _theming = __webpack_require__(10968);
var _forwardRef = __webpack_require__(45835);
var _ActivityIndicator = /*#__PURE__*/ _interop_require_default._(__webpack_require__(94908));
var _CrossFadeIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(66640));
var _Icon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80639));
var _Surface = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2403));
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
var PADDING = 8;
/**
 * An icon button is a button which displays only an icon without a label.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { IconButton, MD3Colors } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <IconButton
 *     icon="camera"
 *     iconColor={MD3Colors.error50}
 *     size={20}
 *     onPress={() => console.log('Pressed')}
 *   />
 * );
 *
 * export default MyComponent;
 * ```
 *
 * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple
 */ var IconButton = (0, _forwardRef.forwardRef)(function(_param, ref) {
    var icon = _param.icon, customIconColor = _param.iconColor, customContainerColor = _param.containerColor, customRippleColor = _param.rippleColor, _param_size = _param.size, size = _param_size === void 0 ? 24 : _param_size, accessibilityLabel = _param.accessibilityLabel, disabled = _param.disabled, onPress = _param.onPress, _param_selected = _param.selected, selected = _param_selected === void 0 ? false : _param_selected, _param_animated = _param.animated, animated = _param_animated === void 0 ? false : _param_animated, mode = _param.mode, style = _param.style, themeOverrides = _param.theme, _param_testID = _param.testID, testID = _param_testID === void 0 ? 'icon-button' : _param_testID, _param_loading = _param.loading, loading = _param_loading === void 0 ? false : _param_loading, rest = _object_without_properties_loose._(_param, [
        "icon",
        "iconColor",
        "containerColor",
        "rippleColor",
        "size",
        "accessibilityLabel",
        "disabled",
        "onPress",
        "selected",
        "animated",
        "mode",
        "style",
        "theme",
        "testID",
        "loading"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isV3 = theme.isV3;
    var IconComponent = animated ? _CrossFadeIcon.default : _Icon.default;
    var _getIconButtonColor = (0, _utils.getIconButtonColor)({
        theme: theme,
        disabled: disabled,
        selected: selected,
        mode: mode,
        customIconColor: customIconColor,
        customContainerColor: customContainerColor,
        customRippleColor: customRippleColor
    }), iconColor = _getIconButtonColor.iconColor, rippleColor = _getIconButtonColor.rippleColor, backgroundColor = _getIconButtonColor.backgroundColor, borderColor = _getIconButtonColor.borderColor;
    var buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;
    var _ref = _reactnative.StyleSheet.flatten(style) || {}, _ref_borderWidth = _ref.borderWidth, borderWidth = _ref_borderWidth === void 0 ? isV3 && mode === 'outlined' && !selected ? 1 : 0 : _ref_borderWidth, _ref_borderRadius = _ref.borderRadius, borderRadius = _ref_borderRadius === void 0 ? buttonSize / 2 : _ref_borderRadius;
    var borderStyles = {
        borderWidth: borderWidth,
        borderRadius: borderRadius,
        borderColor: borderColor
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Surface.default, _extends._({
        ref: ref,
        testID: "" + testID + "-container",
        style: [
            {
                backgroundColor: backgroundColor,
                width: buttonSize,
                height: buttonSize
            },
            styles.container,
            borderStyles,
            !isV3 && disabled && styles.disabled,
            style
        ]
    }, isV3 && {
        elevation: 0
    }, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, _extends._({
            borderless: true,
            centered: true,
            onPress: onPress,
            rippleColor: rippleColor,
            accessibilityLabel: accessibilityLabel,
            style: [
                styles.touchable,
                {
                    borderRadius: borderRadius
                }
            ],
            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions
            accessibilityTraits: disabled ? [
                'button',
                'disabled'
            ] : 'button',
            accessibilityComponentType: "button",
            accessibilityRole: "button",
            accessibilityState: {
                disabled: disabled
            },
            disabled: disabled,
            hitSlop: _TouchableRipple.default.supported ? {
                top: 10,
                left: 10,
                bottom: 10,
                right: 10
            } : {
                top: 6,
                left: 6,
                bottom: 6,
                right: 6
            },
            testID: testID
        }, rest, {
            children: loading ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivityIndicator.default, {
                size: size,
                color: iconColor
            }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(IconComponent, {
                color: iconColor,
                source: icon,
                size: size
            })
        }))
    }));
});
var styles = _reactnative.StyleSheet.create({
    container: {
        overflow: 'hidden',
        margin: 6,
        elevation: 0
    },
    touchable: {
        flexGrow: 1,
        justifyContent: 'center',
        alignItems: 'center'
    },
    disabled: {
        opacity: 0.32
    }
});
var _default = IconButton;


}),
"96572": (function (__unused_webpack_module, exports, __webpack_require__) {
// @component ./ListAccordion.tsx
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Accordion: function() {
        return _ListAccordion.default;
    },
    AccordionGroup: function() {
        return _ListAccordionGroup.default;
    },
    Icon: function() {
        return _ListIcon.default;
    },
    Image: function() {
        return _ListImage.default;
    },
    Item: function() {
        return _ListItem.default;
    },
    Section: function() {
        return _ListSection.default;
    },
    Subheader: function() {
        return _ListSubheader.default;
    }
});
var _interop_require_default = __webpack_require__(60133);
var _ListAccordion = /*#__PURE__*/ _interop_require_default._(__webpack_require__(32540));
var _ListAccordionGroup = /*#__PURE__*/ _interop_require_default._(__webpack_require__(20593));
var _ListIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15928));
var _ListItem = /*#__PURE__*/ _interop_require_default._(__webpack_require__(40283));
var _ListSection = /*#__PURE__*/ _interop_require_default._(__webpack_require__(19276));
var _ListSubheader = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5224));
var _ListImage = /*#__PURE__*/ _interop_require_default._(__webpack_require__(6792));


}),
"32540": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _ListAccordionGroup = __webpack_require__(20593);
var _utils = __webpack_require__(1071);
var _theming = __webpack_require__(10968);
var _MaterialCommunityIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(81045));
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
/**
 * A component used to display an expandable list item.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { List } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [expanded, setExpanded] = React.useState(true);
 *
 *   const handlePress = () => setExpanded(!expanded);
 *
 *   return (
 *     <List.Section title="Accordions">
 *       <List.Accordion
 *         title="Uncontrolled Accordion"
 *         left={props => <List.Icon {...props} icon="folder" />}>
 *         <List.Item title="First item" />
 *         <List.Item title="Second item" />
 *       </List.Accordion>
 *
 *       <List.Accordion
 *         title="Controlled Accordion"
 *         left={props => <List.Icon {...props} icon="folder" />}
 *         expanded={expanded}
 *         onPress={handlePress}>
 *         <List.Item title="First item" />
 *         <List.Item title="Second item" />
 *       </List.Accordion>
 *     </List.Section>
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ var ListAccordion = function(param) {
    var left = param.left, right = param.right, title = param.title, description = param.description, children = param.children, themeOverrides = param.theme, titleStyle = param.titleStyle, descriptionStyle = param.descriptionStyle, _param_titleNumberOfLines = param.titleNumberOfLines, titleNumberOfLines = _param_titleNumberOfLines === void 0 ? 1 : _param_titleNumberOfLines, _param_descriptionNumberOfLines = param.descriptionNumberOfLines, descriptionNumberOfLines = _param_descriptionNumberOfLines === void 0 ? 2 : _param_descriptionNumberOfLines, customRippleColor = param.rippleColor, style = param.style, id = param.id, testID = param.testID, background = param.background, onPress = param.onPress, onLongPress = param.onLongPress, delayLongPress = param.delayLongPress, expandedProp = param.expanded, accessibilityLabel = param.accessibilityLabel, _param_pointerEvents = param.pointerEvents, pointerEvents = _param_pointerEvents === void 0 ? 'none' : _param_pointerEvents, titleMaxFontSizeMultiplier = param.titleMaxFontSizeMultiplier, descriptionMaxFontSizeMultiplier = param.descriptionMaxFontSizeMultiplier;
    var _theme_colors, _theme_colors1;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React_useState = _sliced_to_array._(_react.useState(expandedProp || false), 2), expanded = _React_useState[0], setExpanded = _React_useState[1];
    var _React_useState1 = _sliced_to_array._(_react.useState(false), 2), alignToTop = _React_useState1[0], setAlignToTop = _React_useState1[1];
    var onDescriptionTextLayout = function(event) {
        if (!theme.isV3) {
            return;
        }
        var nativeEvent = event.nativeEvent;
        setAlignToTop(nativeEvent.lines.length >= 2);
    };
    var handlePressAction = function(e) {
        onPress == null ? void 0 : onPress(e);
        if (expandedProp === undefined) {
            // Only update state of the `expanded` prop was not passed
            // If it was passed, the component will act as a controlled component
            setExpanded(function(expanded) {
                return !expanded;
            });
        }
    };
    var expandedInternal = expandedProp !== undefined ? expandedProp : expanded;
    var groupContext = _react.useContext(_ListAccordionGroup.ListAccordionGroupContext);
    if (groupContext !== null && (id === undefined || id === null || id === '')) {
        throw new Error('List.Accordion is used inside a List.AccordionGroup without specifying an id prop.');
    }
    var isExpanded = groupContext ? groupContext.expandedId === id : expandedInternal;
    var _getAccordionColors = (0, _utils.getAccordionColors)({
        theme: theme,
        isExpanded: isExpanded,
        customRippleColor: customRippleColor
    }), titleColor = _getAccordionColors.titleColor, descriptionColor = _getAccordionColors.descriptionColor, titleTextColor = _getAccordionColors.titleTextColor, rippleColor = _getAccordionColors.rippleColor;
    var handlePress = groupContext && id !== undefined ? function() {
        return groupContext.onAccordionPress(id);
    } : handlePressAction;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                style: {
                    backgroundColor: theme == null ? void 0 : (_theme_colors = theme.colors) == null ? void 0 : _theme_colors.background
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, {
                    style: [
                        theme.isV3 ? styles.containerV3 : styles.container,
                        style
                    ],
                    onPress: handlePress,
                    onLongPress: onLongPress,
                    delayLongPress: delayLongPress,
                    rippleColor: rippleColor,
                    accessibilityRole: "button",
                    accessibilityState: {
                        expanded: isExpanded
                    },
                    accessibilityLabel: accessibilityLabel,
                    testID: testID,
                    theme: theme,
                    background: background,
                    borderless: true,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                        style: theme.isV3 ? styles.rowV3 : styles.row,
                        pointerEvents: pointerEvents,
                        children: [
                            left ? left({
                                color: isExpanded ? (_theme_colors1 = theme.colors) == null ? void 0 : _theme_colors1.primary : descriptionColor,
                                style: (0, _utils.getLeftStyles)(alignToTop, description, theme.isV3)
                            }) : null,
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                                style: [
                                    theme.isV3 ? styles.itemV3 : styles.item,
                                    styles.content
                                ],
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                                        selectable: false,
                                        numberOfLines: titleNumberOfLines,
                                        style: [
                                            styles.title,
                                            {
                                                color: titleTextColor
                                            },
                                            titleStyle
                                        ],
                                        maxFontSizeMultiplier: titleMaxFontSizeMultiplier,
                                        children: title
                                    }),
                                    description ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                                        selectable: false,
                                        numberOfLines: descriptionNumberOfLines,
                                        style: [
                                            styles.description,
                                            {
                                                color: descriptionColor
                                            },
                                            descriptionStyle
                                        ],
                                        onTextLayout: onDescriptionTextLayout,
                                        maxFontSizeMultiplier: descriptionMaxFontSizeMultiplier,
                                        children: description
                                    }) : null
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                                style: [
                                    styles.item,
                                    description ? styles.multiline : undefined
                                ],
                                children: right ? right({
                                    isExpanded: isExpanded
                                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_MaterialCommunityIcon.default, {
                                    name: isExpanded ? 'chevron-up' : 'chevron-down',
                                    color: theme.isV3 ? descriptionColor : titleColor,
                                    size: 24,
                                    direction: _reactnative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
                                })
                            })
                        ]
                    })
                })
            }),
            isExpanded ? _react.Children.map(children, function(child) {
                if (left && /*#__PURE__*/ _react.isValidElement(child) && !child.props.left && !child.props.right) {
                    return /*#__PURE__*/ _react.cloneElement(child, {
                        style: [
                            theme.isV3 ? styles.childV3 : styles.child,
                            child.props.style
                        ],
                        theme: theme
                    });
                }
                return child;
            }) : null
        ]
    });
};
ListAccordion.displayName = 'List.Accordion';
var styles = _reactnative.StyleSheet.create({
    container: {
        padding: 8
    },
    containerV3: {
        paddingVertical: 8,
        paddingRight: 24
    },
    row: {
        flexDirection: 'row',
        alignItems: 'center'
    },
    rowV3: {
        flexDirection: 'row',
        marginVertical: 6
    },
    multiline: {
        height: 40,
        alignItems: 'center',
        justifyContent: 'center'
    },
    title: {
        fontSize: 16
    },
    description: {
        fontSize: 14
    },
    item: {
        marginVertical: 6,
        paddingLeft: 8
    },
    itemV3: {
        paddingLeft: 16
    },
    child: {
        paddingLeft: 64
    },
    childV3: {
        paddingLeft: 40
    },
    content: {
        flex: 1,
        justifyContent: 'center'
    }
});
var _default = ListAccordion;


}),
"20593": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ListAccordionGroupContext: function() {
        return ListAccordionGroupContext;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_wildcard = __webpack_require__(3557);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var ListAccordionGroupContext = /*#__PURE__*/ _react.createContext(null);
/**
 * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.
 * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.
 * At most one Accordion can be expanded at a given time.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { View, Text } from 'react-native';
 * import { List } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <List.AccordionGroup>
 *     <List.Accordion title="Accordion 1" id="1">
 *       <List.Item title="Item 1" />
 *     </List.Accordion>
 *     <List.Accordion title="Accordion 2" id="2">
 *       <List.Item title="Item 2" />
 *     </List.Accordion>
 *     <View>
 *       <Text>
 *         List.Accordion can be wrapped because implementation uses React.Context.
 *       </Text>
 *       <List.Accordion title="Accordion 3" id="3">
 *         <List.Item title="Item 3" />
 *       </List.Accordion>
 *     </View>
 *   </List.AccordionGroup>
 * );
 *
 * export default MyComponent;
 *```
 */ var ListAccordionGroup = function(param) {
    var expandedIdProp = param.expandedId, onAccordionPress = param.onAccordionPress, children = param.children;
    var _React_useState = _sliced_to_array._(_react.useState(undefined), 2), expandedId = _React_useState[0], setExpandedId = _React_useState[1];
    var onAccordionPressDefault = function(newExpandedId) {
        setExpandedId(function(currentExpandedId) {
            return currentExpandedId === newExpandedId ? undefined : newExpandedId;
        });
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ListAccordionGroupContext.Provider, {
        value: {
            expandedId: expandedIdProp || expandedId,
            onAccordionPress: onAccordionPress || onAccordionPressDefault
        },
        children: children
    });
};
ListAccordionGroup.displayName = 'List.AccordionGroup';
var _default = ListAccordionGroup;


}),
"15928": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _theming = __webpack_require__(10968);
var _Icon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80639));
var ICON_SIZE = 24;
/**
 * A component to show an icon in a list item.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { List, MD3Colors } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <>
 *     <List.Icon color={MD3Colors.tertiary70} icon="folder" />
 *     <List.Icon color={MD3Colors.tertiary70} icon="equal" />
 *     <List.Icon color={MD3Colors.tertiary70} icon="calendar" />
 *   </>
 * );
 *
 * export default MyComponent;
 * ```
 */ var ListIcon = function(param) {
    var icon = param.icon, iconColor = param.color, style = param.style, themeOverrides = param.theme;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
        style: [
            theme.isV3 ? styles.itemV3 : styles.item,
            style
        ],
        pointerEvents: "box-none",
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.default, {
            source: icon,
            size: ICON_SIZE,
            color: iconColor,
            theme: theme
        })
    });
};
var styles = _reactnative.StyleSheet.create({
    item: {
        margin: 8,
        height: 40,
        width: 40,
        alignItems: 'center',
        justifyContent: 'center'
    },
    itemV3: {
        alignItems: 'center',
        justifyContent: 'center'
    }
});
ListIcon.displayName = 'List.Icon';
var _default = ListIcon;


}),
"6792": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _theming = __webpack_require__(10968);
/**
 * A component to show image in a list item.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { List, MD3Colors } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <>
 *     <List.Image variant="image" source={{uri: 'https://www.someurl.com/apple'}} />
 *     <List.Image variant="video" source={require('../../some-apple.png')} />
 *   </>
 * );
 *
 * export default MyComponent;
 * ```
 */ var ListImage = function(param) {
    var style = param.style, source = param.source, _param_variant = param.variant, variant = _param_variant === void 0 ? 'image' : _param_variant, themeOverrides = param.theme;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var getStyles = function() {
        if (variant === 'video') {
            if (!theme.isV3) {
                return [
                    style,
                    styles.video
                ];
            }
            return [
                style,
                styles.videoV3
            ];
        }
        return [
            style,
            styles.image
        ];
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Image, {
        style: getStyles(),
        source: source,
        accessibilityIgnoresInvertColors: true,
        testID: "list-image"
    });
};
var styles = _reactnative.StyleSheet.create({
    image: {
        width: 56,
        height: 56
    },
    video: {
        width: 100,
        height: 64,
        marginLeft: 0
    },
    videoV3: {
        width: 114,
        height: 64,
        marginLeft: 0
    }
});
ListImage.displayName = 'List.Image';
var _default = ListImage;


}),
"40283": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _utils = __webpack_require__(1071);
var _theming = __webpack_require__(10968);
var _forwardRef = __webpack_require__(45835);
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
/**
 * A component to show tiles inside a List.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { List } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <List.Item
 *     title="First Item"
 *     description="Item description"
 *     left={props => <List.Icon {...props} icon="folder" />}
 *   />
 * );
 *
 * export default MyComponent;
 * ```
 *
 * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple
 */ var ListItem = function(_param, ref) {
    var left = _param.left, right = _param.right, title = _param.title, description = _param.description, onPress = _param.onPress, themeOverrides = _param.theme, style = _param.style, contentStyle = _param.contentStyle, titleStyle = _param.titleStyle, _param_titleNumberOfLines = _param.titleNumberOfLines, titleNumberOfLines = _param_titleNumberOfLines === void 0 ? 1 : _param_titleNumberOfLines, _param_descriptionNumberOfLines = _param.descriptionNumberOfLines, descriptionNumberOfLines = _param_descriptionNumberOfLines === void 0 ? 2 : _param_descriptionNumberOfLines, titleEllipsizeMode = _param.titleEllipsizeMode, descriptionEllipsizeMode = _param.descriptionEllipsizeMode, descriptionStyle = _param.descriptionStyle, descriptionMaxFontSizeMultiplier = _param.descriptionMaxFontSizeMultiplier, titleMaxFontSizeMultiplier = _param.titleMaxFontSizeMultiplier, testID = _param.testID, rest = _object_without_properties_loose._(_param, [
        "left",
        "right",
        "title",
        "description",
        "onPress",
        "theme",
        "style",
        "contentStyle",
        "titleStyle",
        "titleNumberOfLines",
        "descriptionNumberOfLines",
        "titleEllipsizeMode",
        "descriptionEllipsizeMode",
        "descriptionStyle",
        "descriptionMaxFontSizeMultiplier",
        "titleMaxFontSizeMultiplier",
        "testID"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React_useState = _sliced_to_array._(_react.useState(false), 2), alignToTop = _React_useState[0], setAlignToTop = _React_useState[1];
    var onDescriptionTextLayout = function(event) {
        if (!theme.isV3) {
            return;
        }
        var nativeEvent = event.nativeEvent;
        setAlignToTop(nativeEvent.lines.length >= 2);
    };
    var renderDescription = function(descriptionColor, description) {
        return typeof description === 'function' ? description({
            selectable: false,
            ellipsizeMode: descriptionEllipsizeMode,
            color: descriptionColor,
            fontSize: styles.description.fontSize
        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
            selectable: false,
            numberOfLines: descriptionNumberOfLines,
            ellipsizeMode: descriptionEllipsizeMode,
            style: [
                styles.description,
                {
                    color: descriptionColor
                },
                descriptionStyle
            ],
            onTextLayout: onDescriptionTextLayout,
            maxFontSizeMultiplier: descriptionMaxFontSizeMultiplier,
            children: description
        });
    };
    var renderTitle = function() {
        var titleColor = theme.isV3 ? theme.colors.onSurface : (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();
        return typeof title === 'function' ? title({
            selectable: false,
            ellipsizeMode: titleEllipsizeMode,
            color: titleColor,
            fontSize: styles.title.fontSize
        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
            selectable: false,
            ellipsizeMode: titleEllipsizeMode,
            numberOfLines: titleNumberOfLines,
            style: [
                styles.title,
                {
                    color: titleColor
                },
                titleStyle
            ],
            maxFontSizeMultiplier: titleMaxFontSizeMultiplier,
            children: title
        });
    };
    var descriptionColor = theme.isV3 ? theme.colors.onSurfaceVariant : (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, _extends._({}, rest, {
        ref: ref,
        style: [
            theme.isV3 ? styles.containerV3 : styles.container,
            style
        ],
        onPress: onPress,
        theme: theme,
        testID: testID,
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
            style: theme.isV3 ? styles.rowV3 : styles.row,
            children: [
                left ? left({
                    color: descriptionColor,
                    style: (0, _utils.getLeftStyles)(alignToTop, description, theme.isV3)
                }) : null,
                /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                    style: [
                        theme.isV3 ? styles.itemV3 : styles.item,
                        styles.content,
                        contentStyle
                    ],
                    testID: "" + testID + "-content",
                    children: [
                        renderTitle(),
                        description ? renderDescription(descriptionColor, description) : null
                    ]
                }),
                right ? right({
                    color: descriptionColor,
                    style: (0, _utils.getRightStyles)(alignToTop, description, theme.isV3)
                }) : null
            ]
        })
    }));
};
var Component = (0, _forwardRef.forwardRef)(ListItem);
Component.displayName = 'List.Item';
var styles = _reactnative.StyleSheet.create({
    container: {
        padding: 8
    },
    containerV3: {
        paddingVertical: 8,
        paddingRight: 24
    },
    row: {
        width: '100%',
        flexDirection: 'row'
    },
    rowV3: {
        width: '100%',
        flexDirection: 'row',
        marginVertical: 6
    },
    title: {
        fontSize: 16
    },
    description: {
        fontSize: 14
    },
    item: {
        marginVertical: 6,
        paddingLeft: 8
    },
    itemV3: {
        paddingLeft: 16
    },
    content: {
        flexShrink: 1,
        flexGrow: 1,
        justifyContent: 'center'
    }
});
var _default = Component;


}),
"19276": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _ListSubheader = /*#__PURE__*/ _interop_require_default._(__webpack_require__(5224));
var _theming = __webpack_require__(10968);
/**
 * A component used to group list items.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { List, MD3Colors } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <List.Section>
 *     <List.Subheader>Some title</List.Subheader>
 *     <List.Item title="First Item" left={() => <List.Icon icon="folder" />} />
 *     <List.Item
 *       title="Second Item"
 *       left={() => <List.Icon color={MD3Colors.tertiary70} icon="folder" />}
 *     />
 *   </List.Section>
 * );
 *
 * export default MyComponent;
 * ```
 */ var ListSection = function(_param) {
    var children = _param.children, title = _param.title, titleStyle = _param.titleStyle, style = _param.style, themeOverrides = _param.theme, rest = _object_without_properties_loose._(_param, [
        "children",
        "title",
        "titleStyle",
        "style",
        "theme"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var viewProps = _extends._({}, rest, {
        theme: theme
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, _extends._({}, viewProps, {
        style: [
            styles.container,
            style
        ],
        children: [
            title ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_ListSubheader.default, {
                style: titleStyle,
                theme: theme,
                children: title
            }) : null,
            children
        ]
    }));
};
ListSection.displayName = 'List.Section';
var styles = _reactnative.StyleSheet.create({
    container: {
        marginVertical: 8
    }
});
var _default = ListSection;


}),
"5224": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _theming = __webpack_require__(10968);
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
/**
 * A component used to display a header in lists.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { List } from 'react-native-paper';
 *
 * const MyComponent = () => <List.Subheader>My List Title</List.Subheader>;
 *
 * export default MyComponent;
 * ```
 */ var ListSubheader = function(_param) {
    var style = _param.style, overrideTheme = _param.theme, maxFontSizeMultiplier = _param.maxFontSizeMultiplier, rest = _object_without_properties_loose._(_param, [
        "style",
        "theme",
        "maxFontSizeMultiplier"
    ]);
    var theme = (0, _theming.useInternalTheme)(overrideTheme);
    var textColor = theme.isV3 ? theme.colors.onSurfaceVariant : (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
    var font = theme.isV3 ? theme.fonts.bodyMedium : theme.fonts.medium;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, _extends._({
        variant: "bodyMedium",
        numberOfLines: 1,
        maxFontSizeMultiplier: maxFontSizeMultiplier
    }, rest, {
        style: [
            styles.container,
            _extends._({
                color: textColor
            }, font),
            style
        ]
    }));
};
ListSubheader.displayName = 'List.Subheader';
var styles = _reactnative.StyleSheet.create({
    container: {
        paddingHorizontal: 16,
        paddingVertical: 13
    }
});
var _default = ListSubheader;


}),
"81045": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    accessibilityProps: function() {
        return accessibilityProps;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _colors = __webpack_require__(18847);
var MaterialCommunityIcons;
try {
    // Optionally require vector-icons
    MaterialCommunityIcons = (__webpack_require__(44803)/* ["default"] */["default"]);
} catch (e) {
    var isErrorLogged = false;
    // Fallback component for icons
    MaterialCommunityIcons = function(_param) {
        var name = _param.name, color = _param.color, size = _param.size, rest = _object_without_properties_loose._(_param, [
            "name",
            "color",
            "size"
        ]);
        /* eslint-disable no-console */ if (!isErrorLogged) {
            if (!/(Cannot find module|Module not found|Cannot resolve module)/.test(e.message)) {
                console.error(e);
            }
            console.warn("Tried to use the icon '" + name + "' in a component from 'react-native-paper', but 'react-native-vector-icons/MaterialCommunityIcons' could not be loaded.", "To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/docs/guides/icons");
            isErrorLogged = true;
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Text, _extends._({}, rest, {
            style: [
                styles.icon,
                {
                    color: color,
                    fontSize: size
                }
            ],
            // @ts-expect-error: Text doesn't support this, but it seems to affect TouchableNativeFeedback
            pointerEvents: "none",
            selectable: false,
            children: "□"
        }));
    };
}
var accessibilityProps = _reactnative.Platform.OS === 'web' ? {
    role: 'img',
    focusable: false
} : {
    accessibilityElementsHidden: true,
    importantForAccessibility: 'no-hide-descendants'
};
var defaultIcon = function(param) {
    var name = param.name, _param_color = param.color, color = _param_color === void 0 ? _colors.black : _param_color, size = param.size, direction = param.direction, allowFontScaling = param.allowFontScaling, testID = param.testID;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(MaterialCommunityIcons, _extends._({
        allowFontScaling: allowFontScaling,
        name: name,
        color: color,
        size: size,
        style: [
            {
                transform: [
                    {
                        scaleX: direction === 'rtl' ? -1 : 1
                    }
                ],
                lineHeight: size
            },
            styles.icon
        ],
        pointerEvents: "none",
        selectable: false,
        testID: testID
    }, accessibilityProps));
};
var styles = _reactnative.StyleSheet.create({
    // eslint-disable-next-line react-native/no-color-literals
    icon: {
        backgroundColor: 'transparent'
    }
});
var _default = defaultIcon;


}),
"7350": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ELEVATION_LEVELS_MAP: function() {
        return ELEVATION_LEVELS_MAP;
    },
    default: function() {
        return _default;
    }
});
var _async_to_generator = __webpack_require__(31478);
var _extends = __webpack_require__(88410);
var _inherits = __webpack_require__(92985);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _sliced_to_array = __webpack_require__(38097);
var _ts_generator = __webpack_require__(13629);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _MenuItem = /*#__PURE__*/ _interop_require_default._(__webpack_require__(31369));
var _constants = __webpack_require__(77942);
var _theming = __webpack_require__(10968);
var _types = __webpack_require__(8518);
var _addEventListener = __webpack_require__(74897);
var _BackHandler = __webpack_require__(18819);
var _Portal = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4844));
var _Surface = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2403));
// Minimum padding between the edge of the screen and the menu
var SCREEN_INDENT = 8;
// From https://material.io/design/motion/speed.html#duration
var ANIMATION_DURATION = 250;
// From the 'Standard easing' section of https://material.io/design/motion/speed.html#easing
var EASING = _reactnative.Easing.bezier(0.4, 0, 0.2, 1);
var WINDOW_LAYOUT = _reactnative.Dimensions.get('window');
var DEFAULT_ELEVATION = 2;
var ELEVATION_LEVELS_MAP = Object.values(_types.ElevationLevels);
var DEFAULT_MODE = 'elevated';
/**
 * Menus display a list of choices on temporary elevated surfaces. Their placement varies based on the element that opens them.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { View } from 'react-native';
 * import { Button, Menu, Divider, PaperProvider } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [visible, setVisible] = React.useState(false);
 *
 *   const openMenu = () => setVisible(true);
 *
 *   const closeMenu = () => setVisible(false);
 *
 *   return (
 *     <PaperProvider>
 *       <View
 *         style={{
 *           paddingTop: 50,
 *           flexDirection: 'row',
 *           justifyContent: 'center',
 *         }}>
 *         <Menu
 *           visible={visible}
 *           onDismiss={closeMenu}
 *           anchor={<Button onPress={openMenu}>Show menu</Button>}>
 *           <Menu.Item onPress={() => {}} title="Item 1" />
 *           <Menu.Item onPress={() => {}} title="Item 2" />
 *           <Divider />
 *           <Menu.Item onPress={() => {}} title="Item 3" />
 *         </Menu>
 *       </View>
 *     </PaperProvider>
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 *
 * ### Note
 * When using `Menu` within a React Native's `Modal` component, you need to wrap all
 * `Modal` contents within a `PaperProvider` in order for the menu to show. This
 * wrapping is not necessary if you use Paper's `Modal` instead.
 */ var Menu = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(Menu, _React_Component);
    function Menu() {
        var _this;
        var _this1;
        _this = _React_Component.apply(this, arguments) || this, _this1 = _this, _this.state = {
            rendered: _this.props.visible,
            top: 0,
            left: 0,
            menuLayout: {
                width: 0,
                height: 0
            },
            anchorLayout: {
                width: 0,
                height: 0
            },
            opacityAnimation: new _reactnative.Animated.Value(0),
            scaleAnimation: new _reactnative.Animated.ValueXY({
                x: 0,
                y: 0
            }),
            windowLayout: {
                width: WINDOW_LAYOUT.width,
                height: WINDOW_LAYOUT.height
            }
        }, _this.anchor = null, _this.menu = null, _this.keyboardHeight = 0, _this.isCoordinate = function(anchor) {
            return !/*#__PURE__*/ _react.isValidElement(anchor) && typeof (anchor == null ? void 0 : anchor.x) === 'number' && typeof (anchor == null ? void 0 : anchor.y) === 'number';
        }, _this.measureMenuLayout = function() {
            return new Promise(function(resolve) {
                if (_this.menu) {
                    _this.menu.measureInWindow(function(x, y, width, height) {
                        resolve({
                            x: x,
                            y: y,
                            width: width,
                            height: height
                        });
                    });
                }
            });
        }, _this.measureAnchorLayout = function() {
            return new Promise(function(resolve) {
                var anchor = _this.props.anchor;
                if (_this.isCoordinate(anchor)) {
                    resolve({
                        x: anchor.x,
                        y: anchor.y,
                        width: 0,
                        height: 0
                    });
                    return;
                }
                if (_this.anchor) {
                    _this.anchor.measureInWindow(function(x, y, width, height) {
                        resolve({
                            x: x,
                            y: y,
                            width: width,
                            height: height
                        });
                    });
                }
            });
        }, _this.updateVisibility = /*#__PURE__*/ _async_to_generator._(function() {
            return _ts_generator._(this, function(_state) {
                switch(_state.label){
                    case 0:
                        // Menu is rendered in Portal, which updates items asynchronously
                        // We need to do the same here so that the ref is up-to-date
                        return [
                            4,
                            Promise.resolve()
                        ];
                    case 1:
                        _state.sent();
                        if (_this1.props.visible) {
                            _this1.show();
                        } else {
                            _this1.hide();
                        }
                        return [
                            2
                        ];
                }
            });
        }), _this.isBrowser = function() {
            return _reactnative.Platform.OS === 'web' && 'document' in __webpack_require__.g;
        }, _this.focusFirstDOMNode = function(el) {
            if (el && _this.isBrowser()) {
                // When in the browser, we want to focus the first focusable item on toggle
                // For example, when menu is shown, focus the first item in the menu
                // And when menu is dismissed, send focus back to the button to resume tabbing
                var node = (0, _reactnative.findNodeHandle)(el);
                var focusableNode = node.querySelector(// This is a rough list of selectors that can be focused
                'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
                focusableNode == null ? void 0 : focusableNode.focus();
            }
        }, _this.handleDismiss = function() {
            if (_this.props.visible) {
                _this.props.onDismiss == null ? void 0 : _this.props.onDismiss.call(_this.props);
            }
            return true;
        }, _this.handleKeypress = function(e) {
            if (e.key === 'Escape') {
                _this.props.onDismiss == null ? void 0 : _this.props.onDismiss.call(_this.props);
            }
        }, _this.attachListeners = function() {
            _this.backHandlerSubscription = (0, _addEventListener.addEventListener)(_BackHandler.BackHandler, 'hardwareBackPress', _this.handleDismiss);
            _this.dimensionsSubscription = (0, _addEventListener.addEventListener)(_reactnative.Dimensions, 'change', _this.handleDismiss);
            _this.isBrowser() && document.addEventListener('keyup', _this.handleKeypress);
        }, _this.removeListeners = function() {
            var _this_backHandlerSubscription, _this_dimensionsSubscription;
            (_this_backHandlerSubscription = _this.backHandlerSubscription) == null ? void 0 : _this_backHandlerSubscription.remove();
            (_this_dimensionsSubscription = _this.dimensionsSubscription) == null ? void 0 : _this_dimensionsSubscription.remove();
            _this.isBrowser() && document.removeEventListener('keyup', _this.handleKeypress);
        }, _this.show = /*#__PURE__*/ _async_to_generator._(function() {
            var windowLayout, _ref, menuLayout, anchorLayout;
            return _ts_generator._(this, function(_state) {
                switch(_state.label){
                    case 0:
                        windowLayout = _reactnative.Dimensions.get('window');
                        return [
                            4,
                            Promise.all([
                                _this1.measureMenuLayout(),
                                _this1.measureAnchorLayout()
                            ])
                        ];
                    case 1:
                        _ref = _sliced_to_array._.apply(void 0, [
                            _state.sent(),
                            2
                        ]), menuLayout = _ref[0], anchorLayout = _ref[1];
                        // When visible is true for first render
                        // native views can be still not rendered and
                        // measureMenuLayout/measureAnchorLayout functions
                        // return wrong values e.g { x:0, y: 0, width: 0, height: 0 }
                        // so we have to wait until views are ready
                        // and rerun this function to show menu
                        if (!windowLayout.width || !windowLayout.height || !menuLayout.width || !menuLayout.height || !anchorLayout.width && !_this1.isCoordinate(_this1.props.anchor) || !anchorLayout.height && !_this1.isCoordinate(_this1.props.anchor)) {
                            requestAnimationFrame(_this1.show);
                            return [
                                2
                            ];
                        }
                        _this1.setState(function() {
                            return {
                                left: anchorLayout.x,
                                top: anchorLayout.y,
                                anchorLayout: {
                                    height: anchorLayout.height,
                                    width: anchorLayout.width
                                },
                                menuLayout: {
                                    width: menuLayout.width,
                                    height: menuLayout.height
                                },
                                windowLayout: {
                                    height: windowLayout.height - _this1.keyboardHeight,
                                    width: windowLayout.width
                                }
                            };
                        }, function() {
                            _this1.attachListeners();
                            var animation = _this1.props.theme.animation;
                            _reactnative.Animated.parallel([
                                _reactnative.Animated.timing(_this1.state.scaleAnimation, {
                                    toValue: {
                                        x: menuLayout.width,
                                        y: menuLayout.height
                                    },
                                    duration: ANIMATION_DURATION * animation.scale,
                                    easing: EASING,
                                    useNativeDriver: true
                                }),
                                _reactnative.Animated.timing(_this1.state.opacityAnimation, {
                                    toValue: 1,
                                    duration: ANIMATION_DURATION * animation.scale,
                                    easing: EASING,
                                    useNativeDriver: true
                                })
                            ]).start(function(param) {
                                var finished = param.finished;
                                if (finished) {
                                    _this1.focusFirstDOMNode(_this1.menu);
                                }
                            });
                        });
                        return [
                            2
                        ];
                }
            });
        }), _this.hide = function() {
            _this.removeListeners();
            var animation = _this.props.theme.animation;
            _reactnative.Animated.timing(_this.state.opacityAnimation, {
                toValue: 0,
                duration: ANIMATION_DURATION * animation.scale,
                easing: EASING,
                useNativeDriver: true
            }).start(function(param) {
                var finished = param.finished;
                if (finished) {
                    _this.setState({
                        menuLayout: {
                            width: 0,
                            height: 0
                        },
                        rendered: false
                    });
                    _this.state.scaleAnimation.setValue({
                        x: 0,
                        y: 0
                    });
                    _this.focusFirstDOMNode(_this.anchor);
                }
            });
        }, _this.keyboardDidShow = function(e) {
            var keyboardHeight = e.endCoordinates.height;
            _this.keyboardHeight = keyboardHeight;
        }, _this.keyboardDidHide = function() {
            _this.keyboardHeight = 0;
        };
        return _this;
    }
    var _proto = Menu.prototype;
    _proto.componentDidMount = function componentDidMount() {
        this.keyboardDidShowListener = _reactnative.Keyboard.addListener('keyboardDidShow', this.keyboardDidShow);
        this.keyboardDidHideListener = _reactnative.Keyboard.addListener('keyboardDidHide', this.keyboardDidHide);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        if (prevProps.visible !== this.props.visible) {
            this.updateVisibility();
        }
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        var _this_keyboardDidShowListener, _this_keyboardDidHideListener;
        this.removeListeners();
        (_this_keyboardDidShowListener = this.keyboardDidShowListener) == null ? void 0 : _this_keyboardDidShowListener.remove();
        (_this_keyboardDidHideListener = this.keyboardDidHideListener) == null ? void 0 : _this_keyboardDidHideListener.remove();
    };
    _proto.render = function render() {
        var _this = this;
        var _this_props = this.props, visible = _this_props.visible, anchor = _this_props.anchor, anchorPosition = _this_props.anchorPosition, contentStyle = _this_props.contentStyle, style = _this_props.style, _this_props_elevation = _this_props.elevation, elevation = _this_props_elevation === void 0 ? DEFAULT_ELEVATION : _this_props_elevation, _this_props_mode = _this_props.mode, mode = _this_props_mode === void 0 ? DEFAULT_MODE : _this_props_mode, children = _this_props.children, theme = _this_props.theme, statusBarHeight = _this_props.statusBarHeight, onDismiss = _this_props.onDismiss, overlayAccessibilityLabel = _this_props.overlayAccessibilityLabel, keyboardShouldPersistTaps = _this_props.keyboardShouldPersistTaps, testID = _this_props.testID;
        var _this_state = this.state, rendered = _this_state.rendered, menuLayout = _this_state.menuLayout, anchorLayout = _this_state.anchorLayout, opacityAnimation = _this_state.opacityAnimation, scaleAnimation = _this_state.scaleAnimation, windowLayout = _this_state.windowLayout;
        var _this_state1 = this.state, left = _this_state1.left, top = _this_state1.top;
        if (!this.isCoordinate(this.anchor) && anchorPosition === 'bottom') {
            top += anchorLayout.height;
        }
        // I don't know why but on Android measure function is wrong by 24
        var additionalVerticalValue = _reactnative.Platform.select({
            android: statusBarHeight,
            "default": 0
        });
        var scaleTransforms = [
            {
                scaleX: scaleAnimation.x.interpolate({
                    inputRange: [
                        0,
                        menuLayout.width
                    ],
                    outputRange: [
                        0,
                        1
                    ]
                })
            },
            {
                scaleY: scaleAnimation.y.interpolate({
                    inputRange: [
                        0,
                        menuLayout.height
                    ],
                    outputRange: [
                        0,
                        1
                    ]
                })
            }
        ];
        // We need to translate menu while animating scale to imitate transform origin for scale animation
        var positionTransforms = [];
        // Check if menu fits horizontally and if not align it to right.
        if (left <= windowLayout.width - menuLayout.width - SCREEN_INDENT) {
            positionTransforms.push({
                translateX: scaleAnimation.x.interpolate({
                    inputRange: [
                        0,
                        menuLayout.width
                    ],
                    outputRange: [
                        -(menuLayout.width / 2),
                        0
                    ]
                })
            });
            // Check if menu position has enough space from left side
            if (left < SCREEN_INDENT) {
                left = SCREEN_INDENT;
            }
        } else {
            positionTransforms.push({
                translateX: scaleAnimation.x.interpolate({
                    inputRange: [
                        0,
                        menuLayout.width
                    ],
                    outputRange: [
                        menuLayout.width / 2,
                        0
                    ]
                })
            });
            left += anchorLayout.width - menuLayout.width;
            var right = left + menuLayout.width;
            // Check if menu position has enough space from right side
            if (right > windowLayout.width - SCREEN_INDENT) {
                left = windowLayout.width - SCREEN_INDENT - menuLayout.width;
            }
        }
        // If the menu is larger than available vertical space,
        // calculate the height of scrollable view
        var scrollableMenuHeight = 0;
        // Check if the menu should be scrollable
        if (// Check if the menu overflows from bottom side
        top >= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue && // And bottom side of the screen has more space than top side
        top <= windowLayout.height - top) {
            // Scrollable menu should be below the anchor (expands downwards)
            scrollableMenuHeight = windowLayout.height - top - SCREEN_INDENT - additionalVerticalValue;
        } else if (// Check if the menu overflows from bottom side
        top >= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue && // And top side of the screen has more space than bottom side
        top >= windowLayout.height - top && // And menu overflows from top side
        top <= menuLayout.height - anchorLayout.height + SCREEN_INDENT - additionalVerticalValue) {
            // Scrollable menu should be above the anchor (expands upwards)
            scrollableMenuHeight = top + anchorLayout.height - SCREEN_INDENT + additionalVerticalValue;
        }
        // Scrollable menu max height
        scrollableMenuHeight = scrollableMenuHeight > windowLayout.height - 2 * SCREEN_INDENT ? windowLayout.height - 2 * SCREEN_INDENT : scrollableMenuHeight;
        // Menu is typically positioned below the element that generates it
        // So first check if it fits below the anchor (expands downwards)
        if (// Check if menu fits vertically
        top <= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue || // Or if the menu overflows from bottom side
        top >= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue && // And bottom side of the screen has more space than top side
        top <= windowLayout.height - top) {
            positionTransforms.push({
                translateY: scaleAnimation.y.interpolate({
                    inputRange: [
                        0,
                        menuLayout.height
                    ],
                    outputRange: [
                        -((scrollableMenuHeight || menuLayout.height) / 2),
                        0
                    ]
                })
            });
            // Check if menu position has enough space from top side
            if (top < SCREEN_INDENT) {
                top = SCREEN_INDENT;
            }
        } else {
            positionTransforms.push({
                translateY: scaleAnimation.y.interpolate({
                    inputRange: [
                        0,
                        menuLayout.height
                    ],
                    outputRange: [
                        (scrollableMenuHeight || menuLayout.height) / 2,
                        0
                    ]
                })
            });
            top += anchorLayout.height - (scrollableMenuHeight || menuLayout.height);
            var bottom = top + (scrollableMenuHeight || menuLayout.height) + additionalVerticalValue;
            // Check if menu position has enough space from bottom side
            if (bottom > windowLayout.height - SCREEN_INDENT) {
                top = scrollableMenuHeight === windowLayout.height - 2 * SCREEN_INDENT ? -SCREEN_INDENT * 2 : windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue;
            }
        }
        var shadowMenuContainerStyle = _extends._({
            opacity: opacityAnimation,
            transform: scaleTransforms,
            borderRadius: theme.roundness
        }, !theme.isV3 && {
            elevation: 8
        }, scrollableMenuHeight ? {
            height: scrollableMenuHeight
        } : {});
        var positionStyle = _extends._({
            top: this.isCoordinate(anchor) ? top : top + additionalVerticalValue
        }, _reactnative.I18nManager.getConstants().isRTL ? {
            right: left
        } : {
            left: left
        });
        var pointerEvents = visible ? 'box-none' : 'none';
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
            ref: function(ref) {
                _this.anchor = ref;
            },
            collapsable: false,
            children: [
                this.isCoordinate(anchor) ? null : anchor,
                rendered ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Portal.default, {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Pressable, {
                            accessibilityLabel: overlayAccessibilityLabel,
                            accessibilityRole: "button",
                            onPress: onDismiss,
                            style: styles.pressableOverlay
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                            ref: function(ref) {
                                _this.menu = ref;
                            },
                            collapsable: false,
                            accessibilityViewIsModal: visible,
                            style: [
                                styles.wrapper,
                                positionStyle,
                                style
                            ],
                            pointerEvents: pointerEvents,
                            onAccessibilityEscape: onDismiss,
                            testID: "" + testID + "-view",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                                pointerEvents: pointerEvents,
                                style: {
                                    transform: positionTransforms
                                },
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Surface.default, _extends._({
                                    mode: mode,
                                    pointerEvents: pointerEvents,
                                    style: [
                                        styles.shadowMenuContainer,
                                        shadowMenuContainerStyle,
                                        theme.isV3 && {
                                            backgroundColor: theme.colors.elevation[ELEVATION_LEVELS_MAP[elevation]]
                                        },
                                        contentStyle
                                    ]
                                }, theme.isV3 && {
                                    elevation: elevation
                                }, {
                                    testID: "" + testID + "-surface",
                                    theme: theme,
                                    children: scrollableMenuHeight && /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.ScrollView, {
                                        keyboardShouldPersistTaps: keyboardShouldPersistTaps,
                                        children: children
                                    }) || /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Fragment, {
                                        children: children
                                    })
                                }))
                            })
                        })
                    ]
                }) : null
            ]
        });
    };
    Menu.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
        if (nextProps.visible && !prevState.rendered) {
            return {
                rendered: true
            };
        }
        return null;
    };
    return Menu;
}(_react.Component);
// @component ./MenuItem.tsx
Menu.Item = _MenuItem.default;
Menu.defaultProps = {
    statusBarHeight: _constants.APPROX_STATUSBAR_HEIGHT,
    overlayAccessibilityLabel: 'Close menu',
    testID: 'menu'
};
var styles = _reactnative.StyleSheet.create({
    wrapper: {
        position: 'absolute'
    },
    shadowMenuContainer: {
        opacity: 0,
        paddingVertical: 8
    },
    pressableOverlay: _extends._({}, _reactnative.StyleSheet.absoluteFillObject, _reactnative.Platform.OS === 'web' && {
        cursor: 'default'
    }, {
        width: '100%'
    })
});
var _default = (0, _theming.withInternalTheme)(Menu);


}),
"31369": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _utils = __webpack_require__(50187);
var _theming = __webpack_require__(10968);
var _Icon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80639));
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
/**
 * A component to show a single list item inside a Menu.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { View } from 'react-native';
 * import { Menu } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <View style={{ flex: 1 }}>
 *     <Menu.Item leadingIcon="redo" onPress={() => {}} title="Redo" />
 *     <Menu.Item leadingIcon="undo" onPress={() => {}} title="Undo" />
 *     <Menu.Item leadingIcon="content-cut" onPress={() => {}} title="Cut" disabled />
 *     <Menu.Item leadingIcon="content-copy" onPress={() => {}} title="Copy" disabled />
 *     <Menu.Item leadingIcon="content-paste" onPress={() => {}} title="Paste" />
 *   </View>
 * );
 *
 * export default MyComponent;
 * ```
 */ var MenuItem = function(param) {
    var leadingIcon = param.leadingIcon, trailingIcon = param.trailingIcon, dense = param.dense, title = param.title, disabled = param.disabled, background = param.background, onPress = param.onPress, style = param.style, contentStyle = param.contentStyle, titleStyle = param.titleStyle, customRippleColor = param.rippleColor, _param_testID = param.testID, testID = _param_testID === void 0 ? 'menu-item' : _param_testID, accessibilityLabel = param.accessibilityLabel, accessibilityState = param.accessibilityState, themeOverrides = param.theme, _param_titleMaxFontSizeMultiplier = param.titleMaxFontSizeMultiplier, titleMaxFontSizeMultiplier = _param_titleMaxFontSizeMultiplier === void 0 ? 1.5 : _param_titleMaxFontSizeMultiplier;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _getMenuItemColor = (0, _utils.getMenuItemColor)({
        theme: theme,
        disabled: disabled,
        customRippleColor: customRippleColor
    }), titleColor = _getMenuItemColor.titleColor, iconColor = _getMenuItemColor.iconColor, rippleColor = _getMenuItemColor.rippleColor;
    var isV3 = theme.isV3;
    var containerPadding = isV3 ? 12 : 8;
    var iconWidth = isV3 ? 24 : 40;
    var minWidth = _utils.MIN_WIDTH - (isV3 ? 12 : 16);
    var maxWidth = (0, _utils.getContentMaxWidth)({
        isV3: isV3,
        iconWidth: iconWidth,
        leadingIcon: leadingIcon,
        trailingIcon: trailingIcon
    });
    var titleTextStyle = _extends._({
        color: titleColor
    }, isV3 ? theme.fonts.bodyLarge : {});
    var newAccessibilityState = _extends._({}, accessibilityState, {
        disabled: disabled
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, {
        style: [
            styles.container,
            {
                paddingHorizontal: containerPadding
            },
            dense && styles.md3DenseContainer,
            style
        ],
        onPress: onPress,
        disabled: disabled,
        testID: testID,
        background: background,
        accessibilityLabel: accessibilityLabel,
        accessibilityRole: "menuitem",
        accessibilityState: newAccessibilityState,
        rippleColor: rippleColor,
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
            style: styles.row,
            children: [
                leadingIcon ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                    style: [
                        !isV3 && styles.item,
                        {
                            width: iconWidth
                        }
                    ],
                    pointerEvents: "box-none",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.default, {
                        source: leadingIcon,
                        size: 24,
                        color: iconColor
                    })
                }) : null,
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                    style: [
                        !isV3 && styles.item,
                        styles.content,
                        {
                            minWidth: minWidth,
                            maxWidth: maxWidth
                        },
                        isV3 && (leadingIcon ? styles.md3LeadingIcon : styles.md3WithoutLeadingIcon),
                        contentStyle
                    ],
                    pointerEvents: "none",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                        variant: "bodyLarge",
                        selectable: false,
                        numberOfLines: 1,
                        testID: "" + testID + "-title",
                        style: [
                            !isV3 && styles.title,
                            titleTextStyle,
                            titleStyle
                        ],
                        maxFontSizeMultiplier: titleMaxFontSizeMultiplier,
                        children: title
                    })
                }),
                isV3 && trailingIcon ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                    style: [
                        !isV3 && styles.item,
                        {
                            width: iconWidth
                        }
                    ],
                    pointerEvents: "box-none",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.default, {
                        source: trailingIcon,
                        size: 24,
                        color: iconColor
                    })
                }) : null
            ]
        })
    });
};
MenuItem.displayName = 'Menu.Item';
var styles = _reactnative.StyleSheet.create({
    container: {
        minWidth: _utils.MIN_WIDTH,
        maxWidth: _utils.MAX_WIDTH,
        height: 48,
        justifyContent: 'center'
    },
    md3DenseContainer: {
        height: 32
    },
    row: {
        flexDirection: 'row'
    },
    title: {
        fontSize: 16
    },
    item: {
        marginHorizontal: 8
    },
    content: {
        justifyContent: 'center'
    },
    md3LeadingIcon: {
        marginLeft: 12
    },
    md3WithoutLeadingIcon: {
        marginLeft: 4
    }
});
var _default = MenuItem;


}),
"23213": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _reactnativesafeareacontext = __webpack_require__(24144);
var _uselatestcallback = /*#__PURE__*/ _interop_require_default._(__webpack_require__(20249));
var _Surface = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2403));
var _theming = __webpack_require__(10968);
var _addEventListener = __webpack_require__(74897);
var _BackHandler = __webpack_require__(18819);
var _useAnimatedValue = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83451));
var DEFAULT_DURATION = 220;
var AnimatedPressable = _reactnative.Animated.createAnimatedComponent(_reactnative.Pressable);
/**
 * The Modal component is a simple way to present content above an enclosing view.
 * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](./Portal) component.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Modal, Portal, Text, Button, PaperProvider } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [visible, setVisible] = React.useState(false);
 *
 *   const showModal = () => setVisible(true);
 *   const hideModal = () => setVisible(false);
 *   const containerStyle = {backgroundColor: 'white', padding: 20};
 *
 *   return (
 *     <PaperProvider>
 *       <Portal>
 *         <Modal visible={visible} onDismiss={hideModal} contentContainerStyle={containerStyle}>
 *           <Text>Example Modal.  Click outside this area to dismiss.</Text>
 *         </Modal>
 *       </Portal>
 *       <Button style={{marginTop: 30}} onPress={showModal}>
 *         Show
 *       </Button>
 *     </PaperProvider>
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ function Modal(param) {
    var _param_dismissable = param.dismissable, dismissable = _param_dismissable === void 0 ? true : _param_dismissable, _param_dismissableBackButton = param.dismissableBackButton, dismissableBackButton = _param_dismissableBackButton === void 0 ? dismissable : _param_dismissableBackButton, _param_visible = param.visible, visible = _param_visible === void 0 ? false : _param_visible, _param_overlayAccessibilityLabel = param.overlayAccessibilityLabel, overlayAccessibilityLabel = _param_overlayAccessibilityLabel === void 0 ? 'Close modal' : _param_overlayAccessibilityLabel, _param_onDismiss = param.onDismiss, onDismiss = _param_onDismiss === void 0 ? function() {} : _param_onDismiss, children = param.children, contentContainerStyle = param.contentContainerStyle, style = param.style, themeOverrides = param.theme, _param_testID = param.testID, testID = _param_testID === void 0 ? 'modal' : _param_testID;
    var _theme_colors;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var visibleRef = _react.useRef(visible);
    _react.useEffect(function() {
        visibleRef.current = visible;
    });
    var onDismissCallback = (0, _uselatestcallback.default)(onDismiss);
    var scale = theme.animation.scale;
    var _useSafeAreaInsets = (0, _reactnativesafeareacontext.useSafeAreaInsets)(), top = _useSafeAreaInsets.top, bottom = _useSafeAreaInsets.bottom;
    var opacity = (0, _useAnimatedValue.default)(visible ? 1 : 0);
    var _React_useState = _sliced_to_array._(_react.useState(visible), 2), rendered = _React_useState[0], setRendered = _React_useState[1];
    if (visible && !rendered) {
        setRendered(true);
    }
    var showModal = _react.useCallback(function() {
        _reactnative.Animated.timing(opacity, {
            toValue: 1,
            duration: scale * DEFAULT_DURATION,
            easing: _reactnative.Easing.out(_reactnative.Easing.cubic),
            useNativeDriver: true
        }).start();
    }, [
        opacity,
        scale
    ]);
    var hideModal = _react.useCallback(function() {
        _reactnative.Animated.timing(opacity, {
            toValue: 0,
            duration: scale * DEFAULT_DURATION,
            easing: _reactnative.Easing.out(_reactnative.Easing.cubic),
            useNativeDriver: true
        }).start(function(param) {
            var finished = param.finished;
            if (!finished) {
                return;
            }
            if (visible) {
                onDismissCallback();
            }
            if (visibleRef.current) {
                showModal();
            } else {
                setRendered(false);
            }
        });
    }, [
        onDismissCallback,
        opacity,
        scale,
        showModal,
        visible
    ]);
    _react.useEffect(function() {
        if (!visible) {
            return undefined;
        }
        var onHardwareBackPress = function() {
            if (dismissable || dismissableBackButton) {
                hideModal();
            }
            return true;
        };
        var subscription = (0, _addEventListener.addEventListener)(_BackHandler.BackHandler, 'hardwareBackPress', onHardwareBackPress);
        return function() {
            return subscription.remove();
        };
    }, [
        dismissable,
        dismissableBackButton,
        hideModal,
        visible
    ]);
    var prevVisible = _react.useRef(null);
    _react.useEffect(function() {
        if (prevVisible.current !== visible) {
            if (visible) {
                showModal();
            } else {
                hideModal();
            }
        }
        prevVisible.current = visible;
    });
    if (!rendered) return null;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.Animated.View, {
        pointerEvents: visible ? 'auto' : 'none',
        accessibilityViewIsModal: true,
        accessibilityLiveRegion: "polite",
        style: _reactnative.StyleSheet.absoluteFill,
        onAccessibilityEscape: hideModal,
        testID: testID,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(AnimatedPressable, {
                accessibilityLabel: overlayAccessibilityLabel,
                accessibilityRole: "button",
                disabled: !dismissable,
                onPress: dismissable ? hideModal : undefined,
                importantForAccessibility: "no",
                style: [
                    styles.backdrop,
                    {
                        backgroundColor: (_theme_colors = theme.colors) == null ? void 0 : _theme_colors.backdrop,
                        opacity: opacity
                    }
                ],
                testID: "" + testID + "-backdrop"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                style: [
                    styles.wrapper,
                    {
                        marginTop: top,
                        marginBottom: bottom
                    },
                    style
                ],
                pointerEvents: "box-none",
                testID: "" + testID + "-wrapper",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Surface.default, {
                    testID: "" + testID + "-surface",
                    theme: theme,
                    style: [
                        {
                            opacity: opacity
                        },
                        styles.content,
                        contentContainerStyle
                    ],
                    children: children
                })
            })
        ]
    });
}
var _default = Modal;
var styles = _reactnative.StyleSheet.create({
    backdrop: {
        flex: 1
    },
    wrapper: _extends._({}, _reactnative.StyleSheet.absoluteFillObject, {
        justifyContent: 'center'
    }),
    // eslint-disable-next-line react-native/no-color-literals
    content: {
        backgroundColor: 'transparent',
        justifyContent: 'center'
    }
});


}),
"4844": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _inherits = __webpack_require__(92985);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _PortalConsumer = /*#__PURE__*/ _interop_require_default._(__webpack_require__(19100));
var _PortalHost = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(3059));
var _settings = __webpack_require__(97527);
var _theming = __webpack_require__(10968);
/**
 * Portal allows rendering a component at a different place in the parent tree.
 * You can use it to render content which should appear above other elements, similar to `Modal`.
 * It requires a [`Portal.Host`](PortalHost) component to be rendered somewhere in the parent tree.
 * Note that if you're using the `Provider` component, this already includes a `Portal.Host`.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Portal, Text } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Portal>
 *     <Text>This is rendered at a different place</Text>
 *   </Portal>
 * );
 *
 * export default MyComponent;
 * ```
 */ var Portal = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(Portal, _React_Component);
    function Portal() {
        return _React_Component.apply(this, arguments) || this;
    }
    var _proto = Portal.prototype;
    _proto.render = function render() {
        var _this_props = this.props, children = _this_props.children, theme = _this_props.theme;
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_settings.Consumer, {
            children: function(settings) {
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_PortalHost.PortalContext.Consumer, {
                    children: function(manager) {
                        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_PortalConsumer.default, {
                            manager: manager,
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_settings.Provider, {
                                value: settings,
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_theming.ThemeProvider, {
                                    theme: theme,
                                    children: children
                                })
                            })
                        });
                    }
                });
            }
        });
    };
    return Portal;
}(_react.Component);
// @component ./PortalHost.tsx
Portal.Host = _PortalHost.default;
var _default = (0, _theming.withInternalTheme)(Portal);


}),
"19100": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return PortalConsumer;
    }
}));
var _inherits = __webpack_require__(92985);
var _interop_require_wildcard = __webpack_require__(3557);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var PortalConsumer = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(PortalConsumer, _React_Component);
    function PortalConsumer() {
        return _React_Component.apply(this, arguments) || this;
    }
    var _proto = PortalConsumer.prototype;
    _proto.componentDidMount = function componentDidMount() {
        this.checkManager();
        this.key = this.props.manager.mount(this.props.children);
    };
    _proto.componentDidUpdate = function componentDidUpdate() {
        this.checkManager();
        this.props.manager.update(this.key, this.props.children);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this.checkManager();
        this.props.manager.unmount(this.key);
    };
    _proto.checkManager = function checkManager() {
        if (!this.props.manager) {
            throw new Error('Looks like you forgot to wrap your root component with `Provider` component from `react-native-paper`.\n\n' + "Please read our getting-started guide and make sure you've followed all the required steps.\n\n" + 'https://callstack.github.io/react-native-paper/docs/guides/getting-started');
        }
    };
    _proto.render = function render() {
        return null;
    };
    return PortalConsumer;
}(_react.Component);


}),
"3059": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    PortalContext: function() {
        return PortalContext;
    },
    default: function() {
        return PortalHost;
    }
});
var _inherits = __webpack_require__(92985);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _PortalManager = /*#__PURE__*/ _interop_require_default._(__webpack_require__(68789));
var PortalContext = /*#__PURE__*/ _react.createContext(null);
var PortalHost = /*#__PURE__*/ function(_React_Component) {
    "use strict";
    _inherits._(PortalHost, _React_Component);
    function PortalHost() {
        var _this;
        _this = _React_Component.apply(this, arguments) || this, _this.setManager = function(manager) {
            _this.manager = manager;
        }, _this.mount = function(children) {
            var key = _this.nextKey++;
            if (_this.manager) {
                _this.manager.mount(key, children);
            } else {
                _this.queue.push({
                    type: 'mount',
                    key: key,
                    children: children
                });
            }
            return key;
        }, _this.update = function(key, children) {
            if (_this.manager) {
                _this.manager.update(key, children);
            } else {
                var op = {
                    type: 'mount',
                    key: key,
                    children: children
                };
                var index = _this.queue.findIndex(function(o) {
                    return o.type === 'mount' || o.type === 'update' && o.key === key;
                });
                if (index > -1) {
                    _this.queue[index] = op;
                } else {
                    _this.queue.push(op);
                }
            }
        }, _this.unmount = function(key) {
            if (_this.manager) {
                _this.manager.unmount(key);
            } else {
                _this.queue.push({
                    type: 'unmount',
                    key: key
                });
            }
        }, _this.nextKey = 0, _this.queue = [];
        return _this;
    }
    var _proto = PortalHost.prototype;
    _proto.componentDidMount = function componentDidMount() {
        var manager = this.manager;
        var queue = this.queue;
        while(queue.length && manager){
            var action = queue.pop();
            if (action) {
                // eslint-disable-next-line default-case
                switch(action.type){
                    case 'mount':
                        manager.mount(action.key, action.children);
                        break;
                    case 'update':
                        manager.update(action.key, action.children);
                        break;
                    case 'unmount':
                        manager.unmount(action.key);
                        break;
                }
            }
        }
    };
    _proto.render = function render() {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)(PortalContext.Provider, {
            value: {
                mount: this.mount,
                update: this.update,
                unmount: this.unmount
            },
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                    style: styles.container,
                    collapsable: false,
                    pointerEvents: "box-none",
                    children: this.props.children
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_PortalManager.default, {
                    ref: this.setManager
                })
            ]
        });
    };
    return PortalHost;
}(_react.Component);
PortalHost.displayName = 'Portal.Host';
var styles = _reactnative.StyleSheet.create({
    container: {
        flex: 1
    }
});


}),
"68789": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return PortalManager;
    }
}));
var _extends = __webpack_require__(88410);
var _inherits = __webpack_require__(92985);
var _interop_require_wildcard = __webpack_require__(3557);
var _to_consumable_array = __webpack_require__(2670);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var PortalManager = /*#__PURE__*/ function(_React_PureComponent) {
    "use strict";
    _inherits._(PortalManager, _React_PureComponent);
    function PortalManager() {
        var _this;
        _this = _React_PureComponent.apply(this, arguments) || this, _this.state = {
            portals: []
        }, _this.mount = function(key, children) {
            _this.setState(function(state) {
                return {
                    portals: _to_consumable_array._(state.portals).concat([
                        {
                            key: key,
                            children: children
                        }
                    ])
                };
            });
        }, _this.update = function(key, children) {
            return _this.setState(function(state) {
                return {
                    portals: state.portals.map(function(item) {
                        if (item.key === key) {
                            return _extends._({}, item, {
                                children: children
                            });
                        }
                        return item;
                    })
                };
            });
        }, _this.unmount = function(key) {
            return _this.setState(function(state) {
                return {
                    portals: state.portals.filter(function(item) {
                        return item.key !== key;
                    })
                };
            });
        };
        return _this;
    }
    var _proto = PortalManager.prototype;
    _proto.render = function render() {
        return this.state.portals.map(function(param) {
            var key = param.key, children = param.children;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                collapsable: false,
                pointerEvents: "box-none",
                style: _reactnative.StyleSheet.absoluteFill,
                children: children
            }, key);
        });
    };
    return PortalManager;
}(_react.PureComponent);


}),
"59596": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _theming = __webpack_require__(10968);
var INDETERMINATE_DURATION = 2000;
var INDETERMINATE_MAX_WIDTH = 0.6;
var isRTL = _reactnative.I18nManager.isRTL;
/**
 * Progress bar is an indicator used to present progress of some activity in the app.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { ProgressBar, MD3Colors } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <ProgressBar progress={0.5} color={MD3Colors.error50} />
 * );
 *
 * export default MyComponent;
 * ```
 */ var ProgressBar = function(_param) {
    var color = _param.color, indeterminate = _param.indeterminate, _param_progress = _param.progress, progress = _param_progress === void 0 ? 0 : _param_progress, _param_visible = _param.visible, visible = _param_visible === void 0 ? true : _param_visible, themeOverrides = _param.theme, animatedValue = _param.animatedValue, style = _param.style, fillStyle = _param.fillStyle, _param_testID = _param.testID, testID = _param_testID === void 0 ? 'progress-bar' : _param_testID, rest = _object_without_properties_loose._(_param, [
        "color",
        "indeterminate",
        "progress",
        "visible",
        "theme",
        "animatedValue",
        "style",
        "fillStyle",
        "testID"
    ]);
    var _theme_colors;
    var isWeb = _reactnative.Platform.OS === 'web';
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React_useRef = _react.useRef(new _reactnative.Animated.Value(0)), timer = _React_useRef.current;
    var _React_useRef1 = _react.useRef(new _reactnative.Animated.Value(0)), fade = _React_useRef1.current;
    var passedAnimatedValue = _react.useRef(animatedValue);
    var _React_useState = _sliced_to_array._(_react.useState(0), 2), width = _React_useState[0], setWidth = _React_useState[1];
    var _React_useState1 = _sliced_to_array._(_react.useState(0), 2), prevWidth = _React_useState1[0], setPrevWidth = _React_useState1[1];
    var indeterminateAnimation = _react.useRef(null);
    var scale = theme.animation.scale;
    _react.useEffect(function() {
        passedAnimatedValue.current = animatedValue;
    });
    var startAnimation = _react.useCallback(function() {
        // Show progress bar
        _reactnative.Animated.timing(fade, {
            duration: 200 * scale,
            toValue: 1,
            useNativeDriver: true,
            isInteraction: false
        }).start();
        /**
     * We shouldn't add @param animatedValue to the
     * deps array, to avoid the unnecessary loop.
     * We can only check if the prop is passed initially,
     * and we do early return.
     */ var externalAnimation = typeof passedAnimatedValue.current !== 'undefined' && passedAnimatedValue.current >= 0;
        if (externalAnimation) {
            return;
        }
        // Animate progress bar
        if (indeterminate) {
            if (!indeterminateAnimation.current) {
                indeterminateAnimation.current = _reactnative.Animated.timing(timer, {
                    duration: INDETERMINATE_DURATION,
                    toValue: 1,
                    // Animated.loop does not work if useNativeDriver is true on web
                    useNativeDriver: !isWeb,
                    isInteraction: false
                });
            }
            // Reset timer to the beginning
            timer.setValue(0);
            _reactnative.Animated.loop(indeterminateAnimation.current).start();
        } else {
            _reactnative.Animated.timing(timer, {
                duration: 200 * scale,
                toValue: progress ? progress : 0,
                useNativeDriver: true,
                isInteraction: false
            }).start();
        }
    }, [
        fade,
        scale,
        indeterminate,
        timer,
        progress,
        isWeb
    ]);
    var stopAnimation = _react.useCallback(function() {
        // Stop indeterminate animation
        if (indeterminateAnimation.current) {
            indeterminateAnimation.current.stop();
        }
        _reactnative.Animated.timing(fade, {
            duration: 200 * scale,
            toValue: 0,
            useNativeDriver: true,
            isInteraction: false
        }).start();
    }, [
        fade,
        scale
    ]);
    _react.useEffect(function() {
        if (visible) startAnimation();
        else stopAnimation();
    }, [
        visible,
        startAnimation,
        stopAnimation
    ]);
    _react.useEffect(function() {
        if (animatedValue && animatedValue >= 0) {
            timer.setValue(animatedValue);
        }
    }, [
        animatedValue,
        timer
    ]);
    _react.useEffect(function() {
        // Start animation the very first time when previously the width was unclear
        if (visible && prevWidth === 0) {
            startAnimation();
        }
    }, [
        prevWidth,
        startAnimation,
        visible
    ]);
    var onLayout = function(event) {
        setPrevWidth(width);
        setWidth(event.nativeEvent.layout.width);
    };
    var tintColor = color || ((_theme_colors = theme.colors) == null ? void 0 : _theme_colors.primary);
    var trackTintColor = theme.isV3 ? theme.colors.surfaceVariant : (0, _color.default)(tintColor).alpha(0.38).rgb().string();
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, _extends._({
        onLayout: onLayout
    }, rest, {
        accessible: true,
        accessibilityRole: "progressbar",
        accessibilityState: {
            busy: visible
        },
        accessibilityValue: indeterminate ? {} : {
            min: 0,
            max: 100,
            now: progress * 100
        },
        style: isWeb && styles.webContainer,
        testID: testID,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
            style: [
                styles.container,
                {
                    backgroundColor: trackTintColor,
                    opacity: fade
                },
                style
            ],
            children: width ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                testID: "" + testID + "-fill",
                style: [
                    styles.progressBar,
                    {
                        width: width,
                        backgroundColor: tintColor,
                        transform: [
                            {
                                translateX: timer.interpolate(indeterminate ? {
                                    inputRange: [
                                        0,
                                        0.5,
                                        1
                                    ],
                                    outputRange: [
                                        (isRTL ? 1 : -1) * 0.5 * width,
                                        (isRTL ? 1 : -1) * 0.5 * INDETERMINATE_MAX_WIDTH * width,
                                        (isRTL ? -1 : 1) * 0.7 * width
                                    ]
                                } : {
                                    inputRange: [
                                        0,
                                        1
                                    ],
                                    outputRange: [
                                        (isRTL ? 1 : -1) * 0.5 * width,
                                        0
                                    ]
                                })
                            },
                            {
                                // Workaround for workaround for https://github.com/facebook/react-native/issues/6278
                                scaleX: timer.interpolate(indeterminate ? {
                                    inputRange: [
                                        0,
                                        0.5,
                                        1
                                    ],
                                    outputRange: [
                                        0.0001,
                                        INDETERMINATE_MAX_WIDTH,
                                        0.0001
                                    ]
                                } : {
                                    inputRange: [
                                        0,
                                        1
                                    ],
                                    outputRange: [
                                        0.0001,
                                        1
                                    ]
                                })
                            }
                        ]
                    },
                    fillStyle
                ]
            }) : null
        })
    }));
};
var styles = _reactnative.StyleSheet.create({
    container: {
        height: 4,
        overflow: 'hidden'
    },
    webContainer: {
        width: '100%',
        height: '100%'
    },
    progressBar: {
        flex: 1
    }
});
var _default = ProgressBar;


}),
"82009": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _RadioButtonAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(7881));
var _RadioButtonIOS = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65143));
var _theming = __webpack_require__(10968);
/**
 * Radio buttons allow the selection a single option from a set.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { View } from 'react-native';
 * import { RadioButton } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [checked, setChecked] = React.useState('first');
 *
 *   return (
 *     <View>
 *       <RadioButton
 *         value="first"
 *         status={ checked === 'first' ? 'checked' : 'unchecked' }
 *         onPress={() => setChecked('first')}
 *       />
 *       <RadioButton
 *         value="second"
 *         status={ checked === 'second' ? 'checked' : 'unchecked' }
 *         onPress={() => setChecked('second')}
 *       />
 *     </View>
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ var RadioButton = function(_param) {
    var themeOverrides = _param.theme, props = _object_without_properties_loose._(_param, [
        "theme"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var Button = _reactnative.Platform.select({
        "default": _RadioButtonAndroid.default,
        ios: _RadioButtonIOS.default
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(Button, _extends._({}, props, {
        theme: theme
    }));
};
var _default = RadioButton;


}),
"7881": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    RadioButtonAndroid: function() {
        return RadioButtonAndroid;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _RadioButtonGroup = __webpack_require__(76021);
var _utils = __webpack_require__(88375);
var _theming = __webpack_require__(10968);
var _utils1 = __webpack_require__(9832);
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
var BORDER_WIDTH = 2;
/**
 * Radio buttons allow the selection a single option from a set.
 * This component follows platform guidelines for Android, but can be used
 * on any platform.
 *
 * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple
 */ var RadioButtonAndroid = function(_param) {
    var disabled = _param.disabled, onPress = _param.onPress, themeOverrides = _param.theme, value = _param.value, status = _param.status, testID = _param.testID, rest = _object_without_properties_loose._(_param, [
        "disabled",
        "onPress",
        "theme",
        "value",
        "status",
        "testID"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React_useRef = _react.useRef(new _reactnative.Animated.Value(BORDER_WIDTH)), borderAnim = _React_useRef.current;
    var _React_useRef1 = _react.useRef(new _reactnative.Animated.Value(1)), radioAnim = _React_useRef1.current;
    var isFirstRendering = _react.useRef(true);
    var scale = theme.animation.scale;
    _react.useEffect(function() {
        // Do not run animation on very first rendering
        if (isFirstRendering.current) {
            isFirstRendering.current = false;
            return;
        }
        if (status === 'checked') {
            radioAnim.setValue(1.2);
            _reactnative.Animated.timing(radioAnim, {
                toValue: 1,
                duration: 150 * scale,
                useNativeDriver: true
            }).start();
        } else {
            borderAnim.setValue(10);
            _reactnative.Animated.timing(borderAnim, {
                toValue: BORDER_WIDTH,
                duration: 150 * scale,
                useNativeDriver: false
            }).start();
        }
    }, [
        status,
        borderAnim,
        radioAnim,
        scale
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_RadioButtonGroup.RadioButtonContext.Consumer, {
        children: function(context) {
            var checked = (0, _utils.isChecked)({
                contextValue: context == null ? void 0 : context.value,
                status: status,
                value: value
            }) === 'checked';
            var _getAndroidSelectionControlColor = (0, _utils1.getAndroidSelectionControlColor)({
                theme: theme,
                disabled: disabled,
                checked: checked,
                customColor: rest.color,
                customUncheckedColor: rest.uncheckedColor
            }), rippleColor = _getAndroidSelectionControlColor.rippleColor, selectionControlColor = _getAndroidSelectionControlColor.selectionControlColor;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, _extends._({}, rest, {
                borderless: true,
                rippleColor: rippleColor,
                onPress: disabled ? undefined : function(event) {
                    (0, _utils.handlePress)({
                        onPress: onPress,
                        onValueChange: context == null ? void 0 : context.onValueChange,
                        value: value,
                        event: event
                    });
                },
                accessibilityRole: "radio",
                accessibilityState: {
                    disabled: disabled,
                    checked: checked
                },
                accessibilityLiveRegion: "polite",
                style: styles.container,
                testID: testID,
                theme: theme,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                    style: [
                        styles.radio,
                        {
                            borderColor: selectionControlColor,
                            borderWidth: borderAnim
                        }
                    ],
                    children: checked ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                        style: [
                            _reactnative.StyleSheet.absoluteFill,
                            styles.radioContainer
                        ],
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                            style: [
                                styles.dot,
                                {
                                    backgroundColor: selectionControlColor,
                                    transform: [
                                        {
                                            scale: radioAnim
                                        }
                                    ]
                                }
                            ]
                        })
                    }) : null
                })
            }));
        }
    });
};
RadioButtonAndroid.displayName = 'RadioButton.Android';
var styles = _reactnative.StyleSheet.create({
    container: {
        borderRadius: 18
    },
    radioContainer: {
        alignItems: 'center',
        justifyContent: 'center'
    },
    radio: {
        height: 20,
        width: 20,
        borderRadius: 10,
        margin: 8
    },
    dot: {
        height: 10,
        width: 10,
        borderRadius: 5
    }
});
var _default = RadioButtonAndroid;


}),
"76021": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    RadioButtonContext: function() {
        return RadioButtonContext;
    },
    RadioButtonGroup: function() {
        return RadioButtonGroup;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var RadioButtonContext = /*#__PURE__*/ _react.createContext(null);
/**
 * Radio button group allows to control a group of radio buttons.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { View } from 'react-native';
 * import { RadioButton, Text } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [value, setValue] = React.useState('first');
 *
 *   return (
 *     <RadioButton.Group onValueChange={newValue => setValue(newValue)} value={value}>
 *       <View>
 *         <Text>First</Text>
 *         <RadioButton value="first" />
 *       </View>
 *       <View>
 *         <Text>Second</Text>
 *         <RadioButton value="second" />
 *       </View>
 *     </RadioButton.Group>
 *   );
 * };
 *
 * export default MyComponent;
 *```
 */ var RadioButtonGroup = function(param) {
    var value = param.value, onValueChange = param.onValueChange, children = param.children;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(RadioButtonContext.Provider, {
        value: {
            value: value,
            onValueChange: onValueChange
        },
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
            accessibilityRole: "radiogroup",
            children: children
        })
    });
};
RadioButtonGroup.displayName = 'RadioButton.Group';
var _default = RadioButtonGroup;


}),
"65143": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    RadioButtonIOS: function() {
        return RadioButtonIOS;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _RadioButtonGroup = __webpack_require__(76021);
var _utils = __webpack_require__(88375);
var _theming = __webpack_require__(10968);
var _utils1 = __webpack_require__(9832);
var _MaterialCommunityIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(81045));
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
/**
 * Radio buttons allow the selection a single option from a set.
 * This component follows platform guidelines for iOS, but can be used
 * on any platform.
 *
 * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple
 */ var RadioButtonIOS = function(_param) {
    var disabled = _param.disabled, onPress = _param.onPress, themeOverrides = _param.theme, status = _param.status, value = _param.value, testID = _param.testID, rest = _object_without_properties_loose._(_param, [
        "disabled",
        "onPress",
        "theme",
        "status",
        "value",
        "testID"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_RadioButtonGroup.RadioButtonContext.Consumer, {
        children: function(context) {
            var checked = (0, _utils.isChecked)({
                contextValue: context == null ? void 0 : context.value,
                status: status,
                value: value
            }) === 'checked';
            var _getSelectionControlIOSColor = (0, _utils1.getSelectionControlIOSColor)({
                theme: theme,
                disabled: disabled,
                customColor: rest.color
            }), checkedColor = _getSelectionControlIOSColor.checkedColor, rippleColor = _getSelectionControlIOSColor.rippleColor;
            var opacity = checked ? 1 : 0;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, _extends._({}, rest, {
                borderless: true,
                rippleColor: rippleColor,
                onPress: disabled ? undefined : function(event) {
                    (0, _utils.handlePress)({
                        onPress: onPress,
                        value: value,
                        onValueChange: context == null ? void 0 : context.onValueChange,
                        event: event
                    });
                },
                accessibilityRole: "radio",
                accessibilityState: {
                    disabled: disabled,
                    checked: checked
                },
                accessibilityLiveRegion: "polite",
                style: styles.container,
                testID: testID,
                theme: theme,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                    style: {
                        opacity: opacity
                    },
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_MaterialCommunityIcon.default, {
                        allowFontScaling: false,
                        name: "check",
                        size: 24,
                        color: checkedColor,
                        direction: "ltr"
                    })
                })
            }));
        }
    });
};
RadioButtonIOS.displayName = 'RadioButton.IOS';
var styles = _reactnative.StyleSheet.create({
    container: {
        borderRadius: 18,
        padding: 6
    }
});
var _default = RadioButtonIOS;


}),
"55580": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    RadioButtonItem: function() {
        return RadioButtonItem;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _RadioButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(82009));
var _RadioButtonAndroid = /*#__PURE__*/ _interop_require_default._(__webpack_require__(7881));
var _RadioButtonGroup = __webpack_require__(76021);
var _RadioButtonIOS = /*#__PURE__*/ _interop_require_default._(__webpack_require__(65143));
var _utils = __webpack_require__(88375);
var _theming = __webpack_require__(10968);
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
/**
 * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { RadioButton } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [value, setValue] = React.useState('first');
 *
 *   return (
 *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>
 *       <RadioButton.Item label="First item" value="first" />
 *       <RadioButton.Item label="Second item" value="second" />
 *     </RadioButton.Group>
 *   );
 * };
 *
 * export default MyComponent;
 *```
 */ var RadioButtonItem = function(param) {
    var value = param.value, label = param.label, style = param.style, labelStyle = param.labelStyle, onPress = param.onPress, onLongPress = param.onLongPress, disabled = param.disabled, color = param.color, uncheckedColor = param.uncheckedColor, rippleColor = param.rippleColor, status = param.status, themeOverrides = param.theme, background = param.background, _param_accessibilityLabel = param.accessibilityLabel, accessibilityLabel = _param_accessibilityLabel === void 0 ? label : _param_accessibilityLabel, testID = param.testID, mode = param.mode, _param_position = param.position, position = _param_position === void 0 ? 'trailing' : _param_position, _param_labelVariant = param.labelVariant, labelVariant = _param_labelVariant === void 0 ? 'bodyLarge' : _param_labelVariant, labelMaxFontSizeMultiplier = param.labelMaxFontSizeMultiplier;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var radioButtonProps = {
        value: value,
        disabled: disabled,
        status: status,
        color: color,
        theme: theme,
        uncheckedColor: uncheckedColor
    };
    var isLeading = position === 'leading';
    var radioButton;
    if (mode === 'android') {
        radioButton = /*#__PURE__*/ (0, _jsxruntime.jsx)(_RadioButtonAndroid.default, _extends._({}, radioButtonProps));
    } else if (mode === 'ios') {
        radioButton = /*#__PURE__*/ (0, _jsxruntime.jsx)(_RadioButtonIOS.default, _extends._({}, radioButtonProps));
    } else {
        radioButton = /*#__PURE__*/ (0, _jsxruntime.jsx)(_RadioButton.default, _extends._({}, radioButtonProps));
    }
    var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;
    var disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;
    var textAlign = isLeading ? 'right' : 'left';
    var computedStyle = {
        color: disabled ? disabledTextColor : textColor,
        textAlign: textAlign
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_RadioButtonGroup.RadioButtonContext.Consumer, {
        children: function(context) {
            var checked = (0, _utils.isChecked)({
                contextValue: context == null ? void 0 : context.value,
                status: status,
                value: value
            }) === 'checked';
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, {
                onPress: function(event) {
                    return (0, _utils.handlePress)({
                        onPress: onPress,
                        onValueChange: context == null ? void 0 : context.onValueChange,
                        value: value,
                        event: event
                    });
                },
                onLongPress: onLongPress,
                accessibilityLabel: accessibilityLabel,
                accessibilityRole: "radio",
                accessibilityState: {
                    checked: checked,
                    disabled: disabled
                },
                testID: testID,
                disabled: disabled,
                background: background,
                theme: theme,
                rippleColor: rippleColor,
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                    style: [
                        styles.container,
                        style
                    ],
                    pointerEvents: "none",
                    children: [
                        isLeading && radioButton,
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                            variant: labelVariant,
                            style: [
                                styles.label,
                                !theme.isV3 && styles.font,
                                computedStyle,
                                labelStyle
                            ],
                            maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
                            children: label
                        }),
                        !isLeading && radioButton
                    ]
                })
            });
        }
    });
};
RadioButtonItem.displayName = 'RadioButton.Item';
var _default = RadioButtonItem;
var styles = _reactnative.StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        paddingVertical: 8,
        paddingHorizontal: 16
    },
    label: {
        flexShrink: 1,
        flexGrow: 1
    },
    font: {
        fontSize: 16
    }
});


}),
"20886": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _ActivityIndicator = /*#__PURE__*/ _interop_require_default._(__webpack_require__(94908));
var _Divider = /*#__PURE__*/ _interop_require_default._(__webpack_require__(62550));
var _IconButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86395));
var _MaterialCommunityIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(81045));
var _Surface = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2403));
var _theming = __webpack_require__(10968);
var _forwardRef = __webpack_require__(45835);
/**
 * Searchbar is a simple input box where users can type search queries.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Searchbar } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [searchQuery, setSearchQuery] = React.useState('');
 *
 *   return (
 *     <Searchbar
 *       placeholder="Search"
 *       onChangeText={setSearchQuery}
 *       value={searchQuery}
 *     />
 *   );
 * };
 *
 * export default MyComponent;

 * ```
 */ var Searchbar = (0, _forwardRef.forwardRef)(function(_param, ref) {
    var icon = _param.icon, customIconColor = _param.iconColor, customRippleColor = _param.rippleColor, onIconPress = _param.onIconPress, _param_searchAccessibilityLabel = _param.searchAccessibilityLabel, searchAccessibilityLabel = _param_searchAccessibilityLabel === void 0 ? 'search' : _param_searchAccessibilityLabel, clearIcon = _param.clearIcon, _param_clearAccessibilityLabel = _param.clearAccessibilityLabel, clearAccessibilityLabel = _param_clearAccessibilityLabel === void 0 ? 'clear' : _param_clearAccessibilityLabel, onClearIconPress = _param.onClearIconPress, traileringIcon = _param.traileringIcon, traileringIconColor = _param.traileringIconColor, traileringIconAccessibilityLabel = _param.traileringIconAccessibilityLabel, customTraileringRippleColor = _param.traileringRippleColor, onTraileringIconPress = _param.onTraileringIconPress, right = _param.right, _param_mode = _param.mode, mode = _param_mode === void 0 ? 'bar' : _param_mode, _param_showDivider = _param.showDivider, showDivider = _param_showDivider === void 0 ? true : _param_showDivider, inputStyle = _param.inputStyle, placeholder = _param.placeholder, _param_elevation = _param.elevation, elevation = _param_elevation === void 0 ? 0 : _param_elevation, style = _param.style, themeOverrides = _param.theme, value = _param.value, _param_loading = _param.loading, loading = _param_loading === void 0 ? false : _param_loading, _param_testID = _param.testID, testID = _param_testID === void 0 ? 'search-bar' : _param_testID, rest = _object_without_properties_loose._(_param, [
        "icon",
        "iconColor",
        "rippleColor",
        "onIconPress",
        "searchAccessibilityLabel",
        "clearIcon",
        "clearAccessibilityLabel",
        "onClearIconPress",
        "traileringIcon",
        "traileringIconColor",
        "traileringIconAccessibilityLabel",
        "traileringRippleColor",
        "onTraileringIconPress",
        "right",
        "mode",
        "showDivider",
        "inputStyle",
        "placeholder",
        "elevation",
        "style",
        "theme",
        "value",
        "loading",
        "testID"
    ]);
    var _theme_colors, _theme_colors1;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var root = _react.useRef(null);
    _react.useImperativeHandle(ref, function() {
        var input = root.current;
        if (input) {
            return {
                focus: function() {
                    return input.focus();
                },
                clear: function() {
                    return input.clear();
                },
                setNativeProps: function(args) {
                    return input.setNativeProps(args);
                },
                isFocused: function() {
                    return input.isFocused();
                },
                blur: function() {
                    return input.blur();
                }
            };
        }
        var noop = function() {
            throw new Error('TextInput is not available');
        };
        return {
            focus: noop,
            clear: noop,
            setNativeProps: noop,
            isFocused: noop,
            blur: noop
        };
    });
    var handleClearPress = function(e) {
        var _root_current;
        (_root_current = root.current) == null ? void 0 : _root_current.clear();
        rest.onChangeText == null ? void 0 : rest.onChangeText.call(rest, '');
        onClearIconPress == null ? void 0 : onClearIconPress(e);
    };
    var roundness = theme.roundness, dark = theme.dark, isV3 = theme.isV3, fonts = theme.fonts;
    var placeholderTextColor = isV3 ? theme.colors.onSurface : (_theme_colors = theme.colors) == null ? void 0 : _theme_colors.placeholder;
    var textColor = isV3 ? theme.colors.onSurfaceVariant : theme.colors.text;
    var md2IconColor = dark ? textColor : (0, _color.default)(textColor).alpha(0.54).rgb().string();
    var iconColor = customIconColor || (isV3 ? theme.colors.onSurfaceVariant : md2IconColor);
    var rippleColor = customRippleColor || (0, _color.default)(textColor).alpha(0.32).rgb().string();
    var traileringRippleColor = customTraileringRippleColor || (0, _color.default)(textColor).alpha(0.32).rgb().string();
    var font = isV3 ? _extends._({}, fonts.bodyLarge, {
        lineHeight: _reactnative.Platform.select({
            ios: 0,
            "default": fonts.bodyLarge.lineHeight
        })
    }) : theme.fonts.regular;
    var isBarMode = isV3 && mode === 'bar';
    var shouldRenderTraileringIcon = isBarMode && traileringIcon && !loading && (!value || right !== undefined);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Surface.default, _extends._({
        style: [
            {
                borderRadius: roundness
            },
            !isV3 && styles.elevation,
            isV3 && {
                backgroundColor: theme.colors.elevation.level3,
                borderRadius: roundness * (isBarMode ? 7 : 0)
            },
            styles.container,
            style
        ],
        testID: "" + testID + "-container"
    }, theme.isV3 && {
        elevation: elevation
    }, {
        theme: theme,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_IconButton.default, {
                accessibilityRole: "button",
                borderless: true,
                rippleColor: rippleColor,
                onPress: onIconPress,
                iconColor: iconColor,
                icon: icon || function(param) {
                    var size = param.size, _$color = param.color;
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_MaterialCommunityIcon.default, {
                        name: "magnify",
                        color: _$color,
                        size: size,
                        direction: _reactnative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
                    });
                },
                theme: theme,
                accessibilityLabel: searchAccessibilityLabel,
                testID: "" + testID + "-icon"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.TextInput, _extends._({
                style: [
                    styles.input,
                    _extends._({
                        color: textColor
                    }, font, _reactnative.Platform.select({
                        web: {
                            outline: 'none'
                        }
                    })),
                    isV3 && (isBarMode ? styles.barModeInput : styles.viewModeInput),
                    inputStyle
                ],
                placeholder: placeholder || '',
                placeholderTextColor: placeholderTextColor,
                selectionColor: (_theme_colors1 = theme.colors) == null ? void 0 : _theme_colors1.primary,
                underlineColorAndroid: "transparent",
                returnKeyType: "search",
                keyboardAppearance: dark ? 'dark' : 'light',
                accessibilityRole: "search",
                ref: root,
                value: value,
                testID: testID
            }, rest)),
            loading ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivityIndicator.default, {
                testID: "activity-indicator",
                style: isV3 ? styles.v3Loader : styles.loader
            }) : // Clear icon should be always rendered within Searchbar – it's transparent,
            // without touch events, when there is no value. It's done to avoid issues
            // with the abruptly stopping ripple effect and changing bar width on web,
            // when clearing the value.
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                pointerEvents: value ? 'auto' : 'none',
                testID: "" + testID + "-icon-wrapper",
                style: [
                    isV3 && !value && styles.v3ClearIcon,
                    isV3 && right !== undefined && styles.v3ClearIconHidden
                ],
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_IconButton.default, {
                    borderless: true,
                    accessibilityLabel: clearAccessibilityLabel,
                    iconColor: value ? iconColor : 'rgba(255, 255, 255, 0)',
                    rippleColor: rippleColor,
                    onPress: handleClearPress,
                    icon: clearIcon || function(param) {
                        var size = param.size, _$color = param.color;
                        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_MaterialCommunityIcon.default, {
                            name: isV3 ? 'close' : 'close-circle-outline',
                            color: _$color,
                            size: size,
                            direction: _reactnative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
                        });
                    },
                    testID: "" + testID + "-clear-icon",
                    accessibilityRole: "button",
                    theme: theme
                })
            }),
            shouldRenderTraileringIcon ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_IconButton.default, {
                accessibilityRole: "button",
                borderless: true,
                onPress: onTraileringIconPress,
                iconColor: traileringIconColor || theme.colors.onSurfaceVariant,
                rippleColor: traileringRippleColor,
                icon: traileringIcon,
                accessibilityLabel: traileringIconAccessibilityLabel,
                testID: "" + testID + "-trailering-icon"
            }) : null,
            isBarMode && (right == null ? void 0 : right({
                color: textColor,
                style: styles.rightStyle,
                testID: testID
            })),
            isV3 && !isBarMode && showDivider && /*#__PURE__*/ (0, _jsxruntime.jsx)(_Divider.default, {
                bold: true,
                style: [
                    styles.divider,
                    {
                        backgroundColor: theme.colors.outline
                    }
                ],
                testID: "" + testID + "-divider"
            })
        ]
    }));
});
var styles = _reactnative.StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center'
    },
    input: {
        flex: 1,
        fontSize: 18,
        paddingLeft: 8,
        alignSelf: 'stretch',
        textAlign: _reactnative.I18nManager.getConstants().isRTL ? 'right' : 'left',
        minWidth: 0
    },
    barModeInput: {
        paddingLeft: 0,
        minHeight: 56
    },
    viewModeInput: {
        paddingLeft: 0,
        minHeight: 72
    },
    elevation: {
        elevation: 4
    },
    loader: {
        margin: 10
    },
    v3Loader: {
        marginHorizontal: 16
    },
    rightStyle: {
        marginRight: 16
    },
    v3ClearIcon: {
        position: 'absolute',
        right: 0,
        marginLeft: 16
    },
    v3ClearIconHidden: {
        display: 'none'
    },
    divider: {
        position: 'absolute',
        bottom: 0,
        width: '100%'
    }
});
var _default = Searchbar;


}),
"81": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    SegmentedButton: function() {
        return SegmentedButtonItem;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _utils = __webpack_require__(25925);
var _theming = __webpack_require__(10968);
var _Icon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80639));
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
var SegmentedButtonItem = function(param) {
    var checked = param.checked, accessibilityLabel = param.accessibilityLabel, disabled = param.disabled, style = param.style, labelStyle = param.labelStyle, showSelectedCheck = param.showSelectedCheck, checkedColor = param.checkedColor, uncheckedColor = param.uncheckedColor, customRippleColor = param.rippleColor, background = param.background, icon = param.icon, testID = param.testID, label = param.label, onPress = param.onPress, segment = param.segment, _param_density = param.density, density = _param_density === void 0 ? 'regular' : _param_density, themeOverrides = param.theme, labelMaxFontSizeMultiplier = param.labelMaxFontSizeMultiplier;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var checkScale = _react.useRef(new _reactnative.Animated.Value(0)).current;
    _react.useEffect(function() {
        if (!showSelectedCheck) {
            return;
        }
        if (checked) {
            _reactnative.Animated.spring(checkScale, {
                toValue: 1,
                useNativeDriver: true
            }).start();
        } else {
            _reactnative.Animated.spring(checkScale, {
                toValue: 0,
                useNativeDriver: true
            }).start();
        }
    }, [
        checked,
        checkScale,
        showSelectedCheck
    ]);
    var roundness = theme.roundness, isV3 = theme.isV3;
    var _getSegmentedButtonColors = (0, _utils.getSegmentedButtonColors)({
        checked: checked,
        theme: theme,
        disabled: disabled,
        checkedColor: checkedColor,
        uncheckedColor: uncheckedColor
    }), borderColor = _getSegmentedButtonColors.borderColor, textColor = _getSegmentedButtonColors.textColor, borderWidth = _getSegmentedButtonColors.borderWidth, backgroundColor = _getSegmentedButtonColors.backgroundColor;
    var borderRadius = (isV3 ? 5 : 1) * roundness;
    var segmentBorderRadius = (0, _utils.getSegmentedButtonBorderRadius)({
        theme: theme,
        segment: segment
    });
    var rippleColor = customRippleColor || (0, _color.default)(textColor).alpha(0.12).rgb().string();
    var showIcon = !icon ? false : label && checked ? !showSelectedCheck : true;
    var showCheckedIcon = checked && showSelectedCheck;
    var iconSize = isV3 ? 18 : 16;
    var iconStyle = _extends._({
        marginRight: label ? 5 : showCheckedIcon ? 3 : 0
    }, label && {
        transform: [
            {
                scale: checkScale.interpolate({
                    inputRange: [
                        0,
                        1
                    ],
                    outputRange: [
                        1,
                        0
                    ]
                })
            }
        ]
    });
    var buttonStyle = _extends._({
        backgroundColor: backgroundColor,
        borderColor: borderColor,
        borderWidth: borderWidth,
        borderRadius: borderRadius
    }, segmentBorderRadius);
    var paddingVertical = (0, _utils.getSegmentedButtonDensityPadding)({
        density: density
    });
    var rippleStyle = _extends._({
        borderRadius: borderRadius
    }, segmentBorderRadius);
    var labelTextStyle = _extends._({}, !isV3 ? {
        textTransform: 'uppercase',
        fontWeight: '500'
    } : theme.fonts.labelLarge, {
        color: textColor
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
        style: [
            buttonStyle,
            styles.button,
            style
        ],
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_TouchableRipple.default, {
            borderless: true,
            onPress: onPress,
            accessibilityLabel: accessibilityLabel,
            accessibilityState: {
                disabled: disabled,
                checked: checked
            },
            accessibilityRole: "button",
            disabled: disabled,
            rippleColor: rippleColor,
            testID: testID,
            style: rippleStyle,
            background: background,
            theme: theme,
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                style: [
                    styles.content,
                    {
                        paddingVertical: paddingVertical
                    }
                ],
                children: [
                    showCheckedIcon ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                        testID: "" + testID + "-check-icon",
                        style: [
                            iconStyle,
                            {
                                transform: [
                                    {
                                        scale: checkScale
                                    }
                                ]
                            }
                        ],
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.default, {
                            source: 'check',
                            size: iconSize,
                            color: textColor
                        })
                    }) : null,
                    showIcon ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
                        testID: "" + testID + "-icon",
                        style: iconStyle,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.default, {
                            source: icon,
                            size: iconSize,
                            color: textColor
                        })
                    }) : null,
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                        variant: "labelLarge",
                        style: [
                            styles.label,
                            labelTextStyle,
                            labelStyle
                        ],
                        selectable: false,
                        numberOfLines: 1,
                        maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
                        testID: "" + testID + "-label",
                        children: label
                    })
                ]
            })
        })
    });
};
var styles = _reactnative.StyleSheet.create({
    button: {
        flex: 1,
        minWidth: 76,
        borderStyle: 'solid'
    },
    label: {
        textAlign: 'center'
    },
    content: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
        paddingVertical: 9,
        paddingHorizontal: 16
    }
});
var _default = SegmentedButtonItem;


}),
"89493": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    SegmentedButtons: function() {
        return SegmentedButtons;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _to_consumable_array = __webpack_require__(2670);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _SegmentedButtonItem = /*#__PURE__*/ _interop_require_default._(__webpack_require__(81));
var _utils = __webpack_require__(25925);
var _theming = __webpack_require__(10968);
/**
 * Segmented buttons can be used to select options, switch views or sort elements.</br>
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { SafeAreaView, StyleSheet } from 'react-native';
 * import { SegmentedButtons } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [value, setValue] = React.useState('');
 *
 *   return (
 *     <SafeAreaView style={styles.container}>
 *       <SegmentedButtons
 *         value={value}
 *         onValueChange={setValue}
 *         buttons={[
 *           {
 *             value: 'walk',
 *             label: 'Walking',
 *           },
 *           {
 *             value: 'train',
 *             label: 'Transit',
 *           },
 *           { value: 'drive', label: 'Driving' },
 *         ]}
 *       />
 *     </SafeAreaView>
 *   );
 * };
 *
 * const styles = StyleSheet.create({
 *   container: {
 *     flex: 1,
 *     alignItems: 'center',
 *   },
 * });
 *
 * export default MyComponent;
 *```
 */ var SegmentedButtons = function(param) {
    var value = param.value, onValueChange = param.onValueChange, buttons = param.buttons, multiSelect = param.multiSelect, density = param.density, style = param.style, themeOverrides = param.theme;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
        style: [
            styles.row,
            style
        ],
        children: buttons.map(function(item, i) {
            var disabledChildStyle = (0, _utils.getDisabledSegmentedButtonStyle)({
                theme: theme,
                buttons: buttons,
                index: i
            });
            var segment = i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;
            var checked = multiSelect && Array.isArray(value) ? value.includes(item.value) : value === item.value;
            var onPress = function(e) {
                item.onPress == null ? void 0 : item.onPress.call(item, e);
                var nextValue = multiSelect && Array.isArray(value) ? checked ? value.filter(function(val) {
                    return item.value !== val;
                }) : _to_consumable_array._(value).concat([
                    item.value
                ]) : item.value;
                // @ts-expect-error: TS doesn't preserve types after destructuring, so the type isn't inferred correctly
                onValueChange(nextValue);
            };
            return /*#__PURE__*/ (0, _react.createElement)(_SegmentedButtonItem.default, _extends._({}, item, {
                key: i,
                checked: checked,
                segment: segment,
                density: density,
                onPress: onPress,
                style: [
                    item.style,
                    disabledChildStyle
                ],
                labelStyle: item.labelStyle,
                theme: theme
            }));
        })
    });
};
var styles = _reactnative.StyleSheet.create({
    row: {
        flexDirection: 'row'
    }
});
var _default = SegmentedButtons;


}),
"8996": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _reactnativesafeareacontext = __webpack_require__(24144);
var _uselatestcallback = /*#__PURE__*/ _interop_require_default._(__webpack_require__(20249));
var _Button = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79972));
var _IconButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86395));
var _MaterialCommunityIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(81045));
var _Surface = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2403));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
var _theming = __webpack_require__(10968);
var DURATION_SHORT = 4000;
var DURATION_MEDIUM = 7000;
var DURATION_LONG = 10000;
/**
 * Snackbars provide brief feedback about an operation through a message rendered at the bottom of the container in which it's wrapped.
 *
 * Note: To display it as a popup, regardless of the parent's position, wrap it with a `Portal` component – refer to the example in the "More Examples` section.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { View, StyleSheet } from 'react-native';
 * import { Button, Snackbar } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [visible, setVisible] = React.useState(false);
 *
 *   const onToggleSnackBar = () => setVisible(!visible);
 *
 *   const onDismissSnackBar = () => setVisible(false);
 *
 *   return (
 *     <View style={styles.container}>
 *       <Button onPress={onToggleSnackBar}>{visible ? 'Hide' : 'Show'}</Button>
 *       <Snackbar
 *         visible={visible}
 *         onDismiss={onDismissSnackBar}
 *         action={{
 *           label: 'Undo',
 *           onPress: () => {
 *             // Do something
 *           },
 *         }}>
 *         Hey there! I'm a Snackbar.
 *       </Snackbar>
 *     </View>
 *   );
 * };
 *
 * const styles = StyleSheet.create({
 *   container: {
 *     flex: 1,
 *     justifyContent: 'space-between',
 *   },
 * });
 *
 * export default MyComponent;
 * ```
 */ var Snackbar = function(_param) {
    var visible = _param.visible, action = _param.action, icon = _param.icon, onIconPress = _param.onIconPress, _param_iconAccessibilityLabel = _param.iconAccessibilityLabel, iconAccessibilityLabel = _param_iconAccessibilityLabel === void 0 ? 'Close icon' : _param_iconAccessibilityLabel, _param_duration = _param.duration, duration = _param_duration === void 0 ? DURATION_MEDIUM : _param_duration, onDismiss = _param.onDismiss, children = _param.children, _param_elevation = _param.elevation, elevation = _param_elevation === void 0 ? 2 : _param_elevation, wrapperStyle = _param.wrapperStyle, style = _param.style, themeOverrides = _param.theme, maxFontSizeMultiplier = _param.maxFontSizeMultiplier, rippleColor = _param.rippleColor, testID = _param.testID, rest = _object_without_properties_loose._(_param, [
        "visible",
        "action",
        "icon",
        "onIconPress",
        "iconAccessibilityLabel",
        "duration",
        "onDismiss",
        "children",
        "elevation",
        "wrapperStyle",
        "style",
        "theme",
        "maxFontSizeMultiplier",
        "rippleColor",
        "testID"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _useSafeAreaInsets = (0, _reactnativesafeareacontext.useSafeAreaInsets)(), bottom = _useSafeAreaInsets.bottom, right = _useSafeAreaInsets.right, left = _useSafeAreaInsets.left;
    var _React_useRef = _react.useRef(new _reactnative.Animated.Value(0.0)), opacity = _React_useRef.current;
    var hideTimeout = _react.useRef(undefined);
    var _React_useState = _sliced_to_array._(_react.useState(!visible), 2), hidden = _React_useState[0], setHidden = _React_useState[1];
    var scale = theme.animation.scale;
    var animateShow = (0, _uselatestcallback.default)(function() {
        if (hideTimeout.current) clearTimeout(hideTimeout.current);
        _reactnative.Animated.timing(opacity, {
            toValue: 1,
            duration: 200 * scale,
            easing: _reactnative.Easing.out(_reactnative.Easing.ease),
            useNativeDriver: true
        }).start(function(param) {
            var finished = param.finished;
            if (finished) {
                var isInfinity = duration === Number.POSITIVE_INFINITY || duration === Number.NEGATIVE_INFINITY;
                if (!isInfinity) {
                    hideTimeout.current = setTimeout(onDismiss, duration);
                }
            }
        });
    });
    var handleOnVisible = (0, _uselatestcallback.default)(function() {
        // show
        setHidden(false);
    });
    var handleOnHidden = (0, _uselatestcallback.default)(function() {
        // hide
        if (hideTimeout.current) {
            clearTimeout(hideTimeout.current);
        }
        _reactnative.Animated.timing(opacity, {
            toValue: 0,
            duration: 100 * scale,
            useNativeDriver: true
        }).start(function(param) {
            var finished = param.finished;
            if (finished) {
                setHidden(true);
            }
        });
    });
    _react.useEffect(function() {
        if (!hidden) {
            animateShow();
        }
    }, [
        animateShow,
        hidden
    ]);
    _react.useEffect(function() {
        return function() {
            if (hideTimeout.current) clearTimeout(hideTimeout.current);
        };
    }, []);
    _react.useLayoutEffect(function() {
        if (visible) {
            handleOnVisible();
        } else {
            handleOnHidden();
        }
    }, [
        visible,
        handleOnVisible,
        handleOnHidden
    ]);
    var colors = theme.colors, roundness = theme.roundness, isV3 = theme.isV3;
    if (hidden) {
        return null;
    }
    var _ref = action || {}, actionStyle = _ref.style, actionLabel = _ref.label, onPressAction = _ref.onPress, actionRippleColor = _ref.rippleColor, actionProps = _object_without_properties_loose._(_ref, [
        "style",
        "label",
        "onPress",
        "rippleColor"
    ]);
    var buttonTextColor = isV3 ? colors.inversePrimary : colors.accent;
    var textColor = isV3 ? colors.inverseOnSurface : colors == null ? void 0 : colors.surface;
    var backgroundColor = isV3 ? colors.inverseSurface : colors == null ? void 0 : colors.onSurface;
    var isIconButton = isV3 && onIconPress;
    var marginLeft = action ? -12 : -16;
    var wrapperPaddings = {
        paddingBottom: bottom,
        paddingHorizontal: Math.max(left, right)
    };
    var renderChildrenWithWrapper = function() {
        if (typeof children === 'string') {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                variant: "bodyMedium",
                style: [
                    styles.content,
                    {
                        color: textColor
                    }
                ],
                maxFontSizeMultiplier: maxFontSizeMultiplier,
                children: children
            });
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
            style: styles.content,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                children: children
            })
        });
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
        pointerEvents: "box-none",
        style: [
            styles.wrapper,
            wrapperPaddings,
            wrapperStyle
        ],
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Surface.default, _extends._({
            pointerEvents: "box-none",
            accessibilityLiveRegion: "polite",
            theme: theme,
            style: [
                !isV3 && styles.elevation,
                styles.container,
                {
                    backgroundColor: backgroundColor,
                    borderRadius: roundness,
                    opacity: opacity,
                    transform: [
                        {
                            scale: visible ? opacity.interpolate({
                                inputRange: [
                                    0,
                                    1
                                ],
                                outputRange: [
                                    0.9,
                                    1
                                ]
                            }) : 1
                        }
                    ]
                },
                style
            ],
            testID: testID
        }, isV3 && {
            elevation: elevation
        }, rest, {
            children: [
                renderChildrenWithWrapper(),
                (action || isIconButton) && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                    style: [
                        styles.actionsContainer,
                        {
                            marginLeft: marginLeft
                        }
                    ],
                    children: [
                        action ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.default, _extends._({
                            onPress: function(event) {
                                onPressAction == null ? void 0 : onPressAction(event);
                                onDismiss();
                            },
                            style: [
                                styles.button,
                                actionStyle
                            ],
                            textColor: buttonTextColor,
                            compact: !isV3,
                            mode: "text",
                            theme: theme,
                            rippleColor: actionRippleColor
                        }, actionProps, {
                            children: actionLabel
                        })) : null,
                        isIconButton ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_IconButton.default, {
                            accessibilityRole: "button",
                            borderless: true,
                            onPress: onIconPress,
                            iconColor: theme.colors.inverseOnSurface,
                            rippleColor: rippleColor,
                            theme: theme,
                            icon: icon || function(param) {
                                var size = param.size, color = param.color;
                                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_MaterialCommunityIcon.default, {
                                    name: "close",
                                    color: color,
                                    size: size,
                                    direction: _reactnative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'
                                });
                            },
                            accessibilityLabel: iconAccessibilityLabel,
                            style: styles.icon,
                            testID: "" + testID + "-icon"
                        }) : null
                    ]
                })
            ]
        }))
    });
};
/**
 * Show the Snackbar for a short duration.
 */ Snackbar.DURATION_SHORT = DURATION_SHORT;
/**
 * Show the Snackbar for a medium duration.
 */ Snackbar.DURATION_MEDIUM = DURATION_MEDIUM;
/**
 * Show the Snackbar for a long duration.
 */ Snackbar.DURATION_LONG = DURATION_LONG;
var styles = _reactnative.StyleSheet.create({
    wrapper: {
        position: 'absolute',
        bottom: 0,
        width: '100%'
    },
    container: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        margin: 8,
        borderRadius: 4,
        minHeight: 48
    },
    content: {
        marginHorizontal: 16,
        marginVertical: 14,
        flex: 1
    },
    actionsContainer: {
        flexDirection: 'row',
        justifyContent: 'flex-end',
        alignItems: 'center',
        minHeight: 48
    },
    button: {
        marginRight: 8,
        marginLeft: 4
    },
    elevation: {
        elevation: 6
    },
    icon: {
        width: 40,
        height: 40,
        margin: 0
    }
});
var _default = Snackbar;


}),
"2403": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _theming = __webpack_require__(10968);
var _overlay = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(87701));
var _shadow = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83741));
var _forwardRef = __webpack_require__(45835);
var _splitStyles = __webpack_require__(45975);
var MD2Surface = (0, _forwardRef.forwardRef)(function(_param, ref) {
    var style = _param.style, overrideTheme = _param.theme, rest = _object_without_properties_loose._(_param, [
        "style",
        "theme"
    ]);
    var _ref = _reactnative.StyleSheet.flatten(style) || {}, _ref_elevation = _ref.elevation, elevation = _ref_elevation === void 0 ? 4 : _ref_elevation;
    var _useInternalTheme = (0, _theming.useInternalTheme)(overrideTheme), isDarkTheme = _useInternalTheme.dark, mode = _useInternalTheme.mode, colors = _useInternalTheme.colors;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, _extends._({
        ref: ref
    }, rest, {
        style: [
            {
                backgroundColor: isDarkTheme && mode === 'adaptive' ? (0, _overlay.default)(elevation, colors == null ? void 0 : colors.surface) : colors == null ? void 0 : colors.surface
            },
            elevation ? (0, _shadow.default)(elevation) : null,
            style
        ]
    }));
});
var outerLayerStyleProperties = [
    'position',
    'alignSelf',
    'top',
    'right',
    'bottom',
    'left',
    'start',
    'end',
    'flex',
    'flexShrink',
    'flexGrow',
    'width',
    'height',
    'transform',
    'opacity'
];
var shadowColor = '#000';
var iOSShadowOutputRanges = [
    {
        shadowOpacity: 0.15,
        height: [
            0,
            1,
            2,
            4,
            6,
            8
        ],
        shadowRadius: [
            0,
            3,
            6,
            8,
            10,
            12
        ]
    },
    {
        shadowOpacity: 0.3,
        height: [
            0,
            1,
            1,
            1,
            2,
            4
        ],
        shadowRadius: [
            0,
            1,
            2,
            3,
            3,
            4
        ]
    }
];
var inputRange = [
    0,
    1,
    2,
    3,
    4,
    5
];
function getStyleForShadowLayer(elevation, layer) {
    if ((0, _overlay.isAnimatedValue)(elevation)) {
        return {
            shadowColor: shadowColor,
            shadowOpacity: elevation.interpolate({
                inputRange: [
                    0,
                    1
                ],
                outputRange: [
                    0,
                    iOSShadowOutputRanges[layer].shadowOpacity
                ],
                extrapolate: 'clamp'
            }),
            shadowOffset: {
                width: 0,
                height: elevation.interpolate({
                    inputRange: inputRange,
                    outputRange: iOSShadowOutputRanges[layer].height
                })
            },
            shadowRadius: elevation.interpolate({
                inputRange: inputRange,
                outputRange: iOSShadowOutputRanges[layer].shadowRadius
            })
        };
    }
    return {
        shadowColor: shadowColor,
        shadowOpacity: elevation ? iOSShadowOutputRanges[layer].shadowOpacity : 0,
        shadowOffset: {
            width: 0,
            height: iOSShadowOutputRanges[layer].height[elevation]
        },
        shadowRadius: iOSShadowOutputRanges[layer].shadowRadius[elevation]
    };
}
var SurfaceIOS = (0, _forwardRef.forwardRef)(function(_param, ref) {
    var elevation = _param.elevation, style = _param.style, backgroundColor = _param.backgroundColor, testID = _param.testID, children = _param.children, _param_mode = _param.mode, mode = _param_mode === void 0 ? 'elevated' : _param_mode, props = _object_without_properties_loose._(_param, [
        "elevation",
        "style",
        "backgroundColor",
        "testID",
        "children",
        "mode"
    ]);
    var _React_useMemo = _sliced_to_array._(_react.useMemo(function() {
        var flattenedStyles = _reactnative.StyleSheet.flatten(style) || {};
        var _splitStyles1 = _sliced_to_array._((0, _splitStyles.splitStyles)(flattenedStyles, function(style) {
            return outerLayerStyleProperties.includes(style) || style.startsWith('margin');
        }, function(style) {
            return style.startsWith('border') && style.endsWith('Radius');
        }), 3), filteredStyles = _splitStyles1[0], outerLayerStyles = _splitStyles1[1], borderRadiusStyles = _splitStyles1[2];
        if (false) {}
        var bgColor = flattenedStyles.backgroundColor || backgroundColor;
        var isElevated = mode === 'elevated';
        var outerLayerViewStyles = _extends._({}, isElevated && getStyleForShadowLayer(elevation, 0), outerLayerStyles, borderRadiusStyles, {
            backgroundColor: bgColor
        });
        var innerLayerViewStyles = _extends._({}, isElevated && getStyleForShadowLayer(elevation, 1), filteredStyles, borderRadiusStyles, {
            flex: flattenedStyles.height ? 1 : undefined,
            backgroundColor: bgColor
        });
        return [
            outerLayerViewStyles,
            innerLayerViewStyles
        ];
    }, [
        style,
        elevation,
        backgroundColor,
        mode
    ]), 2), outerLayerViewStyles = _React_useMemo[0], innerLayerViewStyles = _React_useMemo[1];
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
        ref: ref,
        style: outerLayerViewStyles,
        testID: "" + testID + "-outer-layer",
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, _extends._({}, props, {
            style: innerLayerViewStyles,
            testID: testID,
            children: children
        }))
    });
});
/**
 * Surface is a basic container that can give depth to an element with elevation shadow.
 * On dark theme with `adaptive` mode, surface is constructed by also placing a semi-transparent white overlay over a component surface.
 * See [Dark Theme](https://callstack.github.io/react-native-paper/docs/guides/theming#dark-theme) for more information.
 * Overlay and shadow can be applied by specifying the `elevation` property both on Android and iOS.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Surface, Text } from 'react-native-paper';
 * import { StyleSheet } from 'react-native';
 *
 * const MyComponent = () => (
 *   <Surface style={styles.surface} elevation={4}>
 *      <Text>Surface</Text>
 *   </Surface>
 * );
 *
 * export default MyComponent;
 *
 * const styles = StyleSheet.create({
 *   surface: {
 *     padding: 8,
 *     height: 80,
 *     width: 80,
 *     alignItems: 'center',
 *     justifyContent: 'center',
 *   },
 * });
 * ```
 */ var Surface = (0, _forwardRef.forwardRef)(function(_param, ref) {
    var _param_elevation = _param.elevation, elevation = _param_elevation === void 0 ? 1 : _param_elevation, children = _param.children, overridenTheme = _param.theme, style = _param.style, _param_testID = _param.testID, testID = _param_testID === void 0 ? 'surface' : _param_testID, _param_mode = _param.mode, mode = _param_mode === void 0 ? 'elevated' : _param_mode, props = _object_without_properties_loose._(_param, [
        "elevation",
        "children",
        "theme",
        "style",
        "testID",
        "mode"
    ]);
    var theme = (0, _theming.useInternalTheme)(overridenTheme);
    if (!theme.isV3) return /*#__PURE__*/ (0, _jsxruntime.jsx)(MD2Surface, _extends._({}, props, {
        theme: theme,
        style: style,
        ref: ref,
        children: children
    }));
    var colors = theme.colors;
    var inputRange = [
        0,
        1,
        2,
        3,
        4,
        5
    ];
    var backgroundColor = function() {
        var _colors_elevation;
        if ((0, _overlay.isAnimatedValue)(elevation)) {
            return elevation.interpolate({
                inputRange: inputRange,
                outputRange: inputRange.map(function(elevation) {
                    var _colors_elevation;
                    return (_colors_elevation = colors.elevation) == null ? void 0 : _colors_elevation["level" + elevation];
                })
            });
        }
        return (_colors_elevation = colors.elevation) == null ? void 0 : _colors_elevation["level" + elevation];
    }();
    var isElevated = mode === 'elevated';
    if (_reactnative.Platform.OS === 'web') {
        var _props_pointerEvents = props.pointerEvents, pointerEvents = _props_pointerEvents === void 0 ? 'auto' : _props_pointerEvents;
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, _extends._({}, props, {
            pointerEvents: pointerEvents,
            ref: ref,
            testID: testID,
            style: [
                {
                    backgroundColor: backgroundColor
                },
                elevation && isElevated ? (0, _shadow.default)(elevation, theme.isV3) : null,
                style
            ],
            children: children
        }));
    }
    if (_reactnative.Platform.OS === 'android') {
        var elevationLevel = [
            0,
            3,
            6,
            9,
            12,
            15
        ];
        var getElevationAndroid = function() {
            if ((0, _overlay.isAnimatedValue)(elevation)) {
                return elevation.interpolate({
                    inputRange: inputRange,
                    outputRange: elevationLevel
                });
            }
            return elevationLevel[elevation];
        };
        var _ref = _reactnative.StyleSheet.flatten(style) || {}, margin = _ref.margin, padding = _ref.padding, transform = _ref.transform, borderRadius = _ref.borderRadius;
        var outerLayerStyles = {
            margin: margin,
            padding: padding,
            transform: transform,
            borderRadius: borderRadius
        };
        var sharedStyle = [
            {
                backgroundColor: backgroundColor
            },
            style
        ];
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, _extends._({}, props, {
            testID: testID,
            ref: ref,
            style: [
                {
                    backgroundColor: backgroundColor,
                    transform: transform
                },
                outerLayerStyles,
                sharedStyle,
                isElevated && {
                    elevation: getElevationAndroid()
                }
            ],
            children: children
        }));
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(SurfaceIOS, _extends._({}, props, {
        ref: ref,
        elevation: elevation,
        backgroundColor: backgroundColor,
        style: style,
        testID: testID,
        mode: mode,
        children: children
    }));
});
var _default = Surface;


}),
"80822": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _utils = __webpack_require__(68784);
var _theming = __webpack_require__(10968);
var version = _reactnative.NativeModules.PlatformConstants ? _reactnative.NativeModules.PlatformConstants.reactNativeVersion : undefined;
/**
 * Switch is a visual toggle between two mutually exclusive states — on and off.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Switch } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);
 *
 *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);
 *
 *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;
 * };
 *
 * export default MyComponent;
 * ```
 */ var Switch = function(_param) {
    var value = _param.value, disabled = _param.disabled, onValueChange = _param.onValueChange, color = _param.color, themeOverrides = _param.theme, rest = _object_without_properties_loose._(_param, [
        "value",
        "disabled",
        "onValueChange",
        "color",
        "theme"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _getSwitchColor = (0, _utils.getSwitchColor)({
        theme: theme,
        disabled: disabled,
        value: value,
        color: color
    }), checkedColor = _getSwitchColor.checkedColor, onTintColor = _getSwitchColor.onTintColor, thumbTintColor = _getSwitchColor.thumbTintColor;
    var props = version && version.major === 0 && version.minor <= 56 ? {
        onTintColor: onTintColor,
        thumbTintColor: thumbTintColor
    } : _reactnative.Platform.OS === 'web' ? {
        activeTrackColor: onTintColor,
        thumbColor: thumbTintColor,
        activeThumbColor: checkedColor
    } : {
        thumbColor: thumbTintColor,
        trackColor: {
            "true": onTintColor,
            "false": onTintColor
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Switch, _extends._({
        value: value,
        disabled: disabled,
        onValueChange: disabled ? undefined : onValueChange
    }, props, rest));
};
var _default = Switch;


}),
"6168": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "Outline", ({
    enumerable: true,
    get: function() {
        return Outline;
    }
}));
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var Outline = function(param) {
    var isV3 = param.isV3, label = param.label, activeColor = param.activeColor, backgroundColor = param.backgroundColor, hasActiveOutline = param.hasActiveOutline, focused = param.focused, outlineColor = param.outlineColor, roundness = param.roundness, style = param.style;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
        testID: "text-input-outline",
        pointerEvents: "none",
        style: [
            styles.outline,
            !label && styles.noLabelOutline,
            // eslint-disable-next-line react-native/no-inline-styles
            {
                backgroundColor: backgroundColor,
                borderRadius: roundness,
                borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,
                borderColor: hasActiveOutline ? activeColor : outlineColor
            },
            style
        ]
    });
};
var styles = _reactnative.StyleSheet.create({
    outline: {
        position: 'absolute',
        left: 0,
        right: 0,
        top: 6,
        bottom: 0
    },
    noLabelOutline: {
        top: 0
    }
});


}),
"5456": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "Underline", ({
    enumerable: true,
    get: function() {
        return Underline;
    }
}));
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _theming = __webpack_require__(10968);
var Underline = function(param) {
    var parentState = param.parentState, error = param.error, colors = param.colors, activeColor = param.activeColor, underlineColorCustom = param.underlineColorCustom, hasActiveOutline = param.hasActiveOutline, style = param.style, themeOverrides = param.theme;
    var isV3 = (0, _theming.useInternalTheme)(themeOverrides).isV3;
    var backgroundColor = parentState.focused ? activeColor : underlineColorCustom;
    if (error) backgroundColor = colors == null ? void 0 : colors.error;
    var activeScale = isV3 ? 2 : 1;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
        testID: "text-input-underline",
        style: [
            styles.underline,
            isV3 && styles.md3Underline,
            {
                backgroundColor: backgroundColor,
                // Underlines is thinner when input is not focused
                transform: [
                    {
                        scaleY: (isV3 ? hasActiveOutline : parentState.focused) ? activeScale : 0.5
                    }
                ]
            },
            style
        ]
    });
};
var styles = _reactnative.StyleSheet.create({
    underline: {
        position: 'absolute',
        left: 0,
        right: 0,
        bottom: 0,
        height: 2,
        zIndex: 1
    },
    md3Underline: {
        height: 1
    }
});


}),
"25335": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    getAdornmentConfig: function() {
        return getAdornmentConfig;
    },
    getAdornmentStyleAdjustmentForNativeInput: function() {
        return getAdornmentStyleAdjustmentForNativeInput;
    }
});
var _define_property = __webpack_require__(11649);
var _extends = __webpack_require__(88410);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _enums = __webpack_require__(20628);
var _TextInputAffix = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(22642));
var _TextInputIcon = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(91186));
var _helpers = __webpack_require__(28227);
function getAdornmentConfig(param) {
    var left = param.left, right = param.right;
    var adornmentConfig = [];
    if (left || right) {
        [
            {
                side: _enums.AdornmentSide.Left,
                adornment: left
            },
            {
                side: _enums.AdornmentSide.Right,
                adornment: right
            }
        ].forEach(function(param) {
            var side = param.side, adornment = param.adornment;
            if (adornment && /*#__PURE__*/ _react.default.isValidElement(adornment)) {
                var type;
                if (adornment.type === _TextInputAffix.default) {
                    type = _enums.AdornmentType.Affix;
                } else if (adornment.type === _TextInputIcon.default) {
                    type = _enums.AdornmentType.Icon;
                }
                adornmentConfig.push({
                    side: side,
                    type: type
                });
            }
        });
    }
    return adornmentConfig;
}
function getAdornmentStyleAdjustmentForNativeInput(param) {
    var adornmentConfig = param.adornmentConfig, leftAffixWidth = param.leftAffixWidth, rightAffixWidth = param.rightAffixWidth, paddingHorizontal = param.paddingHorizontal, _param_inputOffset = param.inputOffset, inputOffset = _param_inputOffset === void 0 ? 0 : _param_inputOffset, mode = param.mode, isV3 = param.isV3;
    var _getConstants = (0, _helpers.getConstants)(isV3), OUTLINED_INPUT_OFFSET = _getConstants.OUTLINED_INPUT_OFFSET, ADORNMENT_OFFSET = _getConstants.ADORNMENT_OFFSET;
    if (adornmentConfig.length) {
        var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(function(param) {
            var type = param.type, side = param.side;
            var isLeftSide = side === _enums.AdornmentSide.Left;
            var inputModeAdornemntOffset = mode === _enums.InputMode.Outlined ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET : ADORNMENT_OFFSET;
            var paddingKey = "padding" + captalize(side);
            var affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;
            var padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;
            var offset = affixWidth + padding;
            var isAffix = type === _enums.AdornmentType.Affix;
            var marginKey = "margin" + captalize(side);
            var _obj;
            return _obj = {}, _define_property._(_obj, marginKey, isAffix ? 0 : offset), _define_property._(_obj, paddingKey, isAffix ? offset : inputOffset), _obj;
        });
        var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(function(mergedStyles, currentStyle) {
            return _extends._({}, mergedStyles, currentStyle);
        }, {});
        return allStyleAdjustmentsMerged;
    } else {
        return [
            {}
        ];
    }
}
var captalize = function(text) {
    return text.charAt(0).toUpperCase() + text.slice(1);
};
var TextInputAdornment = function(param) {
    var adornmentConfig = param.adornmentConfig, left = param.left, right = param.right, onAffixChange = param.onAffixChange, textStyle = param.textStyle, visible = param.visible, topPosition = param.topPosition, isTextInputFocused = param.isTextInputFocused, forceFocus = param.forceFocus, paddingHorizontal = param.paddingHorizontal, maxFontSizeMultiplier = param.maxFontSizeMultiplier, theme = param.theme, disabled = param.disabled;
    if (adornmentConfig.length) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
            children: adornmentConfig.map(function(param) {
                var type = param.type, side = param.side;
                var inputAdornmentComponent;
                if (side === _enums.AdornmentSide.Left) {
                    inputAdornmentComponent = left;
                } else if (side === _enums.AdornmentSide.Right) {
                    inputAdornmentComponent = right;
                }
                var commonProps = {
                    side: side,
                    testID: side + "-" + type + "-adornment",
                    isTextInputFocused: isTextInputFocused,
                    paddingHorizontal: paddingHorizontal,
                    disabled: disabled
                };
                if (type === _enums.AdornmentType.Icon) {
                    return /*#__PURE__*/ (0, _react.createElement)(_TextInputIcon.IconAdornment, _extends._({}, commonProps, {
                        theme: theme,
                        key: side,
                        icon: inputAdornmentComponent,
                        topPosition: topPosition[_enums.AdornmentType.Icon],
                        forceFocus: forceFocus
                    }));
                } else if (type === _enums.AdornmentType.Affix) {
                    return /*#__PURE__*/ (0, _react.createElement)(_TextInputAffix.AffixAdornment, _extends._({}, commonProps, {
                        key: side,
                        topPosition: topPosition[_enums.AdornmentType.Affix][side],
                        affix: inputAdornmentComponent,
                        textStyle: textStyle,
                        onLayout: onAffixChange[side],
                        visible: visible,
                        maxFontSizeMultiplier: maxFontSizeMultiplier
                    }));
                } else {
                    return null;
                }
            })
        });
    } else {
        return null;
    }
};
var _default = TextInputAdornment;


}),
"22642": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AffixAdornment: function() {
        return AffixAdornment;
    },
    TextInputAffix: function() {
        return TextInputAffix;
    },
    default: function() {
        return _default;
    }
});
var _define_property = __webpack_require__(11649);
var _interop_require_default = __webpack_require__(60133);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _enums = __webpack_require__(20628);
var _utils = __webpack_require__(85121);
var _theming = __webpack_require__(10968);
var _helpers = __webpack_require__(28227);
var AffixContext = /*#__PURE__*/ _react.default.createContext({
    textStyle: {
        fontFamily: '',
        color: ''
    },
    topPosition: null,
    side: _enums.AdornmentSide.Left
});
var AffixAdornment = function(param) {
    var affix = param.affix, side = param.side, textStyle = param.textStyle, topPosition = param.topPosition, onLayout = param.onLayout, visible = param.visible, paddingHorizontal = param.paddingHorizontal, maxFontSizeMultiplier = param.maxFontSizeMultiplier, testID = param.testID, disabled = param.disabled;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(AffixContext.Provider, {
        value: {
            side: side,
            textStyle: textStyle,
            topPosition: topPosition,
            onLayout: onLayout,
            visible: visible,
            paddingHorizontal: paddingHorizontal,
            maxFontSizeMultiplier: maxFontSizeMultiplier,
            testID: testID,
            disabled: disabled
        },
        children: affix
    });
};
/**
 * A component to render a leading / trailing text in the TextInput
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { TextInput } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [text, setText] = React.useState('');
 *
 *   return (
 *     <TextInput
 *       mode="outlined"
 *       label="Outlined input"
 *       placeholder="Type something"
 *       right={<TextInput.Affix text="/100" />}
 *     />
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ var TextInputAffix = function(param) {
    var text = param.text, labelStyle = param.textStyle, themeOverrides = param.theme, onTextLayout = param.onLayout, onPress = param.onPress, _param_accessibilityLabel = param.accessibilityLabel, accessibilityLabel = _param_accessibilityLabel === void 0 ? text : _param_accessibilityLabel;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var AFFIX_OFFSET = (0, _helpers.getConstants)(theme.isV3).AFFIX_OFFSET;
    var _React_useContext = _react.default.useContext(AffixContext), textStyle = _React_useContext.textStyle, onLayout = _React_useContext.onLayout, topPosition = _React_useContext.topPosition, side = _React_useContext.side, visible = _React_useContext.visible, paddingHorizontal = _React_useContext.paddingHorizontal, maxFontSizeMultiplier = _React_useContext.maxFontSizeMultiplier, testID = _React_useContext.testID, disabled = _React_useContext.disabled;
    var offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;
    var style = _define_property._({
        top: topPosition
    }, side, offset);
    var textColor = (0, _utils.getTextColor)({
        theme: theme,
        disabled: disabled
    });
    var content = /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Text, {
        maxFontSizeMultiplier: maxFontSizeMultiplier,
        style: [
            {
                color: textColor
            },
            textStyle,
            labelStyle
        ],
        onLayout: onTextLayout,
        testID: "" + testID + "-text",
        children: text
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
        style: [
            styles.container,
            style,
            {
                opacity: (visible == null ? void 0 : visible.interpolate({
                    inputRange: [
                        0,
                        1
                    ],
                    outputRange: [
                        1,
                        0
                    ]
                })) || 1
            }
        ],
        onLayout: onLayout,
        testID: testID,
        children: onPress ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Pressable, {
            onPress: onPress,
            accessibilityRole: "button",
            accessibilityLabel: accessibilityLabel,
            children: content
        }) : content
    });
};
TextInputAffix.displayName = 'TextInput.Affix';
var styles = _reactnative.StyleSheet.create({
    container: {
        position: 'absolute',
        justifyContent: 'center',
        alignItems: 'center'
    }
});
var _default = TextInputAffix;


}),
"91186": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    IconAdornment: function() {
        return IconAdornment;
    },
    default: function() {
        return _default;
    }
});
var _define_property = __webpack_require__(11649);
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _utils = __webpack_require__(85121);
var _theming = __webpack_require__(10968);
var _IconButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86395));
var _constants = __webpack_require__(74860);
var _helpers = __webpack_require__(28227);
var StyleContext = /*#__PURE__*/ _react.default.createContext({
    style: {},
    isTextInputFocused: false,
    forceFocus: function() {},
    testID: ''
});
var IconAdornment = function(param) {
    var icon = param.icon, topPosition = param.topPosition, side = param.side, isTextInputFocused = param.isTextInputFocused, forceFocus = param.forceFocus, testID = param.testID, themeOverrides = param.theme, disabled = param.disabled;
    var isV3 = (0, _theming.useInternalTheme)(themeOverrides).isV3;
    var ICON_OFFSET = (0, _helpers.getConstants)(isV3).ICON_OFFSET;
    var style = _define_property._({
        top: topPosition
    }, side, ICON_OFFSET);
    var contextState = {
        style: style,
        isTextInputFocused: isTextInputFocused,
        forceFocus: forceFocus,
        testID: testID,
        disabled: disabled
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(StyleContext.Provider, {
        value: contextState,
        children: icon
    });
};
/**
 * A component to render a leading / trailing icon in the TextInput
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { TextInput } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [text, setText] = React.useState('');
 *
 *   return (
 *     <TextInput
 *       label="Password"
 *       secureTextEntry
 *       right={<TextInput.Icon icon="eye" />}
 *     />
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 */ var TextInputIcon = function(_param) {
    var icon = _param.icon, onPress = _param.onPress, _param_forceTextInputFocus = _param.forceTextInputFocus, forceTextInputFocus = _param_forceTextInputFocus === void 0 ? true : _param_forceTextInputFocus, customColor = _param.color, themeOverrides = _param.theme, rippleColor = _param.rippleColor, rest = _object_without_properties_loose._(_param, [
        "icon",
        "onPress",
        "forceTextInputFocus",
        "color",
        "theme",
        "rippleColor"
    ]);
    var _React_useContext = _react.default.useContext(StyleContext), style = _React_useContext.style, isTextInputFocused = _React_useContext.isTextInputFocused, forceFocus = _React_useContext.forceFocus, testID = _React_useContext.testID, disabled = _React_useContext.disabled;
    var onPressWithFocusControl = _react.default.useCallback(function(e) {
        if (forceTextInputFocus && !isTextInputFocused) {
            forceFocus();
        }
        onPress == null ? void 0 : onPress(e);
    }, [
        forceTextInputFocus,
        forceFocus,
        isTextInputFocused,
        onPress
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var iconColor = (0, _utils.getIconColor)({
        theme: theme,
        disabled: disabled,
        isTextInputFocused: isTextInputFocused,
        customColor: customColor
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
        style: [
            styles.container,
            style
        ],
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_IconButton.default, _extends._({
            icon: icon,
            style: styles.iconButton,
            size: _constants.ICON_SIZE,
            onPress: onPressWithFocusControl,
            iconColor: iconColor,
            testID: testID,
            theme: themeOverrides,
            rippleColor: rippleColor
        }, rest))
    });
};
TextInputIcon.displayName = 'TextInput.Icon';
var styles = _reactnative.StyleSheet.create({
    container: {
        position: 'absolute',
        width: _constants.ICON_SIZE,
        height: _constants.ICON_SIZE,
        justifyContent: 'center',
        alignItems: 'center'
    },
    iconButton: {
        margin: 0
    }
});
var _default = TextInputIcon;


}),
"20628": (function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AdornmentSide: function() {
        return AdornmentSide;
    },
    AdornmentType: function() {
        return AdornmentType;
    },
    InputMode: function() {
        return InputMode;
    }
});
var AdornmentType = /*#__PURE__*/ function(AdornmentType) {
    AdornmentType["Icon"] = "icon";
    AdornmentType["Affix"] = "affix";
    return AdornmentType;
}({});
var AdornmentSide = /*#__PURE__*/ function(AdornmentSide) {
    AdornmentSide["Right"] = "right";
    AdornmentSide["Left"] = "left";
    return AdornmentSide;
}({});
var InputMode = /*#__PURE__*/ function(InputMode) {
    InputMode["Outlined"] = "outlined";
    InputMode["Flat"] = "flat";
    return InputMode;
}({});


}),
"93587": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _AnimatedText = /*#__PURE__*/ _interop_require_default._(__webpack_require__(24904));
var _helpers = __webpack_require__(28227);
var InputLabel = function(props) {
    var labeled = props.labeled, wiggle = props.wiggle, error = props.error, focused = props.focused, opacity = props.opacity, labelLayoutWidth = props.labelLayoutWidth, labelLayoutHeight = props.labelLayoutHeight, labelBackground = props.labelBackground, label = props.label, labelError = props.labelError, onLayoutAnimatedText = props.onLayoutAnimatedText, onLabelTextLayout = props.onLabelTextLayout, hasActiveOutline = props.hasActiveOutline, activeColor = props.activeColor, placeholderStyle = props.placeholderStyle, baseLabelTranslateX = props.baseLabelTranslateX, baseLabelTranslateY = props.baseLabelTranslateY, font = props.font, fontSize = props.fontSize, lineHeight = props.lineHeight, fontWeight = props.fontWeight, placeholderOpacity = props.placeholderOpacity, wiggleOffsetX = props.wiggleOffsetX, labelScale = props.labelScale, topPosition = props.topPosition, paddingLeft = props.paddingLeft, paddingRight = props.paddingRight, backgroundColor = props.backgroundColor, roundness = props.roundness, placeholderColor = props.placeholderColor, errorColor = props.errorColor, labelTranslationXOffset = props.labelTranslationXOffset, maxFontSizeMultiplier = props.maxFontSizeMultiplier, testID = props.testID, isV3 = props.isV3, inputContainerLayout = props.inputContainerLayout, scaledLabel = props.scaledLabel;
    var INPUT_PADDING_HORIZONTAL = (0, _helpers.getConstants)(isV3).INPUT_PADDING_HORIZONTAL;
    var width = (0, _reactnative.useWindowDimensions)().width;
    var paddingOffset = paddingLeft && paddingRight ? {
        paddingLeft: paddingLeft,
        paddingRight: paddingRight
    } : {};
    var labelTranslationX = {
        transform: [
            {
                // Offset label scale since RN doesn't support transform origin
                translateX: labeled.interpolate({
                    inputRange: [
                        0,
                        1
                    ],
                    outputRange: [
                        baseLabelTranslateX,
                        labelTranslationXOffset || 0
                    ]
                })
            }
        ]
    };
    var labelStyle = _extends._({}, font, {
        fontSize: fontSize,
        lineHeight: lineHeight,
        fontWeight: fontWeight,
        opacity: labeled.interpolate({
            inputRange: [
                0,
                1
            ],
            outputRange: [
                hasActiveOutline ? 1 : 0,
                0
            ]
        }),
        transform: [
            {
                // Wiggle the label when there's an error
                translateX: wiggle ? error.interpolate({
                    inputRange: [
                        0,
                        0.5,
                        1
                    ],
                    outputRange: [
                        0,
                        wiggleOffsetX,
                        0
                    ]
                }) : 0
            },
            {
                // Move label to top
                translateY: baseLabelTranslateY !== 0 ? labeled.interpolate({
                    inputRange: [
                        0,
                        1
                    ],
                    outputRange: [
                        baseLabelTranslateY,
                        0
                    ]
                }) : 0
            },
            {
                // Make label smaller
                scale: labelScale !== 0 ? labeled.interpolate({
                    inputRange: [
                        0,
                        1
                    ],
                    outputRange: [
                        labelScale,
                        1
                    ]
                }) : labeled
            }
        ]
    });
    var labelWidth = (inputContainerLayout.width + INPUT_PADDING_HORIZONTAL / 2) / (scaledLabel ? labelScale : 1);
    var commonStyles = [
        placeholderStyle,
        {
            top: topPosition
        },
        {
            maxWidth: labelWidth
        },
        labelStyle,
        paddingOffset || {}
    ];
    var textColor = labelError && errorColor ? errorColor : placeholderColor;
    return(// Position colored placeholder and gray placeholder on top of each other and crossfade them
    // This gives the effect of animating the color, but allows us to use native driver
    /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
        pointerEvents: "none",
        style: [
            _reactnative.StyleSheet.absoluteFill,
            styles.overflow
        ],
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
            pointerEvents: "none",
            style: [
                _reactnative.StyleSheet.absoluteFill,
                styles.labelContainer,
                _reactnative.Platform.OS !== 'web' && {
                    width: width
                },
                {
                    opacity: opacity
                },
                labelTranslationX
            ],
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                style: {
                    width: labelWidth
                },
                children: [
                    labelBackground == null ? void 0 : labelBackground({
                        labeled: labeled,
                        labelLayoutWidth: labelLayoutWidth,
                        labelLayoutHeight: labelLayoutHeight,
                        labelStyle: labelStyle,
                        placeholderStyle: placeholderStyle,
                        baseLabelTranslateX: baseLabelTranslateX,
                        topPosition: topPosition,
                        label: label,
                        backgroundColor: backgroundColor,
                        roundness: roundness,
                        maxFontSizeMultiplier: maxFontSizeMultiplier,
                        testID: testID
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_AnimatedText.default, {
                        variant: "bodySmall",
                        onLayout: onLayoutAnimatedText,
                        onTextLayout: onLabelTextLayout,
                        style: [
                            commonStyles,
                            {
                                color: activeColor
                            }
                        ],
                        numberOfLines: 1,
                        maxFontSizeMultiplier: maxFontSizeMultiplier,
                        testID: "" + testID + "-label-active",
                        children: label
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_AnimatedText.default, {
                        variant: focused ? 'bodyLarge' : 'bodySmall',
                        style: [
                            commonStyles,
                            {
                                color: textColor,
                                opacity: placeholderOpacity
                            }
                        ],
                        numberOfLines: 1,
                        maxFontSizeMultiplier: maxFontSizeMultiplier,
                        testID: "" + testID + "-label-inactive",
                        children: label
                    })
                ]
            })
        })
    }));
};
var styles = _reactnative.StyleSheet.create({
    overflow: {
        overflow: 'hidden'
    },
    labelContainer: {
        zIndex: 3
    }
});
var _default = /*#__PURE__*/ _react.default.memo(InputLabel);


}),
"40376": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _to_consumable_array = __webpack_require__(2670);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _AnimatedText = /*#__PURE__*/ _interop_require_default._(__webpack_require__(24904));
var LabelBackground = function(param) {
    var labeled = param.labeled, labelLayoutWidth = param.labelLayoutWidth, labelLayoutHeight = param.labelLayoutHeight, placeholderStyle = param.placeholderStyle, baseLabelTranslateX = param.baseLabelTranslateX, topPosition = param.topPosition, backgroundColor = param.backgroundColor, roundness = param.roundness, labelStyle = param.labelStyle, maxFontSizeMultiplier = param.maxFontSizeMultiplier, testID = param.testID;
    var opacity = labeled.interpolate({
        inputRange: [
            0,
            0.6
        ],
        outputRange: [
            1,
            0
        ]
    });
    var labelTranslationX = {
        translateX: labeled.interpolate({
            inputRange: [
                0,
                1
            ],
            outputRange: [
                -baseLabelTranslateX,
                0
            ]
        })
    };
    var labelTextScaleY = {
        scaleY: labeled.interpolate({
            inputRange: [
                0,
                1
            ],
            outputRange: [
                0.2,
                1
            ]
        })
    };
    var labelTextTransform = _to_consumable_array._(labelStyle.transform).concat([
        labelTextScaleY
    ]);
    var isRounded = roundness > 6;
    var roundedEdgeCover = isRounded ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.View, {
        pointerEvents: "none",
        style: [
            _reactnative.StyleSheet.absoluteFill,
            styles.view,
            {
                backgroundColor: backgroundColor,
                maxHeight: Math.max(roundness / 3, 2),
                bottom: Math.max(roundness, 2),
                transform: [
                    labelTranslationX
                ],
                opacity: opacity
            }
        ]
    }, "labelBackground-view") : null;
    return [
        roundedEdgeCover,
        /*#__PURE__*/ (0, _jsxruntime.jsx)(_AnimatedText.default, {
            testID: "" + testID + "-label-background",
            style: [
                placeholderStyle,
                labelStyle,
                styles.outlinedLabel,
                {
                    top: topPosition + 1,
                    width: labelLayoutWidth - placeholderStyle.paddingHorizontal,
                    height: labelLayoutHeight,
                    backgroundColor: backgroundColor,
                    opacity: opacity,
                    transform: labelTextTransform
                }
            ],
            numberOfLines: 1,
            maxFontSizeMultiplier: maxFontSizeMultiplier
        }, "labelBackground-text")
    ];
};
var _default = LabelBackground;
var styles = _reactnative.StyleSheet.create({
    view: {
        position: 'absolute',
        top: 6,
        left: 10,
        width: 12
    },
    // eslint-disable-next-line react-native/no-color-literals
    outlinedLabel: {
        position: 'absolute',
        left: 8,
        paddingHorizontal: 0,
        color: 'transparent'
    }
});


}),
"68568": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _TextInputAffix = /*#__PURE__*/ _interop_require_default._(__webpack_require__(22642));
var _TextInputIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91186));
var _TextInputFlat = /*#__PURE__*/ _interop_require_default._(__webpack_require__(60483));
var _TextInputOutlined = /*#__PURE__*/ _interop_require_default._(__webpack_require__(36888));
var _theming = __webpack_require__(10968);
var _forwardRef = __webpack_require__(45835);
var _roundLayoutSize = __webpack_require__(90674);
var BLUR_ANIMATION_DURATION = 180;
var FOCUS_ANIMATION_DURATION = 150;
var DefaultRenderer = function(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.TextInput, _extends._({}, props));
};
/**
 * A component to allow users to input text.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { TextInput } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [text, setText] = React.useState("");
 *
 *   return (
 *     <TextInput
 *       label="Email"
 *       value={text}
 *       onChangeText={text => setText(text)}
 *     />
 *   );
 * };
 *
 * export default MyComponent;
 * ```
 *
 * @extends TextInput props https://reactnative.dev/docs/textinput#props
 */ var TextInput = (0, _forwardRef.forwardRef)(function(_param, ref) {
    var _param_mode = _param.mode, mode = _param_mode === void 0 ? 'flat' : _param_mode, _param_dense = _param.dense, dense = _param_dense === void 0 ? false : _param_dense, _param_disabled = _param.disabled, disabled = _param_disabled === void 0 ? false : _param_disabled, tmp = _param.error, errorProp = tmp === void 0 ? false : tmp, _param_multiline = _param.multiline, multiline = _param_multiline === void 0 ? false : _param_multiline, _param_editable = _param.editable, editable = _param_editable === void 0 ? true : _param_editable, contentStyle = _param.contentStyle, _param_render = _param.render, render = _param_render === void 0 ? DefaultRenderer : _param_render, themeOverrides = _param.theme, rest = _object_without_properties_loose._(_param, [
        "mode",
        "dense",
        "disabled",
        "error",
        "multiline",
        "editable",
        "contentStyle",
        "render",
        "theme"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var isControlled = rest.value !== undefined;
    var validInputValue = isControlled ? rest.value : rest.defaultValue;
    var _React_useRef = _react.useRef(new _reactnative.Animated.Value(validInputValue ? 0 : 1)), labeled = _React_useRef.current;
    var _React_useRef1 = _react.useRef(new _reactnative.Animated.Value(errorProp ? 1 : 0)), error = _React_useRef1.current;
    var _React_useState = _sliced_to_array._(_react.useState(false), 2), focused = _React_useState[0], setFocused = _React_useState[1];
    var _React_useState1 = _sliced_to_array._(_react.useState(' '), 2), placeholder = _React_useState1[0], setPlaceholder = _React_useState1[1];
    var _React_useState2 = _sliced_to_array._(_react.useState(validInputValue), 2), uncontrolledValue = _React_useState2[0], setUncontrolledValue = _React_useState2[1];
    // Use value from props instead of local state when input is controlled
    var value = isControlled ? rest.value : uncontrolledValue;
    var _React_useState3 = _sliced_to_array._(_react.useState({
        width: 33
    }), 2), labelTextLayout = _React_useState3[0], setLabelTextLayout = _React_useState3[1];
    var _React_useState4 = _sliced_to_array._(_react.useState({
        width: 65
    }), 2), inputContainerLayout = _React_useState4[0], setInputContainerLayout = _React_useState4[1];
    var _React_useState5 = _sliced_to_array._(_react.useState({
        measured: false,
        width: 0,
        height: 0
    }), 2), labelLayout = _React_useState5[0], setLabelLayout = _React_useState5[1];
    var _React_useState6 = _sliced_to_array._(_react.useState({
        width: null,
        height: null
    }), 2), leftLayout = _React_useState6[0], setLeftLayout = _React_useState6[1];
    var _React_useState7 = _sliced_to_array._(_react.useState({
        width: null,
        height: null
    }), 2), rightLayout = _React_useState7[0], setRightLayout = _React_useState7[1];
    var timer = _react.useRef();
    var root = _react.useRef();
    var scale = theme.animation.scale;
    _react.useImperativeHandle(ref, function() {
        return {
            focus: function() {
                var _root_current;
                return (_root_current = root.current) == null ? void 0 : _root_current.focus();
            },
            clear: function() {
                var _root_current;
                return (_root_current = root.current) == null ? void 0 : _root_current.clear();
            },
            setNativeProps: function(args) {
                var _root_current;
                return (_root_current = root.current) == null ? void 0 : _root_current.setNativeProps(args);
            },
            isFocused: function() {
                var _root_current;
                return ((_root_current = root.current) == null ? void 0 : _root_current.isFocused()) || false;
            },
            blur: function() {
                var _root_current;
                return (_root_current = root.current) == null ? void 0 : _root_current.blur();
            },
            forceFocus: function() {
                var _root_current;
                return (_root_current = root.current) == null ? void 0 : _root_current.focus();
            }
        };
    });
    _react.useEffect(function() {
        // When the input has an error, we wiggle the label and apply error styles
        if (errorProp) {
            // show error
            _reactnative.Animated.timing(error, {
                toValue: 1,
                duration: FOCUS_ANIMATION_DURATION * scale,
                // To prevent this - https://github.com/callstack/react-native-paper/issues/941
                useNativeDriver: true
            }).start();
        } else {
            // hide error
            {
                _reactnative.Animated.timing(error, {
                    toValue: 0,
                    duration: BLUR_ANIMATION_DURATION * scale,
                    // To prevent this - https://github.com/callstack/react-native-paper/issues/941
                    useNativeDriver: true
                }).start();
            }
        }
    }, [
        errorProp,
        scale,
        error
    ]);
    _react.useEffect(function() {
        // Show placeholder text only if the input is focused, or there's no label
        // We don't show placeholder if there's a label because the label acts as placeholder
        // When focused, the label moves up, so we can show a placeholder
        if (focused || !rest.label) {
            // If the user wants to use the contextMenu, when changing the placeholder, the contextMenu is closed
            // This is a workaround to mitigate this behavior in scenarios where the placeholder is not specified.
            if (rest.placeholder) {
                // Set the placeholder in a delay to offset the label animation
                // If we show it immediately, they'll overlap and look ugly
                timer.current = setTimeout(function() {
                    return setPlaceholder(rest.placeholder);
                }, 50);
            }
        } else {
            // hidePlaceholder
            // Issue: https://github.com/callstack/react-native-paper/issues/3138
            // Description:   Changing the placeholder text value dynamically,
            //                within multiline input on iOS, doesn't work properly –
            //                the placeholder is not displayed initially.
            // Root cause:    Placeholder initial value, which has length 0.
            // More context:  The issue was also reproduced in react-native, using its own TextInput.
            // Workaround:    Set an empty space character in the default value.
            setPlaceholder(' ');
        }
        return function() {
            if (timer.current) {
                clearTimeout(timer.current);
            }
        };
    }, [
        focused,
        rest.label,
        rest.placeholder
    ]);
    _react.useEffect(function() {
        labeled.stopAnimation();
        // The label should be minimized if the text input is focused, or has text
        // In minimized mode, the label moves up and becomes small
        // workaround for animated regression for react native > 0.61
        // https://github.com/callstack/react-native-paper/pull/1440
        if (value || focused) {
            // minimize label
            _reactnative.Animated.timing(labeled, {
                toValue: 0,
                duration: BLUR_ANIMATION_DURATION * scale,
                // To prevent this - https://github.com/callstack/react-native-paper/issues/941
                useNativeDriver: true
            }).start();
        } else {
            // restore label
            _reactnative.Animated.timing(labeled, {
                toValue: 1,
                duration: FOCUS_ANIMATION_DURATION * scale,
                // To prevent this - https://github.com/callstack/react-native-paper/issues/941
                useNativeDriver: true
            }).start();
        }
    }, [
        focused,
        value,
        labeled,
        scale
    ]);
    var onLeftAffixLayoutChange = _react.useCallback(function(event) {
        var height = (0, _roundLayoutSize.roundLayoutSize)(event.nativeEvent.layout.height);
        var width = (0, _roundLayoutSize.roundLayoutSize)(event.nativeEvent.layout.width);
        if (width !== leftLayout.width || height !== leftLayout.height) {
            setLeftLayout({
                width: width,
                height: height
            });
        }
    }, [
        leftLayout.height,
        leftLayout.width
    ]);
    var onRightAffixLayoutChange = _react.useCallback(function(event) {
        var width = (0, _roundLayoutSize.roundLayoutSize)(event.nativeEvent.layout.width);
        var height = (0, _roundLayoutSize.roundLayoutSize)(event.nativeEvent.layout.height);
        if (width !== rightLayout.width || height !== rightLayout.height) {
            setRightLayout({
                width: width,
                height: height
            });
        }
    }, [
        rightLayout.height,
        rightLayout.width
    ]);
    var handleFocus = function(args) {
        if (disabled || !editable) {
            return;
        }
        setFocused(true);
        rest.onFocus == null ? void 0 : rest.onFocus.call(rest, args);
    };
    var handleBlur = function(args) {
        if (!editable) {
            return;
        }
        setFocused(false);
        rest.onBlur == null ? void 0 : rest.onBlur.call(rest, args);
    };
    var handleChangeText = function(value) {
        if (!editable || disabled) {
            return;
        }
        if (!isControlled) {
            // Keep track of value in local state when input is not controlled
            setUncontrolledValue(value);
        }
        rest.onChangeText == null ? void 0 : rest.onChangeText.call(rest, value);
    };
    var handleLayoutAnimatedText = _react.useCallback(function(e) {
        var width = (0, _roundLayoutSize.roundLayoutSize)(e.nativeEvent.layout.width);
        var height = (0, _roundLayoutSize.roundLayoutSize)(e.nativeEvent.layout.height);
        if (width !== labelLayout.width || height !== labelLayout.height) {
            setLabelLayout({
                width: width,
                height: height,
                measured: true
            });
        }
    }, [
        labelLayout.height,
        labelLayout.width
    ]);
    var handleLabelTextLayout = _react.useCallback(function(param) {
        var nativeEvent = param.nativeEvent;
        setLabelTextLayout({
            width: nativeEvent.lines.reduce(function(acc, line) {
                return acc + Math.ceil(line.width);
            }, 0)
        });
    }, []);
    var handleInputContainerLayout = _react.useCallback(function(param) {
        var layout = param.nativeEvent.layout;
        setInputContainerLayout({
            width: layout.width
        });
    }, []);
    var forceFocus = _react.useCallback(function() {
        var _root_current;
        return (_root_current = root.current) == null ? void 0 : _root_current.focus();
    }, []);
    var _rest_maxFontSizeMultiplier = rest.maxFontSizeMultiplier, maxFontSizeMultiplier = _rest_maxFontSizeMultiplier === void 0 ? 1.5 : _rest_maxFontSizeMultiplier;
    var scaledLabel = !!(value || focused);
    if (mode === 'outlined') {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextInputOutlined.default, _extends._({
            dense: dense,
            disabled: disabled,
            error: errorProp,
            multiline: multiline,
            editable: editable,
            render: render
        }, rest, {
            theme: theme,
            value: value,
            parentState: {
                labeled: labeled,
                error: error,
                focused: focused,
                placeholder: placeholder,
                value: value,
                labelTextLayout: labelTextLayout,
                labelLayout: labelLayout,
                leftLayout: leftLayout,
                rightLayout: rightLayout,
                inputContainerLayout: inputContainerLayout
            },
            innerRef: function(ref) {
                root.current = ref;
            },
            onFocus: handleFocus,
            forceFocus: forceFocus,
            onBlur: handleBlur,
            onChangeText: handleChangeText,
            onLayoutAnimatedText: handleLayoutAnimatedText,
            onInputLayout: handleInputContainerLayout,
            onLabelTextLayout: handleLabelTextLayout,
            onLeftAffixLayoutChange: onLeftAffixLayoutChange,
            onRightAffixLayoutChange: onRightAffixLayoutChange,
            maxFontSizeMultiplier: maxFontSizeMultiplier,
            contentStyle: contentStyle,
            scaledLabel: scaledLabel
        }));
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextInputFlat.default, _extends._({
        dense: dense,
        disabled: disabled,
        error: errorProp,
        multiline: multiline,
        editable: editable,
        render: render
    }, rest, {
        theme: theme,
        value: value,
        parentState: {
            labeled: labeled,
            error: error,
            focused: focused,
            placeholder: placeholder,
            value: value,
            labelTextLayout: labelTextLayout,
            labelLayout: labelLayout,
            leftLayout: leftLayout,
            rightLayout: rightLayout,
            inputContainerLayout: inputContainerLayout
        },
        innerRef: function(ref) {
            root.current = ref;
        },
        onFocus: handleFocus,
        forceFocus: forceFocus,
        onBlur: handleBlur,
        onInputLayout: handleInputContainerLayout,
        onChangeText: handleChangeText,
        onLayoutAnimatedText: handleLayoutAnimatedText,
        onLabelTextLayout: handleLabelTextLayout,
        onLeftAffixLayoutChange: onLeftAffixLayoutChange,
        onRightAffixLayoutChange: onRightAffixLayoutChange,
        maxFontSizeMultiplier: maxFontSizeMultiplier,
        contentStyle: contentStyle,
        scaledLabel: scaledLabel
    }));
});
// @component ./Adornment/TextInputIcon.tsx
TextInput.Icon = _TextInputIcon.default;
// @component ./Adornment/TextInputAffix.tsx
// @ts-ignore Types of property 'theme' are incompatible.
TextInput.Affix = _TextInputAffix.default;
var _default = TextInput;


}),
"60483": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _define_property = __webpack_require__(11649);
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _Underline = __webpack_require__(5456);
var _enums = __webpack_require__(20628);
var _TextInputAdornment = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(25335));
var _constants = __webpack_require__(74860);
var _helpers = __webpack_require__(28227);
var _InputLabel = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93587));
var TextInputFlat = function(_param) {
    var _param_disabled = _param.disabled, disabled = _param_disabled === void 0 ? false : _param_disabled, _param_editable = _param.editable, editable = _param_editable === void 0 ? true : _param_editable, label = _param.label, _param_error = _param.error, error = _param_error === void 0 ? false : _param_error, customSelectionColor = _param.selectionColor, cursorColor = _param.cursorColor, underlineColor = _param.underlineColor, underlineStyle = _param.underlineStyle, activeUnderlineColor = _param.activeUnderlineColor, textColor = _param.textColor, dense = _param.dense, style = _param.style, theme = _param.theme, _param_render = _param.render, render = _param_render === void 0 ? function(props) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.TextInput, _extends._({}, props));
    } : _param_render, _param_multiline = _param.multiline, multiline = _param_multiline === void 0 ? false : _param_multiline, parentState = _param.parentState, innerRef = _param.innerRef, onFocus = _param.onFocus, forceFocus = _param.forceFocus, onBlur = _param.onBlur, onChangeText = _param.onChangeText, onLayoutAnimatedText = _param.onLayoutAnimatedText, onLabelTextLayout = _param.onLabelTextLayout, onLeftAffixLayoutChange = _param.onLeftAffixLayoutChange, onRightAffixLayoutChange = _param.onRightAffixLayoutChange, onInputLayout = _param.onInputLayout, left = _param.left, right = _param.right, placeholderTextColor = _param.placeholderTextColor, _param_testID = _param.testID, testID = _param_testID === void 0 ? 'text-input-flat' : _param_testID, contentStyle = _param.contentStyle, scaledLabel = _param.scaledLabel, rest = _object_without_properties_loose._(_param, [
        "disabled",
        "editable",
        "label",
        "error",
        "selectionColor",
        "cursorColor",
        "underlineColor",
        "underlineStyle",
        "activeUnderlineColor",
        "textColor",
        "dense",
        "style",
        "theme",
        "render",
        "multiline",
        "parentState",
        "innerRef",
        "onFocus",
        "forceFocus",
        "onBlur",
        "onChangeText",
        "onLayoutAnimatedText",
        "onLabelTextLayout",
        "onLeftAffixLayoutChange",
        "onRightAffixLayoutChange",
        "onInputLayout",
        "left",
        "right",
        "placeholderTextColor",
        "testID",
        "contentStyle",
        "scaledLabel"
    ]);
    var isAndroid = _reactnative.Platform.OS === 'android';
    var colors = theme.colors, isV3 = theme.isV3, roundness = theme.roundness;
    var font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;
    var hasActiveOutline = parentState.focused || error;
    var _getConstants = (0, _helpers.getConstants)(isV3), LABEL_PADDING_TOP = _getConstants.LABEL_PADDING_TOP, FLAT_INPUT_OFFSET = _getConstants.FLAT_INPUT_OFFSET, MIN_HEIGHT = _getConstants.MIN_HEIGHT, MIN_WIDTH = _getConstants.MIN_WIDTH;
    var _ref = _reactnative.StyleSheet.flatten(style) || {}, fontSizeStyle = _ref.fontSize, lineHeightStyle = _ref.lineHeight, fontWeight = _ref.fontWeight, height = _ref.height, paddingHorizontal = _ref.paddingHorizontal, textAlign = _ref.textAlign, viewStyle = _object_without_properties_loose._(_ref, [
        "fontSize",
        "lineHeight",
        "fontWeight",
        "height",
        "paddingHorizontal",
        "textAlign"
    ]);
    var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;
    var lineHeight = lineHeightStyle || (_reactnative.Platform.OS === 'web' ? fontSize * 1.2 : undefined);
    var isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';
    var adornmentConfig = (0, _TextInputAdornment.getAdornmentConfig)({
        left: left,
        right: right
    });
    var _calculateFlatInputHorizontalPadding = (0, _helpers.calculateFlatInputHorizontalPadding)({
        adornmentConfig: adornmentConfig,
        isV3: isV3
    }), paddingLeft = _calculateFlatInputHorizontalPadding.paddingLeft, paddingRight = _calculateFlatInputHorizontalPadding.paddingRight;
    if (isPaddingHorizontalPassed) {
        paddingLeft = paddingHorizontal;
        paddingRight = paddingHorizontal;
    }
    var leftLayout = parentState.leftLayout, rightLayout = parentState.rightLayout;
    var rightAffixWidth = right ? rightLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;
    var leftAffixWidth = left ? leftLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;
    var adornmentStyleAdjustmentForNativeInput = (0, _TextInputAdornment.getAdornmentStyleAdjustmentForNativeInput)({
        adornmentConfig: adornmentConfig,
        rightAffixWidth: rightAffixWidth,
        leftAffixWidth: leftAffixWidth,
        paddingHorizontal: paddingHorizontal,
        inputOffset: FLAT_INPUT_OFFSET,
        mode: _enums.InputMode.Flat,
        isV3: isV3
    });
    var _getFlatInputColors = (0, _helpers.getFlatInputColors)({
        underlineColor: underlineColor,
        activeUnderlineColor: activeUnderlineColor,
        customSelectionColor: customSelectionColor,
        textColor: textColor,
        disabled: disabled,
        error: error,
        theme: theme
    }), inputTextColor = _getFlatInputColors.inputTextColor, activeColor = _getFlatInputColors.activeColor, underlineColorCustom = _getFlatInputColors.underlineColorCustom, placeholderColor = _getFlatInputColors.placeholderColor, errorColor = _getFlatInputColors.errorColor, backgroundColor = _getFlatInputColors.backgroundColor, selectionColor = _getFlatInputColors.selectionColor;
    var containerStyle = {
        backgroundColor: backgroundColor,
        borderTopLeftRadius: theme.roundness,
        borderTopRightRadius: theme.roundness
    };
    var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;
    var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;
    var labelWidth = parentState.labelLayout.width;
    var labelHeight = parentState.labelLayout.height;
    var labelHalfWidth = labelWidth / 2;
    var labelHalfHeight = labelHeight / 2;
    var baseLabelTranslateX = (_reactnative.I18nManager.getConstants().isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (_reactnative.I18nManager.getConstants().isRTL ? -1 : 1) * paddingLeft;
    var minInputHeight = dense ? (label ? _constants.MIN_DENSE_HEIGHT_WL : _constants.MIN_DENSE_HEIGHT) - _constants.LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;
    var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);
    var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);
    if (height && typeof height !== 'number') {
        // eslint-disable-next-line
        console.warn('Currently we support only numbers in height prop');
    }
    var paddingSettings = {
        height: height ? +height : null,
        labelHalfHeight: labelHalfHeight,
        offset: FLAT_INPUT_OFFSET,
        multiline: multiline ? multiline : null,
        dense: dense ? dense : null,
        topPosition: topPosition,
        fontSize: fontSize,
        lineHeight: lineHeight,
        label: label,
        scale: fontScale,
        isAndroid: isAndroid,
        styles: _reactnative.StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)
    };
    var pad = (0, _helpers.calculatePadding)(paddingSettings);
    var paddingFlat = (0, _helpers.adjustPaddingFlat)(_extends._({}, paddingSettings, {
        pad: pad
    }));
    var baseLabelTranslateY = -labelHalfHeight - (topPosition + _constants.MINIMIZED_LABEL_Y_OFFSET);
    var _React_useRef = _react.useRef([
        new _reactnative.Animated.Value(0),
        new _reactnative.Animated.Value(1)
    ]), placeholderOpacityAnims = _React_useRef.current;
    var placeholderOpacity = hasActiveOutline ? parentState.labeled : placeholderOpacityAnims[parentState.labelLayout.measured ? 1 : 0];
    var minHeight = height || (dense ? label ? _constants.MIN_DENSE_HEIGHT_WL : _constants.MIN_DENSE_HEIGHT : MIN_HEIGHT);
    var flatHeight = inputHeight + (!height ? dense ? _constants.LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);
    var iconTopPosition = (flatHeight - _constants.ADORNMENT_SIZE) / 2;
    var leftAffixTopPosition = leftLayout.height ? (0, _helpers.calculateFlatAffixTopPosition)(_extends._({
        height: flatHeight
    }, paddingFlat, {
        affixHeight: leftLayout.height
    })) : null;
    var rightAffixTopPosition = rightLayout.height ? (0, _helpers.calculateFlatAffixTopPosition)(_extends._({
        height: flatHeight
    }, paddingFlat, {
        affixHeight: rightLayout.height
    })) : null;
    var labelProps = {
        label: label,
        onLayoutAnimatedText: onLayoutAnimatedText,
        onLabelTextLayout: onLabelTextLayout,
        placeholderOpacity: placeholderOpacity,
        labelError: error,
        placeholderStyle: styles.placeholder,
        baseLabelTranslateY: baseLabelTranslateY,
        baseLabelTranslateX: baseLabelTranslateX,
        font: font,
        fontSize: fontSize,
        lineHeight: lineHeight,
        fontWeight: fontWeight,
        labelScale: labelScale,
        wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,
        topPosition: topPosition,
        paddingLeft: isAndroid ? _reactnative.I18nManager.isRTL ? paddingRight : paddingLeft : paddingLeft,
        paddingRight: isAndroid ? _reactnative.I18nManager.isRTL ? paddingLeft : paddingRight : paddingRight,
        hasActiveOutline: hasActiveOutline,
        activeColor: activeColor,
        placeholderColor: placeholderColor,
        errorColor: errorColor,
        roundness: roundness,
        maxFontSizeMultiplier: rest.maxFontSizeMultiplier,
        testID: testID,
        contentStyle: contentStyle,
        inputContainerLayout: parentState.inputContainerLayout,
        labelTextLayout: parentState.labelTextLayout,
        opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1,
        isV3: isV3
    };
    var _obj;
    var affixTopPosition = (_obj = {}, _define_property._(_obj, _enums.AdornmentSide.Left, leftAffixTopPosition), _define_property._(_obj, _enums.AdornmentSide.Right, rightAffixTopPosition), _obj);
    var _obj1;
    var onAffixChange = (_obj1 = {}, _define_property._(_obj1, _enums.AdornmentSide.Left, onLeftAffixLayoutChange), _define_property._(_obj1, _enums.AdornmentSide.Right, onRightAffixLayoutChange), _obj1);
    var _obj2;
    var adornmentProps = {
        paddingHorizontal: paddingHorizontal,
        adornmentConfig: adornmentConfig,
        forceFocus: forceFocus,
        topPosition: (_obj2 = {}, _define_property._(_obj2, _enums.AdornmentType.Affix, affixTopPosition), _define_property._(_obj2, _enums.AdornmentType.Icon, iconTopPosition), _obj2),
        onAffixChange: onAffixChange,
        isTextInputFocused: parentState.focused,
        maxFontSizeMultiplier: rest.maxFontSizeMultiplier,
        disabled: disabled
    };
    if (adornmentConfig.length) {
        adornmentProps = _extends._({}, adornmentProps, {
            left: left,
            right: right,
            textStyle: _extends._({}, font, {
                fontSize: fontSize,
                lineHeight: lineHeight,
                fontWeight: fontWeight
            }),
            visible: parentState.labeled
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
        style: [
            containerStyle,
            viewStyle
        ],
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_Underline.Underline, {
                style: underlineStyle,
                hasActiveOutline: hasActiveOutline,
                parentState: parentState,
                underlineColorCustom: underlineColorCustom,
                error: error,
                colors: colors,
                activeColor: activeColor,
                theme: theme
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                onLayout: onInputLayout,
                style: [
                    styles.labelContainer,
                    {
                        minHeight: minHeight
                    }
                ],
                children: [
                    !isAndroid && multiline && !!label && !disabled && // Workaround for: https://github.com/callstack/react-native-paper/issues/2799
                    // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                        testID: "patch-container",
                        pointerEvents: "none",
                        style: [
                            _reactnative.StyleSheet.absoluteFill,
                            dense ? styles.densePatchContainer : styles.patchContainer,
                            {
                                backgroundColor: viewStyle.backgroundColor || containerStyle.backgroundColor,
                                left: paddingLeft,
                                right: paddingRight
                            }
                        ]
                    }),
                    label ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_InputLabel.default, _extends._({
                        labeled: parentState.labeled,
                        error: parentState.error,
                        focused: parentState.focused,
                        scaledLabel: scaledLabel,
                        wiggle: Boolean(parentState.value && labelProps.labelError),
                        labelLayoutMeasured: parentState.labelLayout.measured,
                        labelLayoutWidth: parentState.labelLayout.width,
                        labelLayoutHeight: parentState.labelLayout.height
                    }, labelProps)) : null,
                    render == null ? void 0 : render(_extends._({}, rest, {
                        ref: innerRef,
                        onChangeText: onChangeText,
                        placeholder: label ? parentState.placeholder : rest.placeholder,
                        editable: !disabled && editable,
                        selectionColor: selectionColor,
                        cursorColor: typeof cursorColor === 'undefined' ? activeColor : cursorColor,
                        placeholderTextColor: placeholderTextColor != null ? placeholderTextColor : placeholderColor,
                        onFocus: onFocus,
                        onBlur: onBlur,
                        underlineColorAndroid: 'transparent',
                        multiline: multiline,
                        style: [
                            styles.input,
                            multiline && height ? {
                                height: flatHeight
                            } : {},
                            paddingFlat,
                            _extends._({
                                paddingLeft: paddingLeft,
                                paddingRight: paddingRight
                            }, font, {
                                fontSize: fontSize,
                                lineHeight: lineHeight,
                                fontWeight: fontWeight,
                                color: inputTextColor,
                                textAlignVertical: multiline ? 'top' : 'center',
                                textAlign: textAlign ? textAlign : _reactnative.I18nManager.getConstants().isRTL ? 'right' : 'left',
                                minWidth: Math.min(parentState.labelTextLayout.width + 2 * FLAT_INPUT_OFFSET, MIN_WIDTH)
                            }),
                            _reactnative.Platform.OS === 'web' && {
                                outline: 'none'
                            },
                            adornmentStyleAdjustmentForNativeInput,
                            contentStyle
                        ],
                        testID: testID
                    }))
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextInputAdornment.default, _extends._({}, adornmentProps))
        ]
    });
};
var _default = TextInputFlat;
var styles = _reactnative.StyleSheet.create({
    placeholder: {
        position: 'absolute',
        left: 0
    },
    labelContainer: {
        paddingTop: 0,
        paddingBottom: 0,
        flexGrow: 1
    },
    input: {
        margin: 0,
        flexGrow: 1
    },
    inputFlat: {
        paddingTop: 24,
        paddingBottom: 4
    },
    inputFlatDense: {
        paddingTop: 22,
        paddingBottom: 2
    },
    patchContainer: {
        height: 24,
        zIndex: 2
    },
    densePatchContainer: {
        height: 22,
        zIndex: 2
    }
});


}),
"36888": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _define_property = __webpack_require__(11649);
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _Outline = __webpack_require__(6168);
var _enums = __webpack_require__(20628);
var _TextInputAdornment = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(25335));
var _constants = __webpack_require__(74860);
var _helpers = __webpack_require__(28227);
var _InputLabel = /*#__PURE__*/ _interop_require_default._(__webpack_require__(93587));
var _LabelBackground = /*#__PURE__*/ _interop_require_default._(__webpack_require__(40376));
var TextInputOutlined = function(_param) {
    var _param_disabled = _param.disabled, disabled = _param_disabled === void 0 ? false : _param_disabled, _param_editable = _param.editable, editable = _param_editable === void 0 ? true : _param_editable, label = _param.label, _param_error = _param.error, error = _param_error === void 0 ? false : _param_error, customSelectionColor = _param.selectionColor, cursorColor = _param.cursorColor, _underlineColor = _param.underlineColor, customOutlineColor = _param.outlineColor, activeOutlineColor = _param.activeOutlineColor, outlineStyle = _param.outlineStyle, textColor = _param.textColor, dense = _param.dense, style = _param.style, theme = _param.theme, _param_render = _param.render, render = _param_render === void 0 ? function(props) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.TextInput, _extends._({}, props));
    } : _param_render, _param_multiline = _param.multiline, multiline = _param_multiline === void 0 ? false : _param_multiline, parentState = _param.parentState, innerRef = _param.innerRef, onFocus = _param.onFocus, forceFocus = _param.forceFocus, onBlur = _param.onBlur, onChangeText = _param.onChangeText, onLayoutAnimatedText = _param.onLayoutAnimatedText, onLabelTextLayout = _param.onLabelTextLayout, onLeftAffixLayoutChange = _param.onLeftAffixLayoutChange, onRightAffixLayoutChange = _param.onRightAffixLayoutChange, onInputLayout = _param.onInputLayout, onLayout = _param.onLayout, left = _param.left, right = _param.right, placeholderTextColor = _param.placeholderTextColor, _param_testID = _param.testID, testID = _param_testID === void 0 ? 'text-input-outlined' : _param_testID, contentStyle = _param.contentStyle, scaledLabel = _param.scaledLabel, rest = _object_without_properties_loose._(_param, [
        "disabled",
        "editable",
        "label",
        "error",
        "selectionColor",
        "cursorColor",
        "underlineColor",
        "outlineColor",
        "activeOutlineColor",
        "outlineStyle",
        "textColor",
        "dense",
        "style",
        "theme",
        "render",
        "multiline",
        "parentState",
        "innerRef",
        "onFocus",
        "forceFocus",
        "onBlur",
        "onChangeText",
        "onLayoutAnimatedText",
        "onLabelTextLayout",
        "onLeftAffixLayoutChange",
        "onRightAffixLayoutChange",
        "onInputLayout",
        "onLayout",
        "left",
        "right",
        "placeholderTextColor",
        "testID",
        "contentStyle",
        "scaledLabel"
    ]);
    var adornmentConfig = (0, _TextInputAdornment.getAdornmentConfig)({
        left: left,
        right: right
    });
    var colors = theme.colors, isV3 = theme.isV3, roundness = theme.roundness;
    var font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;
    var hasActiveOutline = parentState.focused || error;
    var _getConstants = (0, _helpers.getConstants)(isV3), INPUT_PADDING_HORIZONTAL = _getConstants.INPUT_PADDING_HORIZONTAL, MIN_HEIGHT = _getConstants.MIN_HEIGHT, ADORNMENT_OFFSET = _getConstants.ADORNMENT_OFFSET, MIN_WIDTH = _getConstants.MIN_WIDTH;
    var _ref = _reactnative.StyleSheet.flatten(style) || {}, fontSizeStyle = _ref.fontSize, fontWeight = _ref.fontWeight, lineHeightStyle = _ref.lineHeight, height = _ref.height, _ref_backgroundColor = _ref.backgroundColor, backgroundColor = _ref_backgroundColor === void 0 ? colors == null ? void 0 : colors.background : _ref_backgroundColor, textAlign = _ref.textAlign, viewStyle = _object_without_properties_loose._(_ref, [
        "fontSize",
        "fontWeight",
        "lineHeight",
        "height",
        "backgroundColor",
        "textAlign"
    ]);
    var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;
    var lineHeight = lineHeightStyle || (_reactnative.Platform.OS === 'web' ? fontSize * 1.2 : undefined);
    var _getOutlinedInputColors = (0, _helpers.getOutlinedInputColors)({
        activeOutlineColor: activeOutlineColor,
        customOutlineColor: customOutlineColor,
        customSelectionColor: customSelectionColor,
        textColor: textColor,
        disabled: disabled,
        error: error,
        theme: theme
    }), inputTextColor = _getOutlinedInputColors.inputTextColor, activeColor = _getOutlinedInputColors.activeColor, outlineColor = _getOutlinedInputColors.outlineColor, placeholderColor = _getOutlinedInputColors.placeholderColor, errorColor = _getOutlinedInputColors.errorColor, selectionColor = _getOutlinedInputColors.selectionColor;
    var densePaddingTop = label ? _constants.LABEL_PADDING_TOP_DENSE : 0;
    var paddingTop = label ? _constants.LABEL_PADDING_TOP : 0;
    var yOffset = label ? _constants.OUTLINE_MINIMIZED_LABEL_Y_OFFSET : 0;
    var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;
    var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;
    var labelWidth = parentState.labelLayout.width;
    var labelHeight = parentState.labelLayout.height;
    var labelHalfWidth = labelWidth / 2;
    var labelHalfHeight = labelHeight / 2;
    var baseLabelTranslateX = (_reactnative.I18nManager.getConstants().isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - _constants.MINIMIZED_LABEL_FONT_SIZE) * labelScale);
    var labelTranslationXOffset = 0;
    var isAdornmentLeftIcon = adornmentConfig.some(function(param) {
        var side = param.side, type = param.type;
        return side === _enums.AdornmentSide.Left && type === _enums.AdornmentType.Icon;
    });
    var isAdornmentRightIcon = adornmentConfig.some(function(param) {
        var side = param.side, type = param.type;
        return side === _enums.AdornmentSide.Right && type === _enums.AdornmentType.Icon;
    });
    if (isAdornmentLeftIcon) {
        labelTranslationXOffset = (_reactnative.I18nManager.getConstants().isRTL ? -1 : 1) * (_constants.ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));
    }
    var minInputHeight = (dense ? _constants.MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - paddingTop;
    var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);
    var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, paddingTop);
    if (height && typeof height !== 'number') {
        // eslint-disable-next-line
        console.warn('Currently we support only numbers in height prop');
    }
    var paddingSettings = {
        height: height ? +height : null,
        labelHalfHeight: labelHalfHeight,
        offset: paddingTop,
        multiline: multiline ? multiline : null,
        dense: dense ? dense : null,
        topPosition: topPosition,
        fontSize: fontSize,
        lineHeight: lineHeight,
        label: label,
        scale: fontScale,
        isAndroid: _reactnative.Platform.OS === 'android',
        styles: _reactnative.StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)
    };
    var pad = (0, _helpers.calculatePadding)(paddingSettings);
    var paddingOut = (0, _helpers.adjustPaddingOut)(_extends._({}, paddingSettings, {
        pad: pad
    }));
    var baseLabelTranslateY = -labelHalfHeight - (topPosition + yOffset);
    var _React_useRef = _react.useRef([
        new _reactnative.Animated.Value(0),
        new _reactnative.Animated.Value(1)
    ]), placeholderOpacityAnims = _React_useRef.current;
    var placeholderOpacity = hasActiveOutline ? parentState.labeled : placeholderOpacityAnims[parentState.labelLayout.measured ? 1 : 0];
    var placeholderStyle = {
        position: 'absolute',
        left: 0,
        paddingHorizontal: INPUT_PADDING_HORIZONTAL
    };
    var labelBackgroundColor = backgroundColor === 'transparent' ? theme.colors.background : backgroundColor;
    var labelProps = {
        label: label,
        onLayoutAnimatedText: onLayoutAnimatedText,
        onLabelTextLayout: onLabelTextLayout,
        placeholderOpacity: placeholderOpacity,
        labelError: error,
        placeholderStyle: placeholderStyle,
        baseLabelTranslateY: baseLabelTranslateY,
        baseLabelTranslateX: baseLabelTranslateX,
        font: font,
        fontSize: fontSize,
        lineHeight: lineHeight,
        fontWeight: fontWeight,
        labelScale: labelScale,
        wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,
        topPosition: topPosition,
        hasActiveOutline: hasActiveOutline,
        activeColor: activeColor,
        placeholderColor: placeholderColor,
        backgroundColor: labelBackgroundColor,
        errorColor: errorColor,
        labelTranslationXOffset: labelTranslationXOffset,
        roundness: roundness,
        maxFontSizeMultiplier: rest.maxFontSizeMultiplier,
        testID: testID,
        contentStyle: contentStyle,
        inputContainerLayout: {
            width: parentState.inputContainerLayout.width + (isAdornmentRightIcon || isAdornmentLeftIcon ? INPUT_PADDING_HORIZONTAL : 0)
        },
        opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1,
        isV3: isV3
    };
    var onLayoutChange = _react.useCallback(function(e) {
        onInputLayout(e);
        onLayout == null ? void 0 : onLayout(e);
    }, [
        onLayout,
        onInputLayout
    ]);
    var minHeight = height || (dense ? _constants.MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT);
    var outlinedHeight = inputHeight + (dense ? densePaddingTop / 2 : paddingTop);
    var leftLayout = parentState.leftLayout, rightLayout = parentState.rightLayout;
    var leftAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({
        height: outlinedHeight,
        affixHeight: leftLayout.height || 0,
        labelYOffset: -yOffset
    });
    var rightAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({
        height: outlinedHeight,
        affixHeight: rightLayout.height || 0,
        labelYOffset: -yOffset
    });
    var iconTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({
        height: outlinedHeight,
        affixHeight: _constants.ADORNMENT_SIZE,
        labelYOffset: -yOffset
    });
    var rightAffixWidth = right ? rightLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;
    var leftAffixWidth = left ? leftLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;
    var adornmentStyleAdjustmentForNativeInput = (0, _TextInputAdornment.getAdornmentStyleAdjustmentForNativeInput)({
        adornmentConfig: adornmentConfig,
        rightAffixWidth: rightAffixWidth,
        leftAffixWidth: leftAffixWidth,
        mode: 'outlined',
        isV3: isV3
    });
    var _obj;
    var affixTopPosition = (_obj = {}, _define_property._(_obj, _enums.AdornmentSide.Left, leftAffixTopPosition), _define_property._(_obj, _enums.AdornmentSide.Right, rightAffixTopPosition), _obj);
    var _obj1;
    var onAffixChange = (_obj1 = {}, _define_property._(_obj1, _enums.AdornmentSide.Left, onLeftAffixLayoutChange), _define_property._(_obj1, _enums.AdornmentSide.Right, onRightAffixLayoutChange), _obj1);
    var _obj2;
    var adornmentProps = {
        adornmentConfig: adornmentConfig,
        forceFocus: forceFocus,
        topPosition: (_obj2 = {}, _define_property._(_obj2, _enums.AdornmentType.Icon, iconTopPosition), _define_property._(_obj2, _enums.AdornmentType.Affix, affixTopPosition), _obj2),
        onAffixChange: onAffixChange,
        isTextInputFocused: parentState.focused,
        maxFontSizeMultiplier: rest.maxFontSizeMultiplier,
        disabled: disabled
    };
    if (adornmentConfig.length) {
        adornmentProps = _extends._({}, adornmentProps, {
            left: left,
            right: right,
            textStyle: _extends._({}, font, {
                fontSize: fontSize,
                lineHeight: lineHeight,
                fontWeight: fontWeight
            }),
            visible: parentState.labeled
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
        style: viewStyle,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_Outline.Outline, {
                isV3: isV3,
                style: outlineStyle,
                label: label,
                roundness: roundness,
                hasActiveOutline: hasActiveOutline,
                focused: parentState.focused,
                activeColor: activeColor,
                outlineColor: outlineColor,
                backgroundColor: backgroundColor
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactnative.View, {
                style: [
                    styles.labelContainer,
                    {
                        paddingTop: paddingTop,
                        minHeight: minHeight
                    }
                ],
                children: [
                    label ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_InputLabel.default, _extends._({
                        labeled: parentState.labeled,
                        error: parentState.error,
                        focused: parentState.focused,
                        scaledLabel: scaledLabel,
                        wiggle: Boolean(parentState.value && labelProps.labelError),
                        labelLayoutMeasured: parentState.labelLayout.measured,
                        labelLayoutWidth: parentState.labelLayout.width,
                        labelLayoutHeight: parentState.labelLayout.height
                    }, labelProps, {
                        labelBackground: _LabelBackground.default,
                        maxFontSizeMultiplier: rest.maxFontSizeMultiplier
                    })) : null,
                    render == null ? void 0 : render(_extends._({}, rest, {
                        ref: innerRef,
                        onLayout: onLayoutChange,
                        onChangeText: onChangeText,
                        placeholder: label ? parentState.placeholder : rest.placeholder,
                        editable: !disabled && editable,
                        selectionColor: selectionColor,
                        cursorColor: typeof cursorColor === 'undefined' ? activeColor : cursorColor,
                        placeholderTextColor: placeholderTextColor || placeholderColor,
                        onFocus: onFocus,
                        onBlur: onBlur,
                        underlineColorAndroid: 'transparent',
                        multiline: multiline,
                        style: [
                            styles.input,
                            !multiline || multiline && height ? {
                                height: inputHeight
                            } : {},
                            paddingOut,
                            _extends._({}, font, {
                                fontSize: fontSize,
                                lineHeight: lineHeight,
                                fontWeight: fontWeight,
                                color: inputTextColor,
                                textAlignVertical: multiline ? 'top' : 'center',
                                textAlign: textAlign ? textAlign : _reactnative.I18nManager.getConstants().isRTL ? 'right' : 'left',
                                paddingHorizontal: INPUT_PADDING_HORIZONTAL,
                                minWidth: Math.min(parentState.labelTextLayout.width + 2 * INPUT_PADDING_HORIZONTAL, MIN_WIDTH)
                            }),
                            _reactnative.Platform.OS === 'web' && {
                                outline: 'none'
                            },
                            adornmentStyleAdjustmentForNativeInput,
                            contentStyle
                        ],
                        testID: testID
                    }))
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextInputAdornment.default, _extends._({}, adornmentProps))
        ]
    });
};
var _default = TextInputOutlined;
var styles = _reactnative.StyleSheet.create({
    labelContainer: {
        paddingBottom: 0,
        flexGrow: 1
    },
    input: {
        margin: 0,
        flexGrow: 1
    },
    inputOutlined: {
        paddingTop: 8,
        paddingBottom: 8
    },
    inputOutlinedDense: {
        paddingTop: 4,
        paddingBottom: 4
    }
});


}),
"74860": (function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ADORNMENT_SIZE: function() {
        return ADORNMENT_SIZE;
    },
    ICON_SIZE: function() {
        return ICON_SIZE;
    },
    LABEL_PADDING_TOP: function() {
        return LABEL_PADDING_TOP;
    },
    LABEL_PADDING_TOP_DENSE: function() {
        return LABEL_PADDING_TOP_DENSE;
    },
    LABEL_WIGGLE_X_OFFSET: function() {
        return LABEL_WIGGLE_X_OFFSET;
    },
    MAXIMIZED_LABEL_FONT_SIZE: function() {
        return MAXIMIZED_LABEL_FONT_SIZE;
    },
    MD2_ADORNMENT_OFFSET: function() {
        return MD2_ADORNMENT_OFFSET;
    },
    MD2_AFFIX_OFFSET: function() {
        return MD2_AFFIX_OFFSET;
    },
    MD2_FLAT_INPUT_OFFSET: function() {
        return MD2_FLAT_INPUT_OFFSET;
    },
    MD2_ICON_OFFSET: function() {
        return MD2_ICON_OFFSET;
    },
    MD2_INPUT_PADDING_HORIZONTAL: function() {
        return MD2_INPUT_PADDING_HORIZONTAL;
    },
    MD2_LABEL_PADDING_HORIZONTAL: function() {
        return MD2_LABEL_PADDING_HORIZONTAL;
    },
    MD2_LABEL_PADDING_TOP: function() {
        return MD2_LABEL_PADDING_TOP;
    },
    MD2_MIN_HEIGHT: function() {
        return MD2_MIN_HEIGHT;
    },
    MD2_OUTLINED_INPUT_OFFSET: function() {
        return MD2_OUTLINED_INPUT_OFFSET;
    },
    MD3_ADORNMENT_OFFSET: function() {
        return MD3_ADORNMENT_OFFSET;
    },
    MD3_AFFIX_OFFSET: function() {
        return MD3_AFFIX_OFFSET;
    },
    MD3_FLAT_INPUT_OFFSET: function() {
        return MD3_FLAT_INPUT_OFFSET;
    },
    MD3_ICON_OFFSET: function() {
        return MD3_ICON_OFFSET;
    },
    MD3_INPUT_PADDING_HORIZONTAL: function() {
        return MD3_INPUT_PADDING_HORIZONTAL;
    },
    MD3_LABEL_PADDING_HORIZONTAL: function() {
        return MD3_LABEL_PADDING_HORIZONTAL;
    },
    MD3_LABEL_PADDING_TOP: function() {
        return MD3_LABEL_PADDING_TOP;
    },
    MD3_MIN_HEIGHT: function() {
        return MD3_MIN_HEIGHT;
    },
    MD3_OUTLINED_INPUT_OFFSET: function() {
        return MD3_OUTLINED_INPUT_OFFSET;
    },
    MINIMIZED_LABEL_FONT_SIZE: function() {
        return MINIMIZED_LABEL_FONT_SIZE;
    },
    MINIMIZED_LABEL_Y_OFFSET: function() {
        return MINIMIZED_LABEL_Y_OFFSET;
    },
    MIN_DENSE_HEIGHT: function() {
        return MIN_DENSE_HEIGHT;
    },
    MIN_DENSE_HEIGHT_OUTLINED: function() {
        return MIN_DENSE_HEIGHT_OUTLINED;
    },
    MIN_DENSE_HEIGHT_WL: function() {
        return MIN_DENSE_HEIGHT_WL;
    },
    MIN_WIDTH: function() {
        return MIN_WIDTH;
    },
    OUTLINE_MINIMIZED_LABEL_Y_OFFSET: function() {
        return OUTLINE_MINIMIZED_LABEL_Y_OFFSET;
    }
});
var MAXIMIZED_LABEL_FONT_SIZE = 16;
var MINIMIZED_LABEL_FONT_SIZE = 12;
var LABEL_WIGGLE_X_OFFSET = 4;
var ADORNMENT_SIZE = 24;
var MIN_WIDTH = 100;
var MD2_AFFIX_OFFSET = 12;
var MD3_AFFIX_OFFSET = 16;
var ICON_SIZE = 24;
var MD2_ICON_OFFSET = 12;
var MD3_ICON_OFFSET = 16;
var MD2_MIN_HEIGHT = 64;
var MD3_MIN_HEIGHT = 56;
var MD3_ADORNMENT_OFFSET = 16;
var MD2_ADORNMENT_OFFSET = 12;
var LABEL_PADDING_TOP_DENSE = 24;
var LABEL_PADDING_TOP = 8;
var MD2_LABEL_PADDING_TOP = 30;
var MD3_LABEL_PADDING_TOP = 26;
var MD2_LABEL_PADDING_HORIZONTAL = 12;
var MD3_LABEL_PADDING_HORIZONTAL = 16;
var MD2_FLAT_INPUT_OFFSET = 8;
var MD3_FLAT_INPUT_OFFSET = 16;
var MINIMIZED_LABEL_Y_OFFSET = -18;
var MIN_DENSE_HEIGHT_WL = 52;
var MIN_DENSE_HEIGHT = 40;
var MD2_INPUT_PADDING_HORIZONTAL = 14;
var MD3_INPUT_PADDING_HORIZONTAL = 16;
var MD2_OUTLINED_INPUT_OFFSET = 8;
var MD3_OUTLINED_INPUT_OFFSET = 16;
var OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;
var MIN_DENSE_HEIGHT_OUTLINED = 48;


}),
"28227": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    adjustPaddingFlat: function() {
        return adjustPaddingFlat;
    },
    adjustPaddingOut: function() {
        return adjustPaddingOut;
    },
    calculateFlatAffixTopPosition: function() {
        return calculateFlatAffixTopPosition;
    },
    calculateFlatInputHorizontalPadding: function() {
        return calculateFlatInputHorizontalPadding;
    },
    calculateInputHeight: function() {
        return calculateInputHeight;
    },
    calculateLabelTopPosition: function() {
        return calculateLabelTopPosition;
    },
    calculateOutlinedIconAndAffixTopPosition: function() {
        return calculateOutlinedIconAndAffixTopPosition;
    },
    calculatePadding: function() {
        return calculatePadding;
    },
    getConstants: function() {
        return getConstants;
    },
    getFlatInputColors: function() {
        return getFlatInputColors;
    },
    getOutlinedInputColors: function() {
        return getOutlinedInputColors;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _enums = __webpack_require__(20628);
var _constants = __webpack_require__(74860);
var calculateLabelTopPosition = function(labelHeight, height, optionalPadding) {
    if (height === void 0) height = 0;
    if (optionalPadding === void 0) optionalPadding = 0;
    var customHeight = height > 0 ? height : 0;
    return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);
};
var calculateInputHeight = function(labelHeight, height, minHeight) {
    if (height === void 0) height = 0;
    var finalHeight = height > 0 ? height : labelHeight;
    if (height > 0) return height;
    return finalHeight < minHeight ? minHeight : finalHeight;
};
var calculatePadding = function(props) {
    var height = props.height, _props_multiline = props.multiline, multiline = _props_multiline === void 0 ? false : _props_multiline;
    var result = 0;
    if (multiline) {
        if (height && multiline) {
            result = calculateTextAreaPadding(props);
        } else {
            result = calculateInputPadding(props);
        }
    }
    return Math.max(0, result);
};
var calculateTextAreaPadding = function(props) {
    var dense = props.dense;
    return dense ? 10 : 20;
};
var calculateInputPadding = function(param) {
    var topPosition = param.topPosition, fontSize = param.fontSize, multiline = param.multiline, scale = param.scale, dense = param.dense, offset = param.offset, isAndroid = param.isAndroid;
    var refFontSize = scale * fontSize;
    var result = Math.floor(topPosition / 2);
    result = result + Math.floor((refFontSize - fontSize) / 2) - (scale < 1 ? offset / 2 : 0);
    if (multiline && isAndroid) result = Math.min(dense ? offset / 2 : offset, result);
    return result;
};
var adjustPaddingOut = function(param) {
    var pad = param.pad, multiline = param.multiline, label = param.label, scale = param.scale, height = param.height, fontSize = param.fontSize, lineHeight = param.lineHeight, dense = param.dense, offset = param.offset, isAndroid = param.isAndroid;
    var fontHeight = lineHeight != null ? lineHeight : fontSize;
    var refFontHeight = scale * fontSize;
    var result = pad;
    if (!isAndroid && height && !multiline) {
        return {
            paddingTop: Math.max(0, (height - fontHeight) / 2),
            paddingBottom: Math.max(0, (height - fontHeight) / 2)
        };
    }
    if (!isAndroid && multiline) {
        if (dense) {
            if (label) {
                result += scale < 1 ? Math.min(offset, refFontHeight / 2 * scale) : 0;
            } else {
                result += 0;
            }
        }
        if (!dense) {
            if (label) {
                result += scale < 1 ? Math.min(offset, refFontHeight * scale) : Math.min(offset / 2, refFontHeight * scale);
            } else {
                result += scale < 1 ? Math.min(offset / 2, refFontHeight * scale) : 0;
            }
        }
        result = Math.floor(result);
    }
    return {
        paddingTop: result,
        paddingBottom: result
    };
};
var adjustPaddingFlat = function(param) {
    var pad = param.pad, scale = param.scale, multiline = param.multiline, label = param.label, height = param.height, offset = param.offset, dense = param.dense, fontSize = param.fontSize, isAndroid = param.isAndroid, styles = param.styles;
    var result = pad;
    var topResult = result;
    var bottomResult = result;
    var paddingTop = styles.paddingTop, paddingBottom = styles.paddingBottom;
    var refFontSize = scale * fontSize;
    if (!multiline) {
        // do not modify padding if input is not multiline
        if (label) {
            // return const style for flat input with label
            return {
                paddingTop: paddingTop,
                paddingBottom: paddingBottom
            };
        }
        // return pad for flat input without label
        return {
            paddingTop: result,
            paddingBottom: result
        };
    }
    if (label) {
        // add paddings passed from styles
        topResult = paddingTop;
        bottomResult = paddingBottom;
        // adjust top padding for iOS
        if (!isAndroid) {
            if (dense) {
                topResult += scale < 1 ? Math.min(result, refFontSize * scale) - result / 2 : Math.min(result, refFontSize * scale) - result / 2;
            }
            if (!dense) {
                topResult += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : Math.min(result, refFontSize * scale) - offset / 2;
            }
        }
        topResult = Math.floor(topResult);
    } else {
        if (height) {
            // center text when height is passed
            return {
                paddingTop: Math.max(0, (height - fontSize) / 2),
                paddingBottom: Math.max(0, (height - fontSize) / 2)
            };
        }
        // adjust paddings for iOS if no label
        if (!isAndroid) {
            if (dense) {
                result += scale < 1 ? Math.min(offset / 2, fontSize / 2 * scale) : Math.min(offset / 2, scale);
            }
            if (!dense) {
                result += scale < 1 ? Math.min(offset, fontSize * scale) : Math.min(fontSize, offset / 2 * scale);
            }
            result = Math.floor(result);
            topResult = result;
            bottomResult = result;
        }
    }
    return {
        paddingTop: Math.max(0, topResult),
        paddingBottom: Math.max(0, bottomResult)
    };
};
function calculateFlatAffixTopPosition(param) {
    var height = param.height, paddingTop = param.paddingTop, paddingBottom = param.paddingBottom, affixHeight = param.affixHeight;
    var inputHeightWithoutPadding = height - paddingTop - paddingBottom;
    var halfOfTheInputHeightDecreasedByAffixHeight = (inputHeightWithoutPadding - affixHeight) / 2;
    return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;
}
function calculateOutlinedIconAndAffixTopPosition(param) {
    var height = param.height, affixHeight = param.affixHeight, labelYOffset = param.labelYOffset;
    return (height - affixHeight + labelYOffset) / 2;
}
var calculateFlatInputHorizontalPadding = function(param) {
    var adornmentConfig = param.adornmentConfig, isV3 = param.isV3;
    var _getConstants = getConstants(isV3), LABEL_PADDING_HORIZONTAL = _getConstants.LABEL_PADDING_HORIZONTAL, ADORNMENT_OFFSET = _getConstants.ADORNMENT_OFFSET, FLAT_INPUT_OFFSET = _getConstants.FLAT_INPUT_OFFSET;
    var paddingLeft = LABEL_PADDING_HORIZONTAL;
    var paddingRight = LABEL_PADDING_HORIZONTAL;
    adornmentConfig.forEach(function(param) {
        var type = param.type, side = param.side;
        if (type === _enums.AdornmentType.Icon && side === _enums.AdornmentSide.Left) {
            paddingLeft = _constants.ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;
        } else if (side === _enums.AdornmentSide.Right) {
            if (type === _enums.AdornmentType.Affix) {
                paddingRight = _constants.ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;
            } else if (type === _enums.AdornmentType.Icon) {
                paddingRight = _constants.ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;
            }
        }
    });
    return {
        paddingLeft: paddingLeft,
        paddingRight: paddingRight
    };
};
var getInputTextColor = function(param) {
    var theme = param.theme, textColor = param.textColor, disabled = param.disabled;
    if (textColor) {
        return textColor;
    }
    if (theme.isV3) {
        if (disabled) {
            return theme.colors.onSurfaceDisabled;
        }
        return theme.colors.onSurface;
    }
    if (disabled) {
        return (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
    }
    return theme.colors.text;
};
var getActiveColor = function(param) {
    var theme = param.theme, disabled = param.disabled, error = param.error, activeUnderlineColor = param.activeUnderlineColor, activeOutlineColor = param.activeOutlineColor, mode = param.mode;
    var isFlat = mode === 'flat';
    var modeColor = isFlat ? activeUnderlineColor : activeOutlineColor;
    if (error) {
        return theme.colors.error;
    }
    if (modeColor) {
        return modeColor;
    }
    if (disabled) {
        if (theme.isV3) {
            return theme.colors.onSurfaceDisabled;
        }
        return (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
    }
    return theme.colors.primary;
};
var getPlaceholderColor = function(param) {
    var theme = param.theme, disabled = param.disabled;
    if (theme.isV3) {
        if (disabled) {
            return theme.colors.onSurfaceDisabled;
        }
        return theme.colors.onSurfaceVariant;
    }
    if (disabled) {
        return theme.colors.disabled;
    }
    return theme.colors.placeholder;
};
var getSelectionColor = function(param) {
    var activeColor = param.activeColor, customSelectionColor = param.customSelectionColor;
    if (typeof customSelectionColor !== 'undefined') {
        return customSelectionColor;
    }
    if (_reactnative.Platform.OS === 'android') {
        return (0, _color.default)(activeColor).alpha(0.54).rgb().string();
    }
    return activeColor;
};
var getFlatBackgroundColor = function(param) {
    var theme = param.theme, disabled = param.disabled;
    var _theme_colors, _theme_colors1;
    if (theme.isV3) {
        if (disabled) {
            return (0, _color.default)(theme.colors.onSurface).alpha(0.04).rgb().string();
        } else {
            return theme.colors.surfaceVariant;
        }
    }
    if (disabled) {
        return undefined;
    }
    return theme.dark ? (0, _color.default)((_theme_colors = theme.colors) == null ? void 0 : _theme_colors.background).lighten(0.24).rgb().string() : (0, _color.default)((_theme_colors1 = theme.colors) == null ? void 0 : _theme_colors1.background).darken(0.06).rgb().string();
};
var getFlatUnderlineColor = function(param) {
    var theme = param.theme, disabled = param.disabled, underlineColor = param.underlineColor;
    if (!disabled && underlineColor) {
        return underlineColor;
    }
    if (theme.isV3) {
        if (disabled) {
            return theme.colors.onSurfaceDisabled;
        }
        return theme.colors.onSurfaceVariant;
    }
    if (disabled) {
        return 'transparent';
    }
    return theme.colors.disabled;
};
var getOutlinedOutlineInputColor = function(param) {
    var theme = param.theme, disabled = param.disabled, customOutlineColor = param.customOutlineColor;
    var isTransparent = (0, _color.default)(customOutlineColor).alpha() === 0;
    if (!disabled && customOutlineColor) {
        return customOutlineColor;
    }
    if (theme.isV3) {
        if (disabled) {
            if (theme.dark) {
                return 'transparent';
            }
            return theme.colors.surfaceDisabled;
        }
        return theme.colors.outline;
    }
    if (disabled) {
        if (isTransparent) {
            return customOutlineColor;
        }
        return theme.colors.disabled;
    }
    return theme.colors.placeholder;
};
var getFlatInputColors = function(param) {
    var underlineColor = param.underlineColor, activeUnderlineColor = param.activeUnderlineColor, customSelectionColor = param.customSelectionColor, textColor = param.textColor, disabled = param.disabled, error = param.error, theme = param.theme;
    var baseFlatColorProps = {
        theme: theme,
        disabled: disabled
    };
    var activeColor = getActiveColor(_extends._({}, baseFlatColorProps, {
        error: error,
        activeUnderlineColor: activeUnderlineColor,
        mode: 'flat'
    }));
    return {
        inputTextColor: getInputTextColor(_extends._({}, baseFlatColorProps, {
            textColor: textColor
        })),
        activeColor: activeColor,
        underlineColorCustom: getFlatUnderlineColor(_extends._({}, baseFlatColorProps, {
            underlineColor: underlineColor
        })),
        placeholderColor: getPlaceholderColor(baseFlatColorProps),
        selectionColor: getSelectionColor({
            activeColor: activeColor,
            customSelectionColor: customSelectionColor
        }),
        errorColor: theme.colors.error,
        backgroundColor: getFlatBackgroundColor(baseFlatColorProps)
    };
};
var getOutlinedInputColors = function(param) {
    var activeOutlineColor = param.activeOutlineColor, customOutlineColor = param.customOutlineColor, customSelectionColor = param.customSelectionColor, textColor = param.textColor, disabled = param.disabled, error = param.error, theme = param.theme;
    var baseOutlinedColorProps = {
        theme: theme,
        disabled: disabled
    };
    var activeColor = getActiveColor(_extends._({}, baseOutlinedColorProps, {
        error: error,
        activeOutlineColor: activeOutlineColor,
        mode: 'outlined'
    }));
    return {
        inputTextColor: getInputTextColor(_extends._({}, baseOutlinedColorProps, {
            textColor: textColor
        })),
        activeColor: activeColor,
        outlineColor: getOutlinedOutlineInputColor(_extends._({}, baseOutlinedColorProps, {
            customOutlineColor: customOutlineColor
        })),
        placeholderColor: getPlaceholderColor(baseOutlinedColorProps),
        selectionColor: getSelectionColor({
            activeColor: activeColor,
            customSelectionColor: customSelectionColor
        }),
        errorColor: theme.colors.error
    };
};
var getConstants = function(isV3) {
    // Text input affix
    var AFFIX_OFFSET;
    // Text input icon
    var ICON_OFFSET;
    //Text input flat
    var LABEL_PADDING_TOP;
    var LABEL_PADDING_HORIZONTAL;
    var FLAT_INPUT_OFFSET;
    var MIN_HEIGHT;
    // Text input outlined;
    var INPUT_PADDING_HORIZONTAL;
    var ADORNMENT_OFFSET;
    var OUTLINED_INPUT_OFFSET;
    if (isV3) {
        AFFIX_OFFSET = _constants.MD3_AFFIX_OFFSET;
        ICON_OFFSET = _constants.MD3_ICON_OFFSET;
        LABEL_PADDING_TOP = _constants.MD3_LABEL_PADDING_TOP;
        LABEL_PADDING_HORIZONTAL = _constants.MD3_LABEL_PADDING_HORIZONTAL;
        FLAT_INPUT_OFFSET = _constants.MD3_FLAT_INPUT_OFFSET;
        MIN_HEIGHT = _constants.MD3_MIN_HEIGHT;
        INPUT_PADDING_HORIZONTAL = _constants.MD3_INPUT_PADDING_HORIZONTAL;
        ADORNMENT_OFFSET = _constants.MD3_ADORNMENT_OFFSET;
        OUTLINED_INPUT_OFFSET = _constants.MD3_OUTLINED_INPUT_OFFSET;
    } else {
        AFFIX_OFFSET = _constants.MD2_AFFIX_OFFSET;
        ICON_OFFSET = _constants.MD2_ICON_OFFSET;
        LABEL_PADDING_TOP = _constants.MD2_LABEL_PADDING_TOP;
        LABEL_PADDING_HORIZONTAL = _constants.MD2_LABEL_PADDING_HORIZONTAL;
        FLAT_INPUT_OFFSET = _constants.MD2_FLAT_INPUT_OFFSET;
        MIN_HEIGHT = _constants.MD2_MIN_HEIGHT;
        INPUT_PADDING_HORIZONTAL = _constants.MD2_INPUT_PADDING_HORIZONTAL;
        ADORNMENT_OFFSET = _constants.MD2_ADORNMENT_OFFSET;
        OUTLINED_INPUT_OFFSET = _constants.MD2_OUTLINED_INPUT_OFFSET;
    }
    return {
        AFFIX_OFFSET: AFFIX_OFFSET,
        ICON_OFFSET: ICON_OFFSET,
        LABEL_PADDING_TOP: LABEL_PADDING_TOP,
        LABEL_PADDING_HORIZONTAL: LABEL_PADDING_HORIZONTAL,
        FLAT_INPUT_OFFSET: FLAT_INPUT_OFFSET,
        MIN_HEIGHT: MIN_HEIGHT,
        INPUT_PADDING_HORIZONTAL: INPUT_PADDING_HORIZONTAL,
        ADORNMENT_OFFSET: ADORNMENT_OFFSET,
        OUTLINED_INPUT_OFFSET: OUTLINED_INPUT_OFFSET,
        MIN_WIDTH: _constants.MIN_WIDTH
    };
};


}),
"91357": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ToggleButton: function() {
        return ToggleButton;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _ToggleButtonGroup = __webpack_require__(99698);
var _utils = __webpack_require__(97751);
var _theming = __webpack_require__(10968);
var _colors = __webpack_require__(18847);
var _forwardRef = __webpack_require__(45835);
var _IconButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86395));
/**
 * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,
 * a group should share a common container.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { ToggleButton } from 'react-native-paper';
 *
 * const ToggleButtonExample = () => {
 *   const [status, setStatus] = React.useState('checked');
 *
 *   const onButtonToggle = value => {
 *     setStatus(status === 'checked' ? 'unchecked' : 'checked');
 *   };
 *
 *   return (
 *     <ToggleButton
 *       icon="bluetooth"
 *       value="bluetooth"
 *       status={status}
 *       onPress={onButtonToggle}
 *     />
 *   );
 * };
 *
 * export default ToggleButtonExample;
 *
 * ```
 */ var ToggleButton = (0, _forwardRef.forwardRef)(function(_param, ref) {
    var icon = _param.icon, size = _param.size, themeOverrides = _param.theme, accessibilityLabel = _param.accessibilityLabel, disabled = _param.disabled, style = _param.style, value = _param.value, status = _param.status, onPress = _param.onPress, rippleColor = _param.rippleColor, rest = _object_without_properties_loose._(_param, [
        "icon",
        "size",
        "theme",
        "accessibilityLabel",
        "disabled",
        "style",
        "value",
        "status",
        "onPress",
        "rippleColor"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var borderRadius = theme.roundness;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ToggleButtonGroup.ToggleButtonGroupContext.Consumer, {
        children: function(context) {
            var checked = context && context.value === value || status === 'checked';
            var backgroundColor = (0, _utils.getToggleButtonColor)({
                theme: theme,
                checked: checked
            });
            var borderColor = theme.isV3 ? theme.colors.outline : (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_IconButton.default, _extends._({
                borderless: false,
                icon: icon,
                onPress: function(e) {
                    if (onPress) {
                        onPress(e);
                    }
                    if (context) {
                        context.onValueChange(!checked ? value : null);
                    }
                },
                size: size,
                accessibilityLabel: accessibilityLabel,
                accessibilityState: {
                    disabled: disabled,
                    selected: checked
                },
                disabled: disabled,
                style: [
                    styles.content,
                    {
                        backgroundColor: backgroundColor,
                        borderRadius: borderRadius,
                        borderColor: borderColor
                    },
                    style
                ],
                ref: ref,
                theme: theme,
                rippleColor: rippleColor
            }, rest));
        }
    });
});
var styles = _reactnative.StyleSheet.create({
    content: {
        width: 42,
        height: 42,
        margin: 0
    }
});
var _default = ToggleButton;


}),
"99698": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ToggleButtonGroup: function() {
        return ToggleButtonGroup;
    },
    ToggleButtonGroupContext: function() {
        return ToggleButtonGroupContext;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var ToggleButtonGroupContext = //@ts-expect-error: TS can't ensure the type from Group to children
/*#__PURE__*/ _react.createContext(null);
/**
 * Toggle group allows to control a group of toggle buttons.</br>
 * It doesn't change the appearance of the toggle buttons. If you want to group them in a row, check out [ToggleButton.Row](ToggleButtonRow).
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { ToggleButton } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [value, setValue] = React.useState('left');
 *
 *   return (
 *     <ToggleButton.Group
 *       onValueChange={value => setValue(value)}
 *       value={value}>
 *       <ToggleButton icon="format-align-left" value="left" />
 *       <ToggleButton icon="format-align-right" value="right" />
 *     </ToggleButton.Group>
 *   );
 * };
 *
 * export default MyComponent;
 *```
 */ var ToggleButtonGroup = function(param) {
    var value = param.value, onValueChange = param.onValueChange, children = param.children;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ToggleButtonGroupContext.Provider, {
        value: {
            value: value,
            onValueChange: onValueChange
        },
        children: children
    });
};
ToggleButtonGroup.displayName = 'ToggleButton.Group';
var _default = ToggleButtonGroup;


}),
"5205": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ToggleButtonRow: function() {
        return ToggleButtonRow;
    },
    default: function() {
        return _default;
    }
});
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _ToggleButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(91357));
var _ToggleButtonGroup = /*#__PURE__*/ _interop_require_default._(__webpack_require__(99698));
/**
 * Toggle button row renders a group of toggle buttons in a row.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { ToggleButton } from 'react-native-paper';
 *
 * const MyComponent = () => {
 *   const [value, setValue] = React.useState('left');
 *
 *   return (
 *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>
 *       <ToggleButton icon="format-align-left" value="left" />
 *       <ToggleButton icon="format-align-right" value="right" />
 *     </ToggleButton.Row>
 *   );
 * };
 *
 * export default MyComponent;
 *
 *```
 */ var ToggleButtonRow = function(param) {
    var value = param.value, onValueChange = param.onValueChange, children = param.children, style = param.style;
    var count = _react.Children.count(children);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ToggleButtonGroup.default, {
        value: value,
        onValueChange: onValueChange,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
            style: [
                styles.row,
                style
            ],
            children: _react.Children.map(children, function(child, i) {
                // @ts-expect-error: TypeScript complains about child.type but it doesn't matter
                if (child && child.type === _ToggleButton.default) {
                    // @ts-expect-error: We're sure that child is a React Element
                    return /*#__PURE__*/ _react.cloneElement(child, {
                        style: [
                            styles.button,
                            i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle,
                            // @ts-expect-error: We're sure that child is a React Element
                            child.props.style
                        ]
                    });
                }
                return child;
            })
        })
    });
};
ToggleButtonRow.displayName = 'ToggleButton.Row';
var styles = _reactnative.StyleSheet.create({
    row: {
        flexDirection: 'row'
    },
    button: {
        borderWidth: _reactnative.StyleSheet.hairlineWidth
    },
    first: {
        borderTopRightRadius: 0,
        borderBottomRightRadius: 0
    },
    middle: {
        borderRadius: 0,
        borderLeftWidth: 0
    },
    last: {
        borderLeftWidth: 0,
        borderTopLeftRadius: 0,
        borderBottomLeftRadius: 0
    }
});
var _default = ToggleButtonRow;


}),
"58102": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _utils = __webpack_require__(22346);
var _theming = __webpack_require__(10968);
var _addEventListener = __webpack_require__(74897);
var _Portal = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4844));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(15588));
/**
 * Tooltips display informative text when users hover over, focus on, or tap an element.
 *
 * Plain tooltips, when activated, display a text label identifying an element, such as a description of its function. Tooltips should include only short, descriptive text and avoid restating visible UI text.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { IconButton, Tooltip } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Tooltip title="Selected Camera">
 *     <IconButton icon="camera" selected size={24} onPress={() => {}} />
 *   </Tooltip>
 * );
 *
 * export default MyComponent;
 * ```
 */ var Tooltip = function(_param) {
    var children = _param.children, _param_enterTouchDelay = _param.enterTouchDelay, enterTouchDelay = _param_enterTouchDelay === void 0 ? 500 : _param_enterTouchDelay, _param_leaveTouchDelay = _param.leaveTouchDelay, leaveTouchDelay = _param_leaveTouchDelay === void 0 ? 1500 : _param_leaveTouchDelay, title = _param.title, themeOverrides = _param.theme, titleMaxFontSizeMultiplier = _param.titleMaxFontSizeMultiplier, rest = _object_without_properties_loose._(_param, [
        "children",
        "enterTouchDelay",
        "leaveTouchDelay",
        "title",
        "theme",
        "titleMaxFontSizeMultiplier"
    ]);
    var isWeb = _reactnative.Platform.OS === 'web';
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var _React_useState = _sliced_to_array._(_react.useState(false), 2), visible = _React_useState[0], setVisible = _React_useState[1];
    var _React_useState1 = _sliced_to_array._(_react.useState({
        children: {},
        tooltip: {},
        measured: false
    }), 2), measurement = _React_useState1[0], setMeasurement = _React_useState1[1];
    var showTooltipTimer = _react.useRef([]);
    var hideTooltipTimer = _react.useRef([]);
    var childrenWrapperRef = _react.useRef();
    var touched = _react.useRef(false);
    _react.useEffect(function() {
        return function() {
            if (showTooltipTimer.current.length) {
                showTooltipTimer.current.forEach(function(t) {
                    return clearTimeout(t);
                });
                showTooltipTimer.current = [];
            }
            if (hideTooltipTimer.current.length) {
                hideTooltipTimer.current.forEach(function(t) {
                    return clearTimeout(t);
                });
                hideTooltipTimer.current = [];
            }
        };
    }, []);
    _react.useEffect(function() {
        var subscription = (0, _addEventListener.addEventListener)(_reactnative.Dimensions, 'change', function() {
            return setVisible(false);
        });
        return function() {
            return subscription.remove();
        };
    }, []);
    var handleOnLayout = function(param) {
        var layout = param.nativeEvent.layout;
        childrenWrapperRef.current.measure(function(_x, _y, width, height, pageX, pageY) {
            setMeasurement({
                children: {
                    pageX: pageX,
                    pageY: pageY,
                    height: height,
                    width: width
                },
                tooltip: _extends._({}, layout),
                measured: true
            });
        });
    };
    var handleTouchStart = function() {
        if (hideTooltipTimer.current.length) {
            hideTooltipTimer.current.forEach(function(t) {
                return clearTimeout(t);
            });
            hideTooltipTimer.current = [];
        }
        if (isWeb) {
            var id = setTimeout(function() {
                touched.current = true;
                setVisible(true);
            }, enterTouchDelay);
            showTooltipTimer.current.push(id);
        } else {
            touched.current = true;
            setVisible(true);
        }
    };
    var handleTouchEnd = function() {
        touched.current = false;
        if (showTooltipTimer.current.length) {
            showTooltipTimer.current.forEach(function(t) {
                return clearTimeout(t);
            });
            showTooltipTimer.current = [];
        }
        var id = setTimeout(function() {
            setVisible(false);
            setMeasurement({
                children: {},
                tooltip: {},
                measured: false
            });
        }, leaveTouchDelay);
        hideTooltipTimer.current.push(id);
    };
    var mobilePressProps = {
        onPress: _react.useCallback(function() {
            if (touched.current) {
                return null;
            } else {
                if (children.props.disabled) return null;
                return children.props.onPress == null ? void 0 : children.props.onPress.call(children.props);
            }
        }, [
            children.props
        ]),
        onLongPress: function() {
            return handleTouchStart();
        },
        onPressOut: function() {
            return handleTouchEnd();
        },
        delayLongPress: enterTouchDelay
    };
    var webPressProps = {
        onHoverIn: function() {
            handleTouchStart();
            children.props.onHoverIn == null ? void 0 : children.props.onHoverIn.call(children.props);
        },
        onHoverOut: function() {
            handleTouchEnd();
            children.props.onHoverOut == null ? void 0 : children.props.onHoverOut.call(children.props);
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            visible && /*#__PURE__*/ (0, _jsxruntime.jsx)(_Portal.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                    onLayout: handleOnLayout,
                    style: [
                        styles.tooltip,
                        _extends._({
                            backgroundColor: theme.isV3 ? theme.colors.onSurface : theme.colors.tooltip
                        }, (0, _utils.getTooltipPosition)(measurement, children), {
                            borderRadius: theme.roundness
                        }, measurement.measured ? styles.visible : styles.hidden)
                    ],
                    testID: "tooltip-container",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, {
                        accessibilityLiveRegion: "polite",
                        numberOfLines: 1,
                        selectable: false,
                        variant: "labelLarge",
                        style: {
                            color: theme.colors.surface
                        },
                        maxFontSizeMultiplier: titleMaxFontSizeMultiplier,
                        children: title
                    })
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Pressable, _extends._({
                ref: childrenWrapperRef,
                style: styles.pressContainer
            }, isWeb ? webPressProps : mobilePressProps, {
                children: /*#__PURE__*/ _react.cloneElement(children, _extends._({}, rest, isWeb ? webPressProps : mobilePressProps))
            }))
        ]
    });
};
Tooltip.displayName = 'Tooltip';
var styles = _reactnative.StyleSheet.create({
    tooltip: {
        alignSelf: 'flex-start',
        justifyContent: 'center',
        paddingHorizontal: 16,
        height: 32,
        maxHeight: 32
    },
    visible: {
        opacity: 1
    },
    hidden: {
        opacity: 0
    },
    pressContainer: _extends._({}, _reactnative.Platform.OS === 'web' && {
        cursor: 'default'
    })
});
var _default = Tooltip;


}),
"86858": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "Pressable", ({
    enumerable: true,
    get: function() {
        return Pressable;
    }
}));
var _reactnative = __webpack_require__(44963);
var Pressable = _reactnative.Pressable;


}),
"84987": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _Pressable = __webpack_require__(86858);
var _utils = __webpack_require__(44320);
var _settings = __webpack_require__(97527);
var _theming = __webpack_require__(10968);
var _forwardRef = __webpack_require__(45835);
var _hasTouchHandler = /*#__PURE__*/ _interop_require_default._(__webpack_require__(35717));
var ANDROID_VERSION_LOLLIPOP = 21;
var ANDROID_VERSION_PIE = 28;
var TouchableRipple = function(_param, ref) {
    var style = _param.style, background = _param.background, _param_borderless = _param.borderless, borderless = _param_borderless === void 0 ? false : _param_borderless, disabledProp = _param.disabled, rippleColor = _param.rippleColor, underlayColor = _param.underlayColor, children = _param.children, themeOverrides = _param.theme, rest = _object_without_properties_loose._(_param, [
        "style",
        "background",
        "borderless",
        "disabled",
        "rippleColor",
        "underlayColor",
        "children",
        "theme"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var rippleEffectEnabled = _react.useContext(_settings.SettingsContext).rippleEffectEnabled;
    var onPress = rest.onPress, onLongPress = rest.onLongPress, onPressIn = rest.onPressIn, onPressOut = rest.onPressOut;
    var hasPassedTouchHandler = (0, _hasTouchHandler.default)({
        onPress: onPress,
        onLongPress: onLongPress,
        onPressIn: onPressIn,
        onPressOut: onPressOut
    });
    var disabled = disabledProp || !hasPassedTouchHandler;
    var _getTouchableRippleColors = (0, _utils.getTouchableRippleColors)({
        theme: theme,
        rippleColor: rippleColor,
        underlayColor: underlayColor
    }), calculatedRippleColor = _getTouchableRippleColors.calculatedRippleColor, calculatedUnderlayColor = _getTouchableRippleColors.calculatedUnderlayColor;
    // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'
    // https://github.com/facebook/react-native/issues/6480
    var useForeground = _reactnative.Platform.OS === 'android' && _reactnative.Platform.Version >= ANDROID_VERSION_PIE && borderless;
    if (TouchableRipple.supported) {
        var androidRipple = rippleEffectEnabled ? background != null ? background : {
            color: calculatedRippleColor,
            borderless: borderless,
            foreground: useForeground
        } : undefined;
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Pressable.Pressable, _extends._({}, rest, {
            ref: ref,
            disabled: disabled,
            style: [
                borderless && styles.overflowHidden,
                style
            ],
            android_ripple: androidRipple,
            children: _react.Children.only(children)
        }));
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Pressable.Pressable, _extends._({}, rest, {
        ref: ref,
        disabled: disabled,
        style: [
            borderless && styles.overflowHidden,
            style
        ],
        children: function(param) {
            var pressed = param.pressed;
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                children: [
                    pressed && rippleEffectEnabled && /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                        testID: "touchable-ripple-underlay",
                        style: [
                            styles.underlay,
                            {
                                backgroundColor: calculatedUnderlayColor
                            }
                        ]
                    }),
                    _react.Children.only(children)
                ]
            });
        }
    }));
};
TouchableRipple.supported = _reactnative.Platform.OS === 'android' && _reactnative.Platform.Version >= ANDROID_VERSION_LOLLIPOP;
var styles = _reactnative.StyleSheet.create({
    overflowHidden: {
        overflow: 'hidden'
    },
    underlay: _extends._({}, _reactnative.StyleSheet.absoluteFillObject, {
        zIndex: 2
    })
});
var Component = (0, _forwardRef.forwardRef)(TouchableRipple);
var _default = Component;


}),
"24904": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    customAnimatedText: function() {
        return customAnimatedText;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _type_of = __webpack_require__(15576);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _theming = __webpack_require__(10968);
/**
 * Animated text component which follows styles from the theme.
 *
 * @extends Text props https://reactnative.dev/docs/text#props
 */ function AnimatedText(_param) {
    var style = _param.style, themeOverrides = _param.theme, variant = _param.variant, rest = _object_without_properties_loose._(_param, [
        "style",
        "theme",
        "variant"
    ]);
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var writingDirection = _reactnative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr';
    if (theme.isV3 && variant) {
        var font = theme.fonts[variant];
        if ((typeof font === "undefined" ? "undefined" : _type_of._(font)) !== 'object') {
            throw new Error("Variant " + variant + " was not provided properly. Valid variants are " + Object.keys(theme.fonts).join(', ') + ".");
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.Text, _extends._({}, rest, {
            style: [
                font,
                styles.text,
                {
                    writingDirection: writingDirection,
                    color: theme.colors.onSurface
                },
                style
            ]
        }));
    } else {
        var font1 = !theme.isV3 ? theme.fonts.regular : theme.fonts.bodyMedium;
        var textStyle = _extends._({}, font1, {
            color: theme.isV3 ? theme.colors.onSurface : theme.colors.text
        });
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Animated.Text, _extends._({}, rest, {
            style: [
                styles.text,
                textStyle,
                {
                    writingDirection: writingDirection
                },
                style
            ]
        }));
    }
}
var styles = _reactnative.StyleSheet.create({
    text: {
        textAlign: 'left'
    }
});
var customAnimatedText = function() {
    return AnimatedText;
};
var _default = AnimatedText;


}),
"15588": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    customText: function() {
        return customText;
    },
    default: function() {
        return _default;
    }
});
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _type_of = __webpack_require__(15576);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _AnimatedText = /*#__PURE__*/ _interop_require_default._(__webpack_require__(24904));
var _StyledText = /*#__PURE__*/ _interop_require_default._(__webpack_require__(6508));
var _theming = __webpack_require__(10968);
var _forwardRef = __webpack_require__(45835);
// @component-group Typography
/**
 * Typography component showing styles complied with passed `variant` prop and supported by the type system.
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Text } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <>
 *     <Text variant="displayLarge">Display Large</Text>
 *     <Text variant="displayMedium">Display Medium</Text>
 *     <Text variant="displaySmall">Display small</Text>
 *
 *     <Text variant="headlineLarge">Headline Large</Text>
 *     <Text variant="headlineMedium">Headline Medium</Text>
 *     <Text variant="headlineSmall">Headline Small</Text>
 *
 *     <Text variant="titleLarge">Title Large</Text>
 *     <Text variant="titleMedium">Title Medium</Text>
 *     <Text variant="titleSmall">Title Small</Text>
 *
 *     <Text variant="bodyLarge">Body Large</Text>
 *     <Text variant="bodyMedium">Body Medium</Text>
 *     <Text variant="bodySmall">Body Small</Text>
 *
 *     <Text variant="labelLarge">Label Large</Text>
 *     <Text variant="labelMedium">Label Medium</Text>
 *     <Text variant="labelSmall">Label Small</Text>
 *  </>
 * );
 *
 * export default MyComponent;
 * ```
 *
 * @extends Text props https://reactnative.dev/docs/text#props
 */ var Text = function(_param, ref) {
    var style = _param.style, variant = _param.variant, initialTheme = _param.theme, rest = _object_without_properties_loose._(_param, [
        "style",
        "variant",
        "theme"
    ]);
    var root = _react.useRef(null);
    // FIXME: destructure it in TS 4.6+
    var theme = (0, _theming.useInternalTheme)(initialTheme);
    var writingDirection = _reactnative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr';
    _react.useImperativeHandle(ref, function() {
        return {
            setNativeProps: function(args) {
                var _root_current;
                return (_root_current = root.current) == null ? void 0 : _root_current.setNativeProps(args);
            }
        };
    });
    if (theme.isV3 && variant) {
        var font = theme.fonts[variant];
        var textStyle = [
            font,
            style
        ];
        if (/*#__PURE__*/ _react.isValidElement(rest.children) && (rest.children.type === Component || rest.children.type === _AnimatedText.default || rest.children.type === _StyledText.default)) {
            var props = rest.children.props;
            // Context:   Some components have the built-in `Text` component with a predefined variant,
            //            that also accepts `children` as a `React.Node`. This can result in a situation,
            //            where another `Text` component is rendered within the built-in `Text` component.
            //            By doing that, we assume that user doesn't want to consume pre-defined font properties.
            // Case one:  Nested `Text` has different `variant` that specified in parent. For example:
            //              <Chip>
            //                <Text variant="displayMedium">Nested</Text>
            //              </Chip>
            // Solution:  To address the following scenario, the code below overrides the `variant`
            //            specified in a parent in favor of children's variant:
            if (props.variant) {
                font = theme.fonts[props.variant];
                textStyle = [
                    style,
                    font
                ];
            }
            // Case two:  Nested `Text` has specified `styles` which intefere
            //            with font properties, from the parent's `variant`. For example:
            //              <Chip>
            //                <Text style={{fontSize: 30}}>Nested</Text>
            //              </Chip>
            // Solution:  To address the following scenario, the code below overrides the
            //            parent's style with children's style:
            if (!props.variant) {
                textStyle = [
                    style,
                    props.style
                ];
            }
        }
        if ((typeof font === "undefined" ? "undefined" : _type_of._(font)) !== 'object') {
            throw new Error("Variant " + variant + " was not provided properly. Valid variants are " + Object.keys(theme.fonts).join(', ') + ".");
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Text, _extends._({
            ref: root,
            style: [
                styles.text,
                {
                    writingDirection: writingDirection,
                    color: theme.colors.onSurface
                },
                textStyle
            ]
        }, rest));
    } else {
        var _theme_fonts, _theme_colors;
        var font1 = theme.isV3 ? theme.fonts["default"] : (_theme_fonts = theme.fonts) == null ? void 0 : _theme_fonts.regular;
        var textStyle1 = _extends._({}, font1, {
            color: theme.isV3 ? (_theme_colors = theme.colors) == null ? void 0 : _theme_colors.onSurface : theme.colors.text
        });
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Text, _extends._({}, rest, {
            ref: root,
            style: [
                styles.text,
                textStyle1,
                {
                    writingDirection: writingDirection
                },
                style
            ]
        }));
    }
};
var styles = _reactnative.StyleSheet.create({
    text: {
        textAlign: 'left'
    }
});
var Component = (0, _forwardRef.forwardRef)(Text);
var customText = function() {
    return Component;
};
var _default = Component;


}),
"17911": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _StyledText = /*#__PURE__*/ _interop_require_default._(__webpack_require__(6508));
// @component-group Typography
/**
 * Typography component for showing a caption.
 *
 * <div class="screenshots">
 *   <img src="screenshots/caption.png" />
 * </div>
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Caption } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Caption>Caption</Caption>
 * );
 *
 * export default MyComponent;
 * ```
 */ var Caption = function(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_StyledText.default, _extends._({}, props, {
        alpha: 0.54,
        family: "regular",
        style: [
            styles.text,
            props.style
        ]
    }));
};
var _default = Caption;
var styles = _reactnative.StyleSheet.create({
    text: {
        fontSize: 12,
        lineHeight: 20,
        marginVertical: 2,
        letterSpacing: 0.4
    }
});


}),
"14200": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _StyledText = /*#__PURE__*/ _interop_require_default._(__webpack_require__(6508));
// @component-group Typography
/**
 * Typography component for showing a headline.
 *
 * <div class="screenshots">
 *   <img src="screenshots/headline.png" />
 * </div>
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Headline } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Headline>Headline</Headline>
 * );
 *
 * export default MyComponent;
 * ```
 */ var Headline = function(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_StyledText.default, _extends._({}, props, {
        alpha: 0.87,
        family: "regular",
        style: [
            styles.text,
            props.style
        ]
    }));
};
var _default = Headline;
var styles = _reactnative.StyleSheet.create({
    text: {
        fontSize: 24,
        lineHeight: 32,
        marginVertical: 2,
        letterSpacing: 0
    }
});


}),
"77585": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _StyledText = /*#__PURE__*/ _interop_require_default._(__webpack_require__(6508));
// @component-group Typography
/**
 * Typography component for showing a paragraph.
 *
 * <div class="screenshots">
 *   <img src="screenshots/paragraph.png" />
 * </div>
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Paragraph } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Paragraph>Paragraph</Paragraph>
 * );
 *
 * export default MyComponent;
 * ```
 */ var Paragraph = function(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_StyledText.default, _extends._({}, props, {
        alpha: 0.87,
        family: "regular",
        style: [
            styles.text,
            props.style
        ]
    }));
};
var _default = Paragraph;
var styles = _reactnative.StyleSheet.create({
    text: {
        fontSize: 14,
        lineHeight: 20,
        marginVertical: 2,
        letterSpacing: 0.25
    }
});


}),
"6508": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _Text = /*#__PURE__*/ _interop_require_default._(__webpack_require__(16090));
var _theming = __webpack_require__(10968);
var StyledText = function(_param) {
    var _param_alpha = _param.alpha, alpha = _param_alpha === void 0 ? 1 : _param_alpha, family = _param.family, style = _param.style, themeOverrides = _param.theme, rest = _object_without_properties_loose._(_param, [
        "alpha",
        "family",
        "style",
        "theme"
    ]);
    var _theme_colors, _theme_fonts;
    var theme = (0, _theming.useInternalTheme)(themeOverrides);
    var textColor = (0, _color.default)(theme.isV3 ? theme.colors.onSurface : (_theme_colors = theme.colors) == null ? void 0 : _theme_colors.text).alpha(alpha).rgb().string();
    var writingDirection = _reactnative.I18nManager.getConstants().isRTL ? 'rtl' : 'ltr';
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Text.default, _extends._({}, rest, {
        style: [
            styles.text,
            _extends._({
                color: textColor
            }, !theme.isV3 && ((_theme_fonts = theme.fonts) == null ? void 0 : _theme_fonts[family]), {
                writingDirection: writingDirection
            }),
            style
        ]
    }));
};
var styles = _reactnative.StyleSheet.create({
    text: {
        textAlign: 'left'
    }
});
var _default = StyledText;


}),
"93314": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _StyledText = /*#__PURE__*/ _interop_require_default._(__webpack_require__(6508));
// @component-group Typography
/**
 * Typography component for showing a subheading.
 *
 * <div class="screenshots">
 *   <img src="screenshots/subheading.png" />
 * </div>
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Subheading } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Subheading>Subheading</Subheading>
 * );
 *
 * export default MyComponent;
 * ```
 */ var Subheading = function(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_StyledText.default, _extends._({}, props, {
        alpha: 0.87,
        family: "regular",
        style: [
            styles.text,
            props.style
        ]
    }));
};
var _default = Subheading;
var styles = _reactnative.StyleSheet.create({
    text: {
        fontSize: 16,
        lineHeight: 24,
        marginVertical: 2,
        letterSpacing: 0.5
    }
});


}),
"16090": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_wildcard = __webpack_require__(3557);
var _object_without_properties_loose = __webpack_require__(56242);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _theming = __webpack_require__(10968);
var _forwardRef = __webpack_require__(45835);
// @component-group Typography
/**
 * Text component which follows styles from the theme.
 *
 * @extends Text props https://reactnative.dev/docs/text#props
 */ var Text = function(_param, ref) {
    var style = _param.style, overrideTheme = _param.theme, rest = _object_without_properties_loose._(_param, [
        "style",
        "theme"
    ]);
    var _theme_fonts, _theme_colors;
    var root = _react.useRef(null);
    var theme = (0, _theming.useInternalTheme)(overrideTheme);
    _react.useImperativeHandle(ref, function() {
        return {
            setNativeProps: function(args) {
                var _root_current;
                return (_root_current = root.current) == null ? void 0 : _root_current.setNativeProps(args);
            }
        };
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.Text, _extends._({}, rest, {
        ref: root,
        style: [
            _extends._({}, !theme.isV3 && ((_theme_fonts = theme.fonts) == null ? void 0 : _theme_fonts.regular), {
                color: theme.isV3 ? (_theme_colors = theme.colors) == null ? void 0 : _theme_colors.onSurface : theme.colors.text
            }),
            styles.text,
            style
        ]
    }));
};
var styles = _reactnative.StyleSheet.create({
    text: {
        textAlign: 'left'
    }
});
var _default = (0, _forwardRef.forwardRef)(Text);


}),
"14041": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _StyledText = /*#__PURE__*/ _interop_require_default._(__webpack_require__(6508));
// @component-group Typography
/**
 * Typography component for showing a title.
 *
 * <div class="screenshots">
 *   <img src="screenshots/title.png" />
 * </div>
 *
 * ## Usage
 * ```js
 * import * as React from 'react';
 * import { Title } from 'react-native-paper';
 *
 * const MyComponent = () => (
 *   <Title>Title</Title>
 * );
 *
 * export default MyComponent;
 * ```
 */ var Title = function(props) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_StyledText.default, _extends._({}, props, {
        alpha: 0.87,
        family: "medium",
        style: [
            styles.text,
            props.style
        ]
    }));
};
var _default = Title;
var styles = _reactnative.StyleSheet.create({
    text: {
        fontSize: 20,
        lineHeight: 30,
        marginVertical: 2,
        letterSpacing: 0.15
    }
});


}),
"77942": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "APPROX_STATUSBAR_HEIGHT", ({
    enumerable: true,
    get: function() {
        return APPROX_STATUSBAR_HEIGHT;
    }
}));
var _reactnative = __webpack_require__(44963);
var _NativeModules_NativeUnimoduleProxy_modulesConstants_ExponentConstants, _NativeModules_NativeUnimoduleProxy_modulesConstants, _NativeModules_NativeUnimoduleProxy;
var _NativeModules_NativeUnimoduleProxy_modulesConstants_ExponentConstants_statusBarHeight;
// Use the existence of expo-constants as a heuristic for determining if the
// status bar is translucent on Android. This should be replaced in the future
// with react-native-safe-area-context.
var estimatedStatusBarHeight = (_NativeModules_NativeUnimoduleProxy_modulesConstants_ExponentConstants_statusBarHeight = (_NativeModules_NativeUnimoduleProxy = _reactnative.NativeModules.NativeUnimoduleProxy) == null ? void 0 : (_NativeModules_NativeUnimoduleProxy_modulesConstants = _NativeModules_NativeUnimoduleProxy.modulesConstants) == null ? void 0 : (_NativeModules_NativeUnimoduleProxy_modulesConstants_ExponentConstants = _NativeModules_NativeUnimoduleProxy_modulesConstants.ExponentConstants) == null ? void 0 : _NativeModules_NativeUnimoduleProxy_modulesConstants_ExponentConstants.statusBarHeight) != null ? _NativeModules_NativeUnimoduleProxy_modulesConstants_ExponentConstants_statusBarHeight : 0;
var APPROX_STATUSBAR_HEIGHT = _reactnative.Platform.select({
    android: estimatedStatusBarHeight,
    ios: _reactnative.Platform.Version < 11 ? estimatedStatusBarHeight : 0
});


}),
"41618": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _sliced_to_array = __webpack_require__(38097);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _SafeAreaProviderCompat = /*#__PURE__*/ _interop_require_default._(__webpack_require__(63219));
var _settings = __webpack_require__(97527);
var _theming = __webpack_require__(10968);
var _MaterialCommunityIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(81045));
var _PortalHost = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3059));
var _addEventListener = __webpack_require__(74897);
var PaperProvider = function(props) {
    var isOnlyVersionInTheme = props.theme && Object.keys(props.theme).length === 1 && props.theme.version;
    var colorSchemeName = (!props.theme || isOnlyVersionInTheme) && (_reactnative.Appearance == null ? void 0 : _reactnative.Appearance.getColorScheme()) || 'light';
    var _React_useState = _sliced_to_array._(_react.useState(false), 2), reduceMotionEnabled = _React_useState[0], setReduceMotionEnabled = _React_useState[1];
    var _React_useState1 = _sliced_to_array._(_react.useState(colorSchemeName), 2), colorScheme = _React_useState1[0], setColorScheme = _React_useState1[1];
    var handleAppearanceChange = function(preferences) {
        var colorScheme = preferences.colorScheme;
        setColorScheme(colorScheme);
    };
    _react.useEffect(function() {
        var subscription;
        if (!props.theme) {
            subscription = (0, _addEventListener.addEventListener)(_reactnative.AccessibilityInfo, 'reduceMotionChanged', setReduceMotionEnabled);
        }
        return function() {
            if (!props.theme) {
                subscription == null ? void 0 : subscription.remove();
            }
        };
    }, [
        props.theme
    ]);
    _react.useEffect(function() {
        var appearanceSubscription;
        if (!props.theme || isOnlyVersionInTheme) {
            appearanceSubscription = _reactnative.Appearance == null ? void 0 : _reactnative.Appearance.addChangeListener(handleAppearanceChange);
        }
        return function() {
            if (!props.theme || isOnlyVersionInTheme) {
                if (appearanceSubscription) {
                    appearanceSubscription.remove();
                } else {
                    // @ts-expect-error: We keep deprecated listener remove method for backwards compat with old RN versions
                    _reactnative.Appearance == null ? void 0 : _reactnative.Appearance.removeChangeListener(handleAppearanceChange);
                }
            }
        };
    }, [
        props.theme,
        isOnlyVersionInTheme
    ]);
    var getTheme = function() {
        var _props_theme, _props_theme1;
        var themeVersion = ((_props_theme = props.theme) == null ? void 0 : _props_theme.version) || 3;
        var scheme = colorScheme || 'light';
        var defaultThemeBase = _theming.defaultThemesByVersion[themeVersion][scheme];
        var extendedThemeBase = _extends._({}, defaultThemeBase, props.theme, {
            version: themeVersion,
            animation: _extends._({}, (_props_theme1 = props.theme) == null ? void 0 : _props_theme1.animation, {
                scale: reduceMotionEnabled ? 0 : 1
            })
        });
        return _extends._({}, extendedThemeBase, {
            isV3: extendedThemeBase.version === 3
        });
    };
    var children = props.children, settings = props.settings;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_SafeAreaProviderCompat.default, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_PortalHost.default, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_settings.Provider, {
                value: _extends._({
                    icon: _MaterialCommunityIcon.default,
                    rippleEffectEnabled: true
                }, settings),
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_theming.ThemeProvider, {
                    theme: getTheme(),
                    children: children
                })
            })
        })
    });
};
var _default = PaperProvider;


}),
"63219": (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Ported from @react-navigation https://github.com/react-navigation/react-navigation/blob/main/packages/elements/src/SafeAreaProviderCompat.tsx
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return SafeAreaProviderCompat;
    }
}));
var _interop_require_wildcard = __webpack_require__(3557);
var _jsxruntime = __webpack_require__(31549);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
var _reactnativesafeareacontext = __webpack_require__(24144);
var _Dimensions_get = _reactnative.Dimensions.get('window'), _Dimensions_get_width = _Dimensions_get.width, width = _Dimensions_get_width === void 0 ? 0 : _Dimensions_get_width, _Dimensions_get_height = _Dimensions_get.height, height = _Dimensions_get_height === void 0 ? 0 : _Dimensions_get_height;
// To support SSR on web, we need to have empty insets for initial values
// Otherwise there can be mismatch between SSR and client output
// We also need to specify empty values to support tests environments
var initialMetrics = _reactnative.Platform.OS === 'web' || _reactnativesafeareacontext.initialWindowMetrics == null ? {
    frame: {
        x: 0,
        y: 0,
        width: width,
        height: height
    },
    insets: {
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
    }
} : _reactnativesafeareacontext.initialWindowMetrics;
function SafeAreaProviderCompat(param) {
    var children = param.children, style = param.style;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnativesafeareacontext.SafeAreaInsetsContext.Consumer, {
        children: function(insets) {
            if (insets) {
                // If we already have insets, don't wrap the stack in another safe area provider
                // This avoids an issue with updates at the cost of potentially incorrect values
                // https://github.com/react-navigation/react-navigation/issues/174
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnative.View, {
                    style: [
                        styles.container,
                        style
                    ],
                    children: children
                });
            }
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactnativesafeareacontext.SafeAreaProvider, {
                initialMetrics: initialMetrics,
                style: style,
                children: children
            });
        }
    });
}
SafeAreaProviderCompat.initialMetrics = initialMetrics;
var styles = _reactnative.StyleSheet.create({
    container: {
        flex: 1
    }
});


}),
"97527": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Consumer: function() {
        return Consumer;
    },
    Provider: function() {
        return Provider;
    },
    SettingsContext: function() {
        return SettingsContext;
    }
});
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _MaterialCommunityIcon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(81045));
var SettingsContext = /*#__PURE__*/ _react.createContext({
    icon: _MaterialCommunityIcon.default,
    rippleEffectEnabled: true
});
var Provider = SettingsContext.Provider, Consumer = SettingsContext.Consumer;


}),
"10968": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DefaultTheme: function() {
        return DefaultTheme;
    },
    ThemeProvider: function() {
        return ThemeProvider;
    },
    adaptNavigationTheme: function() {
        return adaptNavigationTheme;
    },
    defaultThemesByVersion: function() {
        return defaultThemesByVersion;
    },
    getDynamicThemeElevations: function() {
        return getDynamicThemeElevations;
    },
    getTheme: function() {
        return getTheme;
    },
    useAppTheme: function() {
        return useAppTheme;
    },
    useInternalTheme: function() {
        return useInternalTheme;
    },
    useTheme: function() {
        return useTheme;
    },
    withInternalTheme: function() {
        return withInternalTheme;
    },
    withTheme: function() {
        return withTheme;
    }
});
var _define_property = __webpack_require__(11649);
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _reactthemeprovider = __webpack_require__(34796);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _themes = __webpack_require__(6637);
var DefaultTheme = _themes.MD3LightTheme;
var _createTheming = (0, _reactthemeprovider.createTheming)(_themes.MD3LightTheme);
var ThemeProvider = _createTheming.ThemeProvider, withTheme = _createTheming.withTheme, useAppTheme = _createTheming.useTheme;
function useTheme(overrides) {
    return useAppTheme(overrides);
}
var useInternalTheme = function(themeOverrides) {
    return useAppTheme(themeOverrides);
};
var withInternalTheme = function(WrappedComponent) {
    return withTheme(WrappedComponent);
};
var defaultThemesByVersion = {
    2: {
        light: _themes.MD2LightTheme,
        dark: _themes.MD2DarkTheme
    },
    3: {
        light: _themes.MD3LightTheme,
        dark: _themes.MD3DarkTheme
    }
};
var getTheme = function(isDark, isV3) {
    if (isDark === void 0) isDark = false;
    if (isV3 === void 0) isV3 = true;
    var themeVersion = isV3 ? 3 : 2;
    var scheme = isDark ? 'dark' : 'light';
    return defaultThemesByVersion[themeVersion][scheme];
};
function adaptNavigationTheme(themes) {
    var reactNavigationLight = themes.reactNavigationLight, reactNavigationDark = themes.reactNavigationDark, materialLight = themes.materialLight, materialDark = themes.materialDark;
    var getAdaptedTheme = function(navigationTheme, MD3Theme) {
        return _extends._({}, navigationTheme, {
            colors: _extends._({}, navigationTheme.colors, {
                primary: MD3Theme.colors.primary,
                background: MD3Theme.colors.background,
                card: MD3Theme.colors.elevation.level2,
                text: MD3Theme.colors.onSurface,
                border: MD3Theme.colors.outline,
                notification: MD3Theme.colors.error
            })
        });
    };
    var MD3Themes = {
        light: materialLight || _themes.MD3LightTheme,
        dark: materialDark || _themes.MD3DarkTheme
    };
    if (reactNavigationLight && reactNavigationDark) {
        var modes = [
            'light',
            'dark'
        ];
        var NavigationThemes = {
            light: reactNavigationLight,
            dark: reactNavigationDark
        };
        var _modes_reduce = modes.reduce(function(prev, curr) {
            return _extends._({}, prev, _define_property._({}, curr, getAdaptedTheme(NavigationThemes[curr], MD3Themes[curr])));
        }, {
            light: reactNavigationLight,
            dark: reactNavigationDark
        }), adaptedLight = _modes_reduce.light, adaptedDark = _modes_reduce.dark;
        return {
            LightTheme: adaptedLight,
            DarkTheme: adaptedDark
        };
    }
    if (reactNavigationDark) {
        return {
            DarkTheme: getAdaptedTheme(reactNavigationDark, MD3Themes.dark)
        };
    }
    return {
        LightTheme: getAdaptedTheme(reactNavigationLight, MD3Themes.light)
    };
}
var getDynamicThemeElevations = function(scheme) {
    var elevationValues = [
        'transparent',
        0.05,
        0.08,
        0.11,
        0.12,
        0.14
    ];
    return elevationValues.reduce(function(elevations, elevationValue, index) {
        return _extends._({}, elevations, _define_property._({}, "level" + index, index === 0 ? elevationValue : (0, _color.default)(scheme.surface).mix((0, _color.default)(scheme.primary), elevationValue).rgb().string()));
    }, {});
};


}),
"17216": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ActivityIndicator: function() {
        return _ActivityIndicator.default;
    },
    AnimatedFAB: function() {
        return _AnimatedFAB.default;
    },
    Appbar: function() {
        return _Appbar.default;
    },
    Avatar: function() {
        return _Avatar;
    },
    Badge: function() {
        return _Badge.default;
    },
    Banner: function() {
        return _Banner.default;
    },
    BottomNavigation: function() {
        return _BottomNavigation.default;
    },
    Button: function() {
        return _Button.default;
    },
    Caption: function() {
        return _v2.Caption;
    },
    Card: function() {
        return _Card.default;
    },
    Checkbox: function() {
        return _Checkbox.default;
    },
    Chip: function() {
        return _Chip.default;
    },
    DataTable: function() {
        return _DataTable.default;
    },
    DefaultTheme: function() {
        return _theming.DefaultTheme;
    },
    Dialog: function() {
        return _Dialog.default;
    },
    Divider: function() {
        return _Divider.default;
    },
    Drawer: function() {
        return _Drawer;
    },
    FAB: function() {
        return _FAB.default;
    },
    Headline: function() {
        return _v2.Headline;
    },
    HelperText: function() {
        return _HelperText.default;
    },
    Icon: function() {
        return _Icon.default;
    },
    IconButton: function() {
        return _IconButton.default;
    },
    List: function() {
        return _List;
    },
    MD2Colors: function() {
        return _colors;
    },
    MD3Colors: function() {
        return _tokens.MD3Colors;
    },
    Menu: function() {
        return _Menu.default;
    },
    Modal: function() {
        return _Modal.default;
    },
    PaperProvider: function() {
        return _PaperProvider.default;
    },
    Paragraph: function() {
        return _v2.Paragraph;
    },
    Portal: function() {
        return _Portal.default;
    },
    ProgressBar: function() {
        return _ProgressBar.default;
    },
    Provider: function() {
        return _PaperProvider.default;
    },
    RadioButton: function() {
        return _RadioButton.default;
    },
    Searchbar: function() {
        return _Searchbar.default;
    },
    SegmentedButtons: function() {
        return _SegmentedButtons.default;
    },
    Snackbar: function() {
        return _Snackbar.default;
    },
    Subheading: function() {
        return _v2.Subheading;
    },
    Surface: function() {
        return _Surface.default;
    },
    Switch: function() {
        return _Switch.default;
    },
    Text: function() {
        return _Text.default;
    },
    TextInput: function() {
        return _TextInput.default;
    },
    ThemeProvider: function() {
        return _theming.ThemeProvider;
    },
    Title: function() {
        return _v2.Title;
    },
    ToggleButton: function() {
        return _ToggleButton.default;
    },
    Tooltip: function() {
        return _Tooltip.default;
    },
    TouchableRipple: function() {
        return _TouchableRipple.default;
    },
    adaptNavigationTheme: function() {
        return _theming.adaptNavigationTheme;
    },
    configureFonts: function() {
        return _fonts.default;
    },
    customText: function() {
        return _Text.customText;
    },
    overlay: function() {
        return _overlay.default;
    },
    shadow: function() {
        return _shadow.default;
    },
    useTheme: function() {
        return _theming.useTheme;
    },
    withTheme: function() {
        return _theming.withTheme;
    }
});
var _export_star = __webpack_require__(4318);
var _interop_require_default = __webpack_require__(60133);
var _interop_require_wildcard = __webpack_require__(3557);
var _tokens = __webpack_require__(95157);
var _theming = __webpack_require__(10968);
_export_star._(__webpack_require__(6637), exports);
var _PaperProvider = /*#__PURE__*/ _interop_require_default._(__webpack_require__(41618));
var _shadow = /*#__PURE__*/ _interop_require_default._(__webpack_require__(83741));
var _overlay = /*#__PURE__*/ _interop_require_default._(__webpack_require__(87701));
var _fonts = /*#__PURE__*/ _interop_require_default._(__webpack_require__(97728));
var _Avatar = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(31947));
var _Drawer = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(42538));
var _List = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(96572));
var _colors = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(18847));
var _AnimatedFAB = /*#__PURE__*/ _interop_require_default._(_export_star._(__webpack_require__(61659), exports));
var _Badge = /*#__PURE__*/ _interop_require_default._(__webpack_require__(60515));
var _ActivityIndicator = /*#__PURE__*/ _interop_require_default._(__webpack_require__(94908));
var _Banner = /*#__PURE__*/ _interop_require_default._(__webpack_require__(54711));
var _BottomNavigation = /*#__PURE__*/ _interop_require_default._(__webpack_require__(60028));
var _Button = /*#__PURE__*/ _interop_require_default._(__webpack_require__(79972));
var _Card = /*#__PURE__*/ _interop_require_default._(__webpack_require__(88649));
var _Checkbox = /*#__PURE__*/ _interop_require_default._(__webpack_require__(7115));
var _Chip = /*#__PURE__*/ _interop_require_default._(__webpack_require__(73692));
var _DataTable = /*#__PURE__*/ _interop_require_default._(__webpack_require__(600));
var _Dialog = /*#__PURE__*/ _interop_require_default._(__webpack_require__(57421));
var _Divider = /*#__PURE__*/ _interop_require_default._(__webpack_require__(62550));
var _FAB = /*#__PURE__*/ _interop_require_default._(__webpack_require__(35450));
var _HelperText = /*#__PURE__*/ _interop_require_default._(__webpack_require__(36586));
var _Icon = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80639));
var _IconButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(86395));
var _Menu = /*#__PURE__*/ _interop_require_default._(__webpack_require__(7350));
var _Modal = /*#__PURE__*/ _interop_require_default._(__webpack_require__(23213));
var _Portal = /*#__PURE__*/ _interop_require_default._(__webpack_require__(4844));
var _ProgressBar = /*#__PURE__*/ _interop_require_default._(__webpack_require__(59596));
var _RadioButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(76372));
var _Searchbar = /*#__PURE__*/ _interop_require_default._(__webpack_require__(20886));
var _Snackbar = /*#__PURE__*/ _interop_require_default._(__webpack_require__(8996));
var _Surface = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2403));
var _Switch = /*#__PURE__*/ _interop_require_default._(__webpack_require__(80822));
var _Appbar = /*#__PURE__*/ _interop_require_default._(__webpack_require__(59545));
var _TouchableRipple = /*#__PURE__*/ _interop_require_default._(__webpack_require__(84987));
var _TextInput = /*#__PURE__*/ _interop_require_default._(__webpack_require__(68568));
var _ToggleButton = /*#__PURE__*/ _interop_require_default._(__webpack_require__(95750));
var _SegmentedButtons = /*#__PURE__*/ _interop_require_default._(__webpack_require__(89493));
var _Tooltip = /*#__PURE__*/ _interop_require_default._(__webpack_require__(58102));
var _v2 = __webpack_require__(74161);
var _Text = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(15588));


}),
"97728": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    // eslint-disable-next-line no-redeclare
    default: function() {
        return configureFonts;
    },
    fontConfig: function() {
        return fontConfig;
    }
});
var _define_property = __webpack_require__(11649);
var _extends = __webpack_require__(88410);
var _sliced_to_array = __webpack_require__(38097);
var _to_consumable_array = __webpack_require__(2670);
var _type_of = __webpack_require__(15576);
var _reactnative = __webpack_require__(44963);
var _tokens = __webpack_require__(95157);
var fontConfig = {
    web: {
        regular: {
            fontFamily: 'Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif',
            fontWeight: '400'
        },
        medium: {
            fontFamily: 'Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif',
            fontWeight: '500'
        },
        light: {
            fontFamily: 'Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif',
            fontWeight: '300'
        },
        thin: {
            fontFamily: 'Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif',
            fontWeight: '100'
        }
    },
    ios: {
        regular: {
            fontFamily: 'System',
            fontWeight: '400'
        },
        medium: {
            fontFamily: 'System',
            fontWeight: '500'
        },
        light: {
            fontFamily: 'System',
            fontWeight: '300'
        },
        thin: {
            fontFamily: 'System',
            fontWeight: '100'
        }
    },
    "default": {
        regular: {
            fontFamily: 'sans-serif',
            fontWeight: 'normal'
        },
        medium: {
            fontFamily: 'sans-serif-medium',
            fontWeight: 'normal'
        },
        light: {
            fontFamily: 'sans-serif-light',
            fontWeight: 'normal'
        },
        thin: {
            fontFamily: 'sans-serif-thin',
            fontWeight: 'normal'
        }
    }
};
function configureV2Fonts(config) {
    var fonts = _reactnative.Platform.select(_extends._({}, fontConfig, config));
    return fonts;
}
function configureV3Fonts(config) {
    var _Object;
    if (!config) {
        return _tokens.typescale;
    }
    var isFlatConfig = Object.keys(config).every(function(key) {
        return _type_of._(config[key]) !== 'object';
    });
    if (isFlatConfig) {
        return Object.fromEntries(Object.entries(_tokens.typescale).map(function(param) {
            var _param = _sliced_to_array._(param, 2), variantName = _param[0], variantProperties = _param[1];
            return [
                variantName,
                _extends._({}, variantProperties, config)
            ];
        }));
    }
    return (_Object = Object).assign.apply(_Object, [
        {},
        _tokens.typescale
    ].concat(_to_consumable_array._(Object.entries(config).map(function(param) {
        var _param = _sliced_to_array._(param, 2), variantName = _param[0], variantProperties = _param[1];
        return _define_property._({}, variantName, _extends._({}, _tokens.typescale[variantName], variantProperties));
    }))));
}
function configureFonts(params) {
    var _ref = params || {}, _ref_isV3 = _ref.isV3, isV3 = _ref_isV3 === void 0 ? true : _ref_isV3, config = _ref.config;
    if (isV3) {
        return configureV3Fonts(config);
    }
    return configureV2Fonts(config);
}


}),
"87701": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return overlay;
    },
    isAnimatedValue: function() {
        return isAnimatedValue;
    }
});
var _interop_require_default = __webpack_require__(60133);
var _reactnative = __webpack_require__(44963);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _DarkTheme = __webpack_require__(46782);
var isAnimatedValue = function(it) {
    return it instanceof _reactnative.Animated.Value;
};
function overlay(elevation, surfaceColor) {
    if (surfaceColor === void 0) surfaceColor = function() {
        var _MD2DarkTheme_colors;
        return (_MD2DarkTheme_colors = _DarkTheme.MD2DarkTheme.colors) == null ? void 0 : _MD2DarkTheme_colors.surface;
    }();
    if (isAnimatedValue(elevation)) {
        var inputRange = [
            0,
            1,
            2,
            3,
            8,
            24
        ];
        // @ts-expect-error: TS doesn't seem to refine the type correctly
        return elevation.interpolate({
            inputRange: inputRange,
            outputRange: inputRange.map(function(elevation) {
                return calculateColor(surfaceColor, elevation);
            })
        });
    }
    // @ts-expect-error: TS doesn't seem to refine the type correctly
    return calculateColor(surfaceColor, elevation);
}
function calculateColor(surfaceColor, elevation) {
    if (elevation === void 0) elevation = 1;
    var overlayTransparency;
    if (elevation >= 1 && elevation <= 24) {
        overlayTransparency = elevationOverlayTransparency[elevation];
    } else if (elevation > 24) {
        overlayTransparency = elevationOverlayTransparency[24];
    } else {
        overlayTransparency = elevationOverlayTransparency[1];
    }
    return (0, _color.default)(surfaceColor).mix((0, _color.default)('white'), overlayTransparency * 0.01).hex();
}
var elevationOverlayTransparency = {
    1: 5,
    2: 7,
    3: 8,
    4: 9,
    5: 10,
    6: 11,
    7: 11.5,
    8: 12,
    9: 12.5,
    10: 13,
    11: 13.5,
    12: 14,
    13: 14.25,
    14: 14.5,
    15: 14.75,
    16: 15,
    17: 15.12,
    18: 15.24,
    19: 15.36,
    20: 15.48,
    21: 15.6,
    22: 15.72,
    23: 15.84,
    24: 16
};


}),
"83741": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return shadow;
    }
}));
var _interop_require_wildcard = __webpack_require__(3557);
var _reactnative = __webpack_require__(44963);
var _colors = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(18847));
var _tokens = __webpack_require__(95157);
var SHADOW_COLOR = _colors.black;
var SHADOW_OPACITY = 0.24;
var MD3_SHADOW_OPACITY = 0.3;
var MD3_SHADOW_COLOR = _tokens.MD3Colors.primary0;
function shadow(elevation, isV3) {
    if (elevation === void 0) elevation = 0;
    if (isV3 === void 0) isV3 = false;
    return isV3 ? v3Shadow(elevation) : v2Shadow(elevation);
}
function v2Shadow(elevation) {
    if (elevation === void 0) elevation = 0;
    if (elevation instanceof _reactnative.Animated.Value) {
        var inputRange = [
            0,
            1,
            2,
            3,
            8,
            24
        ];
        return {
            shadowColor: SHADOW_COLOR,
            shadowOffset: {
                width: new _reactnative.Animated.Value(0),
                height: elevation.interpolate({
                    inputRange: inputRange,
                    outputRange: [
                        0,
                        0.5,
                        0.75,
                        2,
                        7,
                        23
                    ]
                })
            },
            shadowOpacity: elevation.interpolate({
                inputRange: [
                    0,
                    1
                ],
                outputRange: [
                    0,
                    SHADOW_OPACITY
                ],
                extrapolate: 'clamp'
            }),
            shadowRadius: elevation.interpolate({
                inputRange: inputRange,
                outputRange: [
                    0,
                    0.75,
                    1.5,
                    3,
                    8,
                    24
                ]
            })
        };
    } else {
        if (elevation === 0) {
            return {};
        }
        var height, radius;
        switch(elevation){
            case 1:
                height = 0.5;
                radius = 0.75;
                break;
            case 2:
                height = 0.75;
                radius = 1.5;
                break;
            default:
                height = elevation - 1;
                radius = elevation;
        }
        return {
            shadowColor: SHADOW_COLOR,
            shadowOffset: {
                width: 0,
                height: height
            },
            shadowOpacity: SHADOW_OPACITY,
            shadowRadius: radius
        };
    }
}
function v3Shadow(elevation) {
    if (elevation === void 0) elevation = 0;
    var inputRange = [
        0,
        1,
        2,
        3,
        4,
        5
    ];
    var shadowHeight = [
        0,
        1,
        2,
        4,
        6,
        8
    ];
    var shadowRadius = [
        0,
        3,
        6,
        8,
        10,
        12
    ];
    if (elevation instanceof _reactnative.Animated.Value) {
        return {
            shadowColor: MD3_SHADOW_COLOR,
            shadowOffset: {
                width: new _reactnative.Animated.Value(0),
                height: elevation.interpolate({
                    inputRange: inputRange,
                    outputRange: shadowHeight
                })
            },
            shadowOpacity: elevation.interpolate({
                inputRange: [
                    0,
                    1
                ],
                outputRange: [
                    0,
                    MD3_SHADOW_OPACITY
                ],
                extrapolate: 'clamp'
            }),
            shadowRadius: elevation.interpolate({
                inputRange: inputRange,
                outputRange: shadowRadius
            })
        };
    } else {
        return {
            shadowColor: MD3_SHADOW_COLOR,
            shadowOpacity: elevation ? MD3_SHADOW_OPACITY : 0,
            shadowOffset: {
                width: 0,
                height: shadowHeight[elevation]
            },
            shadowRadius: shadowRadius[elevation]
        };
    }
}


}),
"46782": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "MD2DarkTheme", ({
    enumerable: true,
    get: function() {
        return MD2DarkTheme;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _colors = __webpack_require__(18847);
var _LightTheme = __webpack_require__(90474);
var _fonts = /*#__PURE__*/ _interop_require_default._(__webpack_require__(97728));
var MD2DarkTheme = _extends._({}, _LightTheme.MD2LightTheme, {
    dark: true,
    mode: 'adaptive',
    version: 2,
    isV3: false,
    colors: _extends._({}, _LightTheme.MD2LightTheme.colors, {
        primary: '#BB86FC',
        accent: '#03dac6',
        background: '#121212',
        surface: '#121212',
        error: '#CF6679',
        onSurface: '#FFFFFF',
        text: _colors.white,
        disabled: (0, _color.default)(_colors.white).alpha(0.38).rgb().string(),
        placeholder: (0, _color.default)(_colors.white).alpha(0.54).rgb().string(),
        backdrop: (0, _color.default)(_colors.black).alpha(0.5).rgb().string(),
        notification: _colors.pinkA100,
        tooltip: 'rgba(230, 225, 229, 1)'
    }),
    fonts: (0, _fonts.default)({
        isV3: false
    })
});


}),
"90474": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "MD2LightTheme", ({
    enumerable: true,
    get: function() {
        return MD2LightTheme;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _colors = __webpack_require__(18847);
var _fonts = /*#__PURE__*/ _interop_require_default._(__webpack_require__(97728));
var MD2LightTheme = {
    dark: false,
    roundness: 4,
    version: 2,
    isV3: false,
    colors: {
        primary: '#6200ee',
        accent: '#03dac4',
        background: '#f6f6f6',
        surface: _colors.white,
        error: '#B00020',
        text: _colors.black,
        onSurface: '#000000',
        disabled: (0, _color.default)(_colors.black).alpha(0.26).rgb().string(),
        placeholder: (0, _color.default)(_colors.black).alpha(0.54).rgb().string(),
        backdrop: (0, _color.default)(_colors.black).alpha(0.5).rgb().string(),
        notification: _colors.pinkA400,
        tooltip: 'rgba(28, 27, 31, 1)'
    },
    fonts: (0, _fonts.default)({
        isV3: false
    }),
    animation: {
        scale: 1.0
    }
};


}),
"18847": (function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    amber100: function() {
        return amber100;
    },
    amber200: function() {
        return amber200;
    },
    amber300: function() {
        return amber300;
    },
    amber400: function() {
        return amber400;
    },
    amber50: function() {
        return amber50;
    },
    amber500: function() {
        return amber500;
    },
    amber600: function() {
        return amber600;
    },
    amber700: function() {
        return amber700;
    },
    amber800: function() {
        return amber800;
    },
    amber900: function() {
        return amber900;
    },
    amberA100: function() {
        return amberA100;
    },
    amberA200: function() {
        return amberA200;
    },
    amberA400: function() {
        return amberA400;
    },
    amberA700: function() {
        return amberA700;
    },
    black: function() {
        return black;
    },
    blue100: function() {
        return blue100;
    },
    blue200: function() {
        return blue200;
    },
    blue300: function() {
        return blue300;
    },
    blue400: function() {
        return blue400;
    },
    blue50: function() {
        return blue50;
    },
    blue500: function() {
        return blue500;
    },
    blue600: function() {
        return blue600;
    },
    blue700: function() {
        return blue700;
    },
    blue800: function() {
        return blue800;
    },
    blue900: function() {
        return blue900;
    },
    blueA100: function() {
        return blueA100;
    },
    blueA200: function() {
        return blueA200;
    },
    blueA400: function() {
        return blueA400;
    },
    blueA700: function() {
        return blueA700;
    },
    blueGrey100: function() {
        return blueGrey100;
    },
    blueGrey200: function() {
        return blueGrey200;
    },
    blueGrey300: function() {
        return blueGrey300;
    },
    blueGrey400: function() {
        return blueGrey400;
    },
    blueGrey50: function() {
        return blueGrey50;
    },
    blueGrey500: function() {
        return blueGrey500;
    },
    blueGrey600: function() {
        return blueGrey600;
    },
    blueGrey700: function() {
        return blueGrey700;
    },
    blueGrey800: function() {
        return blueGrey800;
    },
    blueGrey900: function() {
        return blueGrey900;
    },
    brown100: function() {
        return brown100;
    },
    brown200: function() {
        return brown200;
    },
    brown300: function() {
        return brown300;
    },
    brown400: function() {
        return brown400;
    },
    brown50: function() {
        return brown50;
    },
    brown500: function() {
        return brown500;
    },
    brown600: function() {
        return brown600;
    },
    brown700: function() {
        return brown700;
    },
    brown800: function() {
        return brown800;
    },
    brown900: function() {
        return brown900;
    },
    cyan100: function() {
        return cyan100;
    },
    cyan200: function() {
        return cyan200;
    },
    cyan300: function() {
        return cyan300;
    },
    cyan400: function() {
        return cyan400;
    },
    cyan50: function() {
        return cyan50;
    },
    cyan500: function() {
        return cyan500;
    },
    cyan600: function() {
        return cyan600;
    },
    cyan700: function() {
        return cyan700;
    },
    cyan800: function() {
        return cyan800;
    },
    cyan900: function() {
        return cyan900;
    },
    cyanA100: function() {
        return cyanA100;
    },
    cyanA200: function() {
        return cyanA200;
    },
    cyanA400: function() {
        return cyanA400;
    },
    cyanA700: function() {
        return cyanA700;
    },
    deepOrange100: function() {
        return deepOrange100;
    },
    deepOrange200: function() {
        return deepOrange200;
    },
    deepOrange300: function() {
        return deepOrange300;
    },
    deepOrange400: function() {
        return deepOrange400;
    },
    deepOrange50: function() {
        return deepOrange50;
    },
    deepOrange500: function() {
        return deepOrange500;
    },
    deepOrange600: function() {
        return deepOrange600;
    },
    deepOrange700: function() {
        return deepOrange700;
    },
    deepOrange800: function() {
        return deepOrange800;
    },
    deepOrange900: function() {
        return deepOrange900;
    },
    deepOrangeA100: function() {
        return deepOrangeA100;
    },
    deepOrangeA200: function() {
        return deepOrangeA200;
    },
    deepOrangeA400: function() {
        return deepOrangeA400;
    },
    deepOrangeA700: function() {
        return deepOrangeA700;
    },
    deepPurple100: function() {
        return deepPurple100;
    },
    deepPurple200: function() {
        return deepPurple200;
    },
    deepPurple300: function() {
        return deepPurple300;
    },
    deepPurple400: function() {
        return deepPurple400;
    },
    deepPurple50: function() {
        return deepPurple50;
    },
    deepPurple500: function() {
        return deepPurple500;
    },
    deepPurple600: function() {
        return deepPurple600;
    },
    deepPurple700: function() {
        return deepPurple700;
    },
    deepPurple800: function() {
        return deepPurple800;
    },
    deepPurple900: function() {
        return deepPurple900;
    },
    deepPurpleA100: function() {
        return deepPurpleA100;
    },
    deepPurpleA200: function() {
        return deepPurpleA200;
    },
    deepPurpleA400: function() {
        return deepPurpleA400;
    },
    deepPurpleA700: function() {
        return deepPurpleA700;
    },
    green100: function() {
        return green100;
    },
    green200: function() {
        return green200;
    },
    green300: function() {
        return green300;
    },
    green400: function() {
        return green400;
    },
    green50: function() {
        return green50;
    },
    green500: function() {
        return green500;
    },
    green600: function() {
        return green600;
    },
    green700: function() {
        return green700;
    },
    green800: function() {
        return green800;
    },
    green900: function() {
        return green900;
    },
    greenA100: function() {
        return greenA100;
    },
    greenA200: function() {
        return greenA200;
    },
    greenA400: function() {
        return greenA400;
    },
    greenA700: function() {
        return greenA700;
    },
    grey100: function() {
        return grey100;
    },
    grey200: function() {
        return grey200;
    },
    grey300: function() {
        return grey300;
    },
    grey400: function() {
        return grey400;
    },
    grey50: function() {
        return grey50;
    },
    grey500: function() {
        return grey500;
    },
    grey600: function() {
        return grey600;
    },
    grey700: function() {
        return grey700;
    },
    grey800: function() {
        return grey800;
    },
    grey900: function() {
        return grey900;
    },
    indigo100: function() {
        return indigo100;
    },
    indigo200: function() {
        return indigo200;
    },
    indigo300: function() {
        return indigo300;
    },
    indigo400: function() {
        return indigo400;
    },
    indigo50: function() {
        return indigo50;
    },
    indigo500: function() {
        return indigo500;
    },
    indigo600: function() {
        return indigo600;
    },
    indigo700: function() {
        return indigo700;
    },
    indigo800: function() {
        return indigo800;
    },
    indigo900: function() {
        return indigo900;
    },
    indigoA100: function() {
        return indigoA100;
    },
    indigoA200: function() {
        return indigoA200;
    },
    indigoA400: function() {
        return indigoA400;
    },
    indigoA700: function() {
        return indigoA700;
    },
    lightBlue100: function() {
        return lightBlue100;
    },
    lightBlue200: function() {
        return lightBlue200;
    },
    lightBlue300: function() {
        return lightBlue300;
    },
    lightBlue400: function() {
        return lightBlue400;
    },
    lightBlue50: function() {
        return lightBlue50;
    },
    lightBlue500: function() {
        return lightBlue500;
    },
    lightBlue600: function() {
        return lightBlue600;
    },
    lightBlue700: function() {
        return lightBlue700;
    },
    lightBlue800: function() {
        return lightBlue800;
    },
    lightBlue900: function() {
        return lightBlue900;
    },
    lightBlueA100: function() {
        return lightBlueA100;
    },
    lightBlueA200: function() {
        return lightBlueA200;
    },
    lightBlueA400: function() {
        return lightBlueA400;
    },
    lightBlueA700: function() {
        return lightBlueA700;
    },
    lightGreen100: function() {
        return lightGreen100;
    },
    lightGreen200: function() {
        return lightGreen200;
    },
    lightGreen300: function() {
        return lightGreen300;
    },
    lightGreen400: function() {
        return lightGreen400;
    },
    lightGreen50: function() {
        return lightGreen50;
    },
    lightGreen500: function() {
        return lightGreen500;
    },
    lightGreen600: function() {
        return lightGreen600;
    },
    lightGreen700: function() {
        return lightGreen700;
    },
    lightGreen800: function() {
        return lightGreen800;
    },
    lightGreen900: function() {
        return lightGreen900;
    },
    lightGreenA100: function() {
        return lightGreenA100;
    },
    lightGreenA200: function() {
        return lightGreenA200;
    },
    lightGreenA400: function() {
        return lightGreenA400;
    },
    lightGreenA700: function() {
        return lightGreenA700;
    },
    lime100: function() {
        return lime100;
    },
    lime200: function() {
        return lime200;
    },
    lime300: function() {
        return lime300;
    },
    lime400: function() {
        return lime400;
    },
    lime50: function() {
        return lime50;
    },
    lime500: function() {
        return lime500;
    },
    lime600: function() {
        return lime600;
    },
    lime700: function() {
        return lime700;
    },
    lime800: function() {
        return lime800;
    },
    lime900: function() {
        return lime900;
    },
    limeA100: function() {
        return limeA100;
    },
    limeA200: function() {
        return limeA200;
    },
    limeA400: function() {
        return limeA400;
    },
    limeA700: function() {
        return limeA700;
    },
    orange100: function() {
        return orange100;
    },
    orange200: function() {
        return orange200;
    },
    orange300: function() {
        return orange300;
    },
    orange400: function() {
        return orange400;
    },
    orange50: function() {
        return orange50;
    },
    orange500: function() {
        return orange500;
    },
    orange600: function() {
        return orange600;
    },
    orange700: function() {
        return orange700;
    },
    orange800: function() {
        return orange800;
    },
    orange900: function() {
        return orange900;
    },
    orangeA100: function() {
        return orangeA100;
    },
    orangeA200: function() {
        return orangeA200;
    },
    orangeA400: function() {
        return orangeA400;
    },
    orangeA700: function() {
        return orangeA700;
    },
    pink100: function() {
        return pink100;
    },
    pink200: function() {
        return pink200;
    },
    pink300: function() {
        return pink300;
    },
    pink400: function() {
        return pink400;
    },
    pink50: function() {
        return pink50;
    },
    pink500: function() {
        return pink500;
    },
    pink600: function() {
        return pink600;
    },
    pink700: function() {
        return pink700;
    },
    pink800: function() {
        return pink800;
    },
    pink900: function() {
        return pink900;
    },
    pinkA100: function() {
        return pinkA100;
    },
    pinkA200: function() {
        return pinkA200;
    },
    pinkA400: function() {
        return pinkA400;
    },
    pinkA700: function() {
        return pinkA700;
    },
    purple100: function() {
        return purple100;
    },
    purple200: function() {
        return purple200;
    },
    purple300: function() {
        return purple300;
    },
    purple400: function() {
        return purple400;
    },
    purple50: function() {
        return purple50;
    },
    purple500: function() {
        return purple500;
    },
    purple600: function() {
        return purple600;
    },
    purple700: function() {
        return purple700;
    },
    purple800: function() {
        return purple800;
    },
    purple900: function() {
        return purple900;
    },
    purpleA100: function() {
        return purpleA100;
    },
    purpleA200: function() {
        return purpleA200;
    },
    purpleA400: function() {
        return purpleA400;
    },
    purpleA700: function() {
        return purpleA700;
    },
    red100: function() {
        return red100;
    },
    red200: function() {
        return red200;
    },
    red300: function() {
        return red300;
    },
    red400: function() {
        return red400;
    },
    red50: function() {
        return red50;
    },
    red500: function() {
        return red500;
    },
    red600: function() {
        return red600;
    },
    red700: function() {
        return red700;
    },
    red800: function() {
        return red800;
    },
    red900: function() {
        return red900;
    },
    redA100: function() {
        return redA100;
    },
    redA200: function() {
        return redA200;
    },
    redA400: function() {
        return redA400;
    },
    redA700: function() {
        return redA700;
    },
    teal100: function() {
        return teal100;
    },
    teal200: function() {
        return teal200;
    },
    teal300: function() {
        return teal300;
    },
    teal400: function() {
        return teal400;
    },
    teal50: function() {
        return teal50;
    },
    teal500: function() {
        return teal500;
    },
    teal600: function() {
        return teal600;
    },
    teal700: function() {
        return teal700;
    },
    teal800: function() {
        return teal800;
    },
    teal900: function() {
        return teal900;
    },
    tealA100: function() {
        return tealA100;
    },
    tealA200: function() {
        return tealA200;
    },
    tealA400: function() {
        return tealA400;
    },
    tealA700: function() {
        return tealA700;
    },
    transparent: function() {
        return transparent;
    },
    white: function() {
        return white;
    },
    yellow100: function() {
        return yellow100;
    },
    yellow200: function() {
        return yellow200;
    },
    yellow300: function() {
        return yellow300;
    },
    yellow400: function() {
        return yellow400;
    },
    yellow50: function() {
        return yellow50;
    },
    yellow500: function() {
        return yellow500;
    },
    yellow600: function() {
        return yellow600;
    },
    yellow700: function() {
        return yellow700;
    },
    yellow800: function() {
        return yellow800;
    },
    yellow900: function() {
        return yellow900;
    },
    yellowA100: function() {
        return yellowA100;
    },
    yellowA200: function() {
        return yellowA200;
    },
    yellowA400: function() {
        return yellowA400;
    },
    yellowA700: function() {
        return yellowA700;
    }
});
var transparent = 'rgba(255, 255, 255, 0)';
var red50 = '#ffebee';
var red100 = '#ffcdd2';
var red200 = '#ef9a9a';
var red300 = '#e57373';
var red400 = '#ef5350';
var red500 = '#f44336';
var red600 = '#e53935';
var red700 = '#d32f2f';
var red800 = '#c62828';
var red900 = '#b71c1c';
var redA100 = '#ff8a80';
var redA200 = '#ff5252';
var redA400 = '#ff1744';
var redA700 = '#d50000';
var pink50 = '#fce4ec';
var pink100 = '#f8bbd0';
var pink200 = '#f48fb1';
var pink300 = '#f06292';
var pink400 = '#ec407a';
var pink500 = '#e91e63';
var pink600 = '#d81b60';
var pink700 = '#c2185b';
var pink800 = '#ad1457';
var pink900 = '#880e4f';
var pinkA100 = '#ff80ab';
var pinkA200 = '#ff4081';
var pinkA400 = '#f50057';
var pinkA700 = '#c51162';
var purple50 = '#f3e5f5';
var purple100 = '#e1bee7';
var purple200 = '#ce93d8';
var purple300 = '#ba68c8';
var purple400 = '#ab47bc';
var purple500 = '#9c27b0';
var purple600 = '#8e24aa';
var purple700 = '#7b1fa2';
var purple800 = '#6a1b9a';
var purple900 = '#4a148c';
var purpleA100 = '#ea80fc';
var purpleA200 = '#e040fb';
var purpleA400 = '#d500f9';
var purpleA700 = '#aa00ff';
var deepPurple50 = '#ede7f6';
var deepPurple100 = '#d1c4e9';
var deepPurple200 = '#b39ddb';
var deepPurple300 = '#9575cd';
var deepPurple400 = '#7e57c2';
var deepPurple500 = '#673ab7';
var deepPurple600 = '#5e35b1';
var deepPurple700 = '#512da8';
var deepPurple800 = '#4527a0';
var deepPurple900 = '#311b92';
var deepPurpleA100 = '#b388ff';
var deepPurpleA200 = '#7c4dff';
var deepPurpleA400 = '#651fff';
var deepPurpleA700 = '#6200ea';
var indigo50 = '#e8eaf6';
var indigo100 = '#c5cae9';
var indigo200 = '#9fa8da';
var indigo300 = '#7986cb';
var indigo400 = '#5c6bc0';
var indigo500 = '#3f51b5';
var indigo600 = '#3949ab';
var indigo700 = '#303f9f';
var indigo800 = '#283593';
var indigo900 = '#1a237e';
var indigoA100 = '#8c9eff';
var indigoA200 = '#536dfe';
var indigoA400 = '#3d5afe';
var indigoA700 = '#304ffe';
var blue50 = '#e3f2fd';
var blue100 = '#bbdefb';
var blue200 = '#90caf9';
var blue300 = '#64b5f6';
var blue400 = '#42a5f5';
var blue500 = '#2196f3';
var blue600 = '#1e88e5';
var blue700 = '#1976d2';
var blue800 = '#1565c0';
var blue900 = '#0d47a1';
var blueA100 = '#82b1ff';
var blueA200 = '#448aff';
var blueA400 = '#2979ff';
var blueA700 = '#2962ff';
var lightBlue50 = '#e1f5fe';
var lightBlue100 = '#b3e5fc';
var lightBlue200 = '#81d4fa';
var lightBlue300 = '#4fc3f7';
var lightBlue400 = '#29b6f6';
var lightBlue500 = '#03a9f4';
var lightBlue600 = '#039be5';
var lightBlue700 = '#0288d1';
var lightBlue800 = '#0277bd';
var lightBlue900 = '#01579b';
var lightBlueA100 = '#80d8ff';
var lightBlueA200 = '#40c4ff';
var lightBlueA400 = '#00b0ff';
var lightBlueA700 = '#0091ea';
var cyan50 = '#e0f7fa';
var cyan100 = '#b2ebf2';
var cyan200 = '#80deea';
var cyan300 = '#4dd0e1';
var cyan400 = '#26c6da';
var cyan500 = '#00bcd4';
var cyan600 = '#00acc1';
var cyan700 = '#0097a7';
var cyan800 = '#00838f';
var cyan900 = '#006064';
var cyanA100 = '#84ffff';
var cyanA200 = '#18ffff';
var cyanA400 = '#00e5ff';
var cyanA700 = '#00b8d4';
var teal50 = '#e0f2f1';
var teal100 = '#b2dfdb';
var teal200 = '#80cbc4';
var teal300 = '#4db6ac';
var teal400 = '#26a69a';
var teal500 = '#009688';
var teal600 = '#00897b';
var teal700 = '#00796b';
var teal800 = '#00695c';
var teal900 = '#004d40';
var tealA100 = '#a7ffeb';
var tealA200 = '#64ffda';
var tealA400 = '#1de9b6';
var tealA700 = '#00bfa5';
var green50 = '#e8f5e9';
var green100 = '#c8e6c9';
var green200 = '#a5d6a7';
var green300 = '#81c784';
var green400 = '#66bb6a';
var green500 = '#4caf50';
var green600 = '#43a047';
var green700 = '#388e3c';
var green800 = '#2e7d32';
var green900 = '#1b5e20';
var greenA100 = '#b9f6ca';
var greenA200 = '#69f0ae';
var greenA400 = '#00e676';
var greenA700 = '#00c853';
var lightGreen50 = '#f1f8e9';
var lightGreen100 = '#dcedc8';
var lightGreen200 = '#c5e1a5';
var lightGreen300 = '#aed581';
var lightGreen400 = '#9ccc65';
var lightGreen500 = '#8bc34a';
var lightGreen600 = '#7cb342';
var lightGreen700 = '#689f38';
var lightGreen800 = '#558b2f';
var lightGreen900 = '#33691e';
var lightGreenA100 = '#ccff90';
var lightGreenA200 = '#b2ff59';
var lightGreenA400 = '#76ff03';
var lightGreenA700 = '#64dd17';
var lime50 = '#f9fbe7';
var lime100 = '#f0f4c3';
var lime200 = '#e6ee9c';
var lime300 = '#dce775';
var lime400 = '#d4e157';
var lime500 = '#cddc39';
var lime600 = '#c0ca33';
var lime700 = '#afb42b';
var lime800 = '#9e9d24';
var lime900 = '#827717';
var limeA100 = '#f4ff81';
var limeA200 = '#eeff41';
var limeA400 = '#c6ff00';
var limeA700 = '#aeea00';
var yellow50 = '#fffde7';
var yellow100 = '#fff9c4';
var yellow200 = '#fff59d';
var yellow300 = '#fff176';
var yellow400 = '#ffee58';
var yellow500 = '#ffeb3b';
var yellow600 = '#fdd835';
var yellow700 = '#fbc02d';
var yellow800 = '#f9a825';
var yellow900 = '#f57f17';
var yellowA100 = '#ffff8d';
var yellowA200 = '#ffff00';
var yellowA400 = '#ffea00';
var yellowA700 = '#ffd600';
var amber50 = '#fff8e1';
var amber100 = '#ffecb3';
var amber200 = '#ffe082';
var amber300 = '#ffd54f';
var amber400 = '#ffca28';
var amber500 = '#ffc107';
var amber600 = '#ffb300';
var amber700 = '#ffa000';
var amber800 = '#ff8f00';
var amber900 = '#ff6f00';
var amberA100 = '#ffe57f';
var amberA200 = '#ffd740';
var amberA400 = '#ffc400';
var amberA700 = '#ffab00';
var orange50 = '#fff3e0';
var orange100 = '#ffe0b2';
var orange200 = '#ffcc80';
var orange300 = '#ffb74d';
var orange400 = '#ffa726';
var orange500 = '#ff9800';
var orange600 = '#fb8c00';
var orange700 = '#f57c00';
var orange800 = '#ef6c00';
var orange900 = '#e65100';
var orangeA100 = '#ffd180';
var orangeA200 = '#ffab40';
var orangeA400 = '#ff9100';
var orangeA700 = '#ff6d00';
var deepOrange50 = '#fbe9e7';
var deepOrange100 = '#ffccbc';
var deepOrange200 = '#ffab91';
var deepOrange300 = '#ff8a65';
var deepOrange400 = '#ff7043';
var deepOrange500 = '#ff5722';
var deepOrange600 = '#f4511e';
var deepOrange700 = '#e64a19';
var deepOrange800 = '#d84315';
var deepOrange900 = '#bf360c';
var deepOrangeA100 = '#ff9e80';
var deepOrangeA200 = '#ff6e40';
var deepOrangeA400 = '#ff3d00';
var deepOrangeA700 = '#dd2c00';
var brown50 = '#efebe9';
var brown100 = '#d7ccc8';
var brown200 = '#bcaaa4';
var brown300 = '#a1887f';
var brown400 = '#8d6e63';
var brown500 = '#795548';
var brown600 = '#6d4c41';
var brown700 = '#5d4037';
var brown800 = '#4e342e';
var brown900 = '#3e2723';
var blueGrey50 = '#eceff1';
var blueGrey100 = '#cfd8dc';
var blueGrey200 = '#b0bec5';
var blueGrey300 = '#90a4ae';
var blueGrey400 = '#78909c';
var blueGrey500 = '#607d8b';
var blueGrey600 = '#546e7a';
var blueGrey700 = '#455a64';
var blueGrey800 = '#37474f';
var blueGrey900 = '#263238';
var grey50 = '#fafafa';
var grey100 = '#f5f5f5';
var grey200 = '#eeeeee';
var grey300 = '#e0e0e0';
var grey400 = '#bdbdbd';
var grey500 = '#9e9e9e';
var grey600 = '#757575';
var grey700 = '#616161';
var grey800 = '#424242';
var grey900 = '#212121';
var black = '#000000';
var white = '#ffffff';


}),
"90089": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "MD3DarkTheme", ({
    enumerable: true,
    get: function() {
        return MD3DarkTheme;
    }
}));
var _extends = __webpack_require__(88410);
var _interop_require_default = __webpack_require__(60133);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _LightTheme = __webpack_require__(62281);
var _tokens = __webpack_require__(95157);
var _tokens_md_ref = _tokens.tokens.md.ref, palette = _tokens_md_ref.palette, opacity = _tokens_md_ref.opacity;
var MD3DarkTheme = _extends._({}, _LightTheme.MD3LightTheme, {
    dark: true,
    mode: 'adaptive',
    version: 3,
    isV3: true,
    colors: {
        primary: palette.primary80,
        primaryContainer: palette.primary30,
        secondary: palette.secondary80,
        secondaryContainer: palette.secondary30,
        tertiary: palette.tertiary80,
        tertiaryContainer: palette.tertiary30,
        surface: palette.neutral10,
        surfaceVariant: palette.neutralVariant30,
        surfaceDisabled: (0, _color.default)(palette.neutral90).alpha(opacity.level2).rgb().string(),
        background: palette.neutral10,
        error: palette.error80,
        errorContainer: palette.error30,
        onPrimary: palette.primary20,
        onPrimaryContainer: palette.primary90,
        onSecondary: palette.secondary20,
        onSecondaryContainer: palette.secondary90,
        onTertiary: palette.tertiary20,
        onTertiaryContainer: palette.tertiary90,
        onSurface: palette.neutral90,
        onSurfaceVariant: palette.neutralVariant80,
        onSurfaceDisabled: (0, _color.default)(palette.neutral90).alpha(opacity.level4).rgb().string(),
        onError: palette.error20,
        onErrorContainer: palette.error80,
        onBackground: palette.neutral90,
        outline: palette.neutralVariant60,
        outlineVariant: palette.neutralVariant30,
        inverseSurface: palette.neutral90,
        inverseOnSurface: palette.neutral20,
        inversePrimary: palette.primary40,
        shadow: palette.neutral0,
        scrim: palette.neutral0,
        backdrop: (0, _color.default)(_tokens.MD3Colors.neutralVariant20).alpha(0.4).rgb().string(),
        elevation: {
            level0: 'transparent',
            // Note: Color values with transparency cause RN to transfer shadows to children nodes
            // instead of View component in Surface. Providing solid background fixes the issue.
            // Opaque color values generated with `palette.primary80` used as background
            level1: 'rgb(37, 35, 42)',
            level2: 'rgb(44, 40, 49)',
            level3: 'rgb(49, 44, 56)',
            level4: 'rgb(51, 46, 58)',
            level5: 'rgb(52, 49, 63)'
        }
    }
});


}),
"62281": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "MD3LightTheme", ({
    enumerable: true,
    get: function() {
        return MD3LightTheme;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
var _tokens = __webpack_require__(95157);
var _fonts = /*#__PURE__*/ _interop_require_default._(__webpack_require__(97728));
var _tokens_md_ref = _tokens.tokens.md.ref, palette = _tokens_md_ref.palette, opacity = _tokens_md_ref.opacity;
var MD3LightTheme = {
    dark: false,
    roundness: 4,
    version: 3,
    isV3: true,
    colors: {
        primary: palette.primary40,
        primaryContainer: palette.primary90,
        secondary: palette.secondary40,
        secondaryContainer: palette.secondary90,
        tertiary: palette.tertiary40,
        tertiaryContainer: palette.tertiary90,
        surface: palette.neutral99,
        surfaceVariant: palette.neutralVariant90,
        surfaceDisabled: (0, _color.default)(palette.neutral10).alpha(opacity.level2).rgb().string(),
        background: palette.neutral99,
        error: palette.error40,
        errorContainer: palette.error90,
        onPrimary: palette.primary100,
        onPrimaryContainer: palette.primary10,
        onSecondary: palette.secondary100,
        onSecondaryContainer: palette.secondary10,
        onTertiary: palette.tertiary100,
        onTertiaryContainer: palette.tertiary10,
        onSurface: palette.neutral10,
        onSurfaceVariant: palette.neutralVariant30,
        onSurfaceDisabled: (0, _color.default)(palette.neutral10).alpha(opacity.level4).rgb().string(),
        onError: palette.error100,
        onErrorContainer: palette.error10,
        onBackground: palette.neutral10,
        outline: palette.neutralVariant50,
        outlineVariant: palette.neutralVariant80,
        inverseSurface: palette.neutral20,
        inverseOnSurface: palette.neutral95,
        inversePrimary: palette.primary80,
        shadow: palette.neutral0,
        scrim: palette.neutral0,
        backdrop: (0, _color.default)(_tokens.MD3Colors.neutralVariant20).alpha(0.4).rgb().string(),
        elevation: {
            level0: 'transparent',
            // Note: Color values with transparency cause RN to transfer shadows to children nodes
            // instead of View component in Surface. Providing solid background fixes the issue.
            // Opaque color values generated with `palette.primary99` used as background
            level1: 'rgb(247, 243, 249)',
            level2: 'rgb(243, 237, 246)',
            level3: 'rgb(238, 232, 244)',
            level4: 'rgb(236, 230, 243)',
            level5: 'rgb(233, 227, 241)'
        }
    },
    fonts: (0, _fonts.default)(),
    animation: {
        scale: 1.0
    }
};


}),
"95157": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    MD3Colors: function() {
        return MD3Colors;
    },
    tokens: function() {
        return tokens;
    },
    typescale: function() {
        return typescale;
    }
});
var _extends = __webpack_require__(88410);
var _reactnative = __webpack_require__(44963);
var ref = {
    palette: {
        primary100: 'rgba(255, 255, 255, 1)',
        primary99: 'rgba(255, 251, 254, 1)',
        primary95: 'rgba(246, 237, 255, 1)',
        primary90: 'rgba(234, 221, 255, 1)',
        primary80: 'rgba(208, 188, 255, 1)',
        primary70: 'rgba(182, 157, 248, 1)',
        primary60: 'rgba(154, 130, 219, 1)',
        primary50: 'rgba(127, 103, 190, 1)',
        primary40: 'rgba(103, 80, 164, 1)',
        primary30: 'rgba(79, 55, 139, 1)',
        primary20: 'rgba(56, 30, 114, 1)',
        primary10: 'rgba(33, 0, 93, 1)',
        primary0: 'rgba(0, 0, 0, 1)',
        secondary100: 'rgba(255, 255, 255, 1)',
        secondary99: 'rgba(255, 251, 254, 1)',
        secondary95: 'rgba(246, 237, 255, 1)',
        secondary90: 'rgba(232, 222, 248, 1)',
        secondary80: 'rgba(204, 194, 220, 1)',
        secondary70: 'rgba(176, 167, 192, 1)',
        secondary60: 'rgba(149, 141, 165, 1)',
        secondary50: 'rgba(122, 114, 137, 1)',
        secondary40: 'rgba(98, 91, 113, 1)',
        secondary30: 'rgba(74, 68, 88, 1)',
        secondary20: 'rgba(51, 45, 65, 1)',
        secondary10: 'rgba(29, 25, 43, 1)',
        secondary0: 'rgba(0, 0, 0, 1)',
        tertiary100: 'rgba(255, 255, 255, 1)',
        tertiary99: 'rgba(255, 251, 250, 1)',
        tertiary95: 'rgba(255, 236, 241, 1)',
        tertiary90: 'rgba(255, 216, 228, 1)',
        tertiary80: 'rgba(239, 184, 200, 1)',
        tertiary70: 'rgba(210, 157, 172, 1)',
        tertiary60: 'rgba(181, 131, 146, 1)',
        tertiary50: 'rgba(152, 105, 119, 1)',
        tertiary40: 'rgba(125, 82, 96, 1)',
        tertiary30: 'rgba(99, 59, 72, 1)',
        tertiary20: 'rgba(73, 37, 50, 1)',
        tertiary10: 'rgba(49, 17, 29, 1)',
        tertiary0: 'rgba(0, 0, 0, 1)',
        neutral100: 'rgba(255, 255, 255, 1)',
        neutral99: 'rgba(255, 251, 254, 1)',
        neutral95: 'rgba(244, 239, 244, 1)',
        neutral90: 'rgba(230, 225, 229, 1)',
        neutral80: 'rgba(201, 197, 202, 1)',
        neutral70: 'rgba(174, 170, 174, 1)',
        neutral60: 'rgba(147, 144, 148, 1)',
        neutral50: 'rgba(120, 117, 121, 1)',
        neutral40: 'rgba(96, 93, 98, 1)',
        neutral30: 'rgba(72, 70, 73, 1)',
        neutral20: 'rgba(49, 48, 51, 1)',
        neutral10: 'rgba(28, 27, 31, 1)',
        neutral0: 'rgba(0, 0, 0, 1)',
        neutralVariant100: 'rgba(255, 255, 255, 1)',
        neutralVariant99: 'rgba(255, 251, 254, 1)',
        neutralVariant95: 'rgba(245, 238, 250, 1)',
        neutralVariant90: 'rgba(231, 224, 236, 1)',
        neutralVariant80: 'rgba(202, 196, 208, 1)',
        neutralVariant70: 'rgba(174, 169, 180, 1)',
        neutralVariant60: 'rgba(147, 143, 153, 1)',
        neutralVariant50: 'rgba(121, 116, 126, 1)',
        neutralVariant40: 'rgba(96, 93, 102, 1)',
        neutralVariant30: 'rgba(73, 69, 79, 1)',
        neutralVariant20: 'rgba(50, 47, 55, 1)',
        neutralVariant10: 'rgba(29, 26, 34, 1)',
        neutralVariant0: 'rgba(0, 0, 0, 1)',
        error100: 'rgba(255, 255, 255, 1)',
        error99: 'rgba(255, 251, 249, 1)',
        error95: 'rgba(252, 238, 238, 1)',
        error90: 'rgba(249, 222, 220, 1)',
        error80: 'rgba(242, 184, 181, 1)',
        error70: 'rgba(236, 146, 142, 1)',
        error60: 'rgba(228, 105, 98, 1)',
        error50: 'rgba(220, 54, 46, 1)',
        error40: 'rgba(179, 38, 30, 1)',
        error30: 'rgba(140, 29, 24, 1)',
        error20: 'rgba(96, 20, 16, 1)',
        error10: 'rgba(65, 14, 11, 1)',
        error0: 'rgba(0, 0, 0, 1)'
    },
    typeface: {
        brandRegular: _reactnative.Platform.select({
            web: 'Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif',
            ios: 'System',
            "default": 'sans-serif'
        }),
        weightRegular: '400',
        plainMedium: _reactnative.Platform.select({
            web: 'Roboto, "Helvetica Neue", Helvetica, Arial, sans-serif',
            ios: 'System',
            "default": 'sans-serif-medium'
        }),
        weightMedium: '500'
    },
    opacity: {
        level1: 0.08,
        level2: 0.12,
        level3: 0.16,
        level4: 0.38
    }
};
var regularType = {
    fontFamily: ref.typeface.brandRegular,
    letterSpacing: 0,
    fontWeight: ref.typeface.weightRegular
};
var mediumType = {
    fontFamily: ref.typeface.plainMedium,
    letterSpacing: 0.15,
    fontWeight: ref.typeface.weightMedium
};
var typescale = {
    displayLarge: _extends._({}, regularType, {
        lineHeight: 64,
        fontSize: 57
    }),
    displayMedium: _extends._({}, regularType, {
        lineHeight: 52,
        fontSize: 45
    }),
    displaySmall: _extends._({}, regularType, {
        lineHeight: 44,
        fontSize: 36
    }),
    headlineLarge: _extends._({}, regularType, {
        lineHeight: 40,
        fontSize: 32
    }),
    headlineMedium: _extends._({}, regularType, {
        lineHeight: 36,
        fontSize: 28
    }),
    headlineSmall: _extends._({}, regularType, {
        lineHeight: 32,
        fontSize: 24
    }),
    titleLarge: _extends._({}, regularType, {
        lineHeight: 28,
        fontSize: 22
    }),
    titleMedium: _extends._({}, mediumType, {
        lineHeight: 24,
        fontSize: 16
    }),
    titleSmall: _extends._({}, mediumType, {
        letterSpacing: 0.1,
        lineHeight: 20,
        fontSize: 14
    }),
    labelLarge: _extends._({}, mediumType, {
        letterSpacing: 0.1,
        lineHeight: 20,
        fontSize: 14
    }),
    labelMedium: _extends._({}, mediumType, {
        letterSpacing: 0.5,
        lineHeight: 16,
        fontSize: 12
    }),
    labelSmall: _extends._({}, mediumType, {
        letterSpacing: 0.5,
        lineHeight: 16,
        fontSize: 11
    }),
    bodyLarge: _extends._({}, mediumType, {
        fontWeight: ref.typeface.weightRegular,
        fontFamily: ref.typeface.brandRegular,
        lineHeight: 24,
        fontSize: 16
    }),
    bodyMedium: _extends._({}, mediumType, {
        fontWeight: ref.typeface.weightRegular,
        fontFamily: ref.typeface.brandRegular,
        letterSpacing: 0.25,
        lineHeight: 20,
        fontSize: 14
    }),
    bodySmall: _extends._({}, mediumType, {
        fontWeight: ref.typeface.weightRegular,
        fontFamily: ref.typeface.brandRegular,
        letterSpacing: 0.4,
        lineHeight: 16,
        fontSize: 12
    }),
    "default": _extends._({}, regularType)
};
var tokens = {
    md: {
        ref: ref,
        sys: {
            typescale: typescale
        }
    }
};
var MD3Colors = ref.palette;


}),
"8518": (function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ElevationLevels: function() {
        return ElevationLevels;
    },
    MD3TypescaleKey: function() {
        return MD3TypescaleKey;
    }
});
var MD3TypescaleKey = /*#__PURE__*/ function(MD3TypescaleKey) {
    MD3TypescaleKey["displayLarge"] = "displayLarge";
    MD3TypescaleKey["displayMedium"] = "displayMedium";
    MD3TypescaleKey["displaySmall"] = "displaySmall";
    MD3TypescaleKey["headlineLarge"] = "headlineLarge";
    MD3TypescaleKey["headlineMedium"] = "headlineMedium";
    MD3TypescaleKey["headlineSmall"] = "headlineSmall";
    MD3TypescaleKey["titleLarge"] = "titleLarge";
    MD3TypescaleKey["titleMedium"] = "titleMedium";
    MD3TypescaleKey["titleSmall"] = "titleSmall";
    MD3TypescaleKey["labelLarge"] = "labelLarge";
    MD3TypescaleKey["labelMedium"] = "labelMedium";
    MD3TypescaleKey["labelSmall"] = "labelSmall";
    MD3TypescaleKey["bodyLarge"] = "bodyLarge";
    MD3TypescaleKey["bodyMedium"] = "bodyMedium";
    MD3TypescaleKey["bodySmall"] = "bodySmall";
    return MD3TypescaleKey;
}({});
var ElevationLevels = /*#__PURE__*/ function(ElevationLevels) {
    ElevationLevels[ElevationLevels["level0"] = 0] = "level0";
    ElevationLevels[ElevationLevels["level1"] = 1] = "level1";
    ElevationLevels[ElevationLevels["level2"] = 2] = "level2";
    ElevationLevels[ElevationLevels["level3"] = 3] = "level3";
    ElevationLevels[ElevationLevels["level4"] = 4] = "level4";
    ElevationLevels[ElevationLevels["level5"] = 5] = "level5";
    return ElevationLevels;
}({});


}),
"18819": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "BackHandler", ({
    enumerable: true,
    get: function() {
        return _reactnative.BackHandler;
    }
}));
var _reactnative = __webpack_require__(44963);


}),
"74897": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    addEventListener: function() {
        return addEventListener;
    },
    addListener: function() {
        return addListener;
    }
});
var _sliced_to_array = __webpack_require__(38097);
function addEventListener(Module) {
    for(var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        rest[_key - 1] = arguments[_key];
    }
    var _rest = _sliced_to_array._(rest, 2), eventName = _rest[0], handler = _rest[1];
    var removed = false;
    var _Module_addEventListener;
    var subscription = (_Module_addEventListener = Module.addEventListener(eventName, handler)) != null ? _Module_addEventListener : {
        remove: function() {
            if (removed) {
                return;
            }
            Module.removeEventListener == null ? void 0 : Module.removeEventListener.call(Module, eventName, handler);
            Module.remove == null ? void 0 : Module.remove.call(Module, eventName, handler);
            removed = true;
        }
    };
    return subscription;
}
function addListener(Module) {
    for(var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        rest[_key - 1] = arguments[_key];
    }
    var _rest = _sliced_to_array._(rest, 2), eventName = _rest[0], handler = _rest[1];
    var removed = false;
    var _Module_addListener;
    var subscription = (_Module_addListener = Module.addListener(eventName, handler)) != null ? _Module_addListener : {
        remove: function() {
            if (removed) {
                return;
            }
            Module.removeEventListener(eventName, handler);
            removed = true;
        }
    };
    return subscription;
}


}),
"45835": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "forwardRef", ({
    enumerable: true,
    get: function() {
        return forwardRef;
    }
}));
var _interop_require_wildcard = __webpack_require__(3557);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var forwardRef = _react.forwardRef;


}),
"17362": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return getContrastingColor;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _color = /*#__PURE__*/ _interop_require_default._(__webpack_require__(3965));
function getContrastingColor(input, light, dark) {
    if (typeof input === 'string') {
        return (0, _color.default)(input).isLight() ? dark : light;
    }
    return light;
}


}),
"35717": (function (__unused_webpack_module, exports) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return hasTouchHandler;
    }
}));
var touchableEvents = [
    'onPress',
    'onLongPress',
    'onPressIn',
    'onPressOut'
];
function hasTouchHandler(touchableEventObject) {
    return touchableEvents.some(function(event) {
        return Boolean(touchableEventObject[event]);
    });
}


}),
"83451": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useAnimatedValue;
    }
}));
var _interop_require_default = __webpack_require__(60133);
var _reactnative = __webpack_require__(44963);
var _useLazyRef = /*#__PURE__*/ _interop_require_default._(__webpack_require__(27755));
function useAnimatedValue(initialValue) {
    var current = (0, _useLazyRef.default)(function() {
        return new _reactnative.Animated.Value(initialValue);
    }).current;
    return current;
}


}),
"29838": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useAnimatedValueArray;
    }
}));
var _interop_require_wildcard = __webpack_require__(3557);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
function useAnimatedValueArray(initialValues) {
    var refs = _react.useRef([]);
    refs.current.length = initialValues.length;
    initialValues.forEach(function(initialValue, i) {
        var _refs_current_i;
        refs.current[i] = (_refs_current_i = refs.current[i]) != null ? _refs_current_i : new _reactnative.Animated.Value(initialValue);
    });
    return refs.current;
}


}),
"42497": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useIsKeyboardShown;
    }
}));
var _interop_require_wildcard = __webpack_require__(3557);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
var _reactnative = __webpack_require__(44963);
function useIsKeyboardShown(param) {
    var onShow = param.onShow, onHide = param.onHide;
    _react.useEffect(function() {
        var willShowSubscription;
        var willHideSubscription;
        var didShowSubscription;
        var didHideSubscription;
        if (_reactnative.Platform.OS === 'ios') {
            willShowSubscription = _reactnative.Keyboard.addListener('keyboardWillShow', onShow);
            willHideSubscription = _reactnative.Keyboard.addListener('keyboardWillHide', onHide);
        } else {
            didShowSubscription = _reactnative.Keyboard.addListener('keyboardDidShow', onShow);
            didHideSubscription = _reactnative.Keyboard.addListener('keyboardDidHide', onHide);
        }
        return function() {
            if (_reactnative.Platform.OS === 'ios') {
                if (willShowSubscription == null ? void 0 : willShowSubscription.remove) {
                    willShowSubscription.remove();
                } else {
                    // @ts-expect-error: We keep deprecated listener remove method for backwards compat with old RN versions
                    _reactnative.Keyboard.removeListener('keyboardWillShow', onShow);
                }
                if (willHideSubscription == null ? void 0 : willHideSubscription.remove) {
                    willHideSubscription.remove();
                } else {
                    // @ts-expect-error: We keep deprecated listener remove method for backwards compat with old RN versions
                    _reactnative.Keyboard.removeListener('keyboardWillHide', onHide);
                }
            } else {
                if (didShowSubscription == null ? void 0 : didShowSubscription.remove) {
                    didShowSubscription.remove();
                } else {
                    // @ts-expect-error: We keep deprecated listener remove method for backwards compat with old RN versions
                    _reactnative.Keyboard.removeListener('keyboardDidShow', onShow);
                }
                if (didHideSubscription == null ? void 0 : didHideSubscription.remove) {
                    didHideSubscription.remove();
                } else {
                    // @ts-expect-error: We keep deprecated listener remove method for backwards compat with old RN versions
                    _reactnative.Keyboard.removeListener('keyboardDidHide', onHide);
                }
            }
        };
    }, [
        onHide,
        onShow
    ]);
}


}),
"67885": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useLayout;
    }
}));
var _interop_require_wildcard = __webpack_require__(3557);
var _sliced_to_array = __webpack_require__(38097);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
function useLayout() {
    var _React_useState = _sliced_to_array._(_react.useState({
        height: 0,
        width: 0,
        measured: false
    }), 2), layout = _React_useState[0], setLayout = _React_useState[1];
    var onLayout = _react.useCallback(function(e) {
        var _e_nativeEvent_layout = e.nativeEvent.layout, height = _e_nativeEvent_layout.height, width = _e_nativeEvent_layout.width;
        if (height === layout.height && width === layout.width) {
            return;
        }
        setLayout({
            height: height,
            width: width,
            measured: true
        });
    }, [
        layout.height,
        layout.width
    ]);
    return [
        layout,
        onLayout
    ];
}


}),
"27755": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return useLazyRef;
    }
}));
var _interop_require_wildcard = __webpack_require__(3557);
var _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(84816));
function useLazyRef(callback) {
    var lazyRef = _react.useRef();
    if (lazyRef.current === undefined) {
        lazyRef.current = callback();
    }
    return lazyRef;
}


}),

}]);//# sourceMappingURL=vendors-node_modules_pnpm_react-native-paper_5_12_5_patch_hash_jbcjvd6hhp2gtyomtoldpygoay_rea-86f452.chunk.bundle.map?platform=android