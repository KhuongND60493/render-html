(self['webpackChunksas_shopping'] = self['webpackChunksas_shopping'] || []).push([["vendors-node_modules_pnpm_react-native_0_76_3__babel_core_7_26_0__babel_preset-env_7_26_0__ba-60e338"], {
"27424": (function (__unused_webpack_module, exports, __webpack_require__) {
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
var _TurboModuleRegistry = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(46101));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var NativeReactNativeFeatureFlags = _TurboModuleRegistry.get('NativeReactNativeFeatureFlagsCxx');
var _default = NativeReactNativeFeatureFlags;


}),
"51809": (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated SignedSource<<0bff47ec5af8ed96d8b2abe351f318f1>>
 *       strict-local
 */ /**
 * IMPORTANT: Do NOT modify this file directly.
 *
 * To change the definition of the flags, edit
 *   packages/react-native/scripts/featureflags/ReactNativeFeatureFlags.config.js.
 *
 * To regenerate this code, run the following script from the repo root:
 *   yarn featureflags-update
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    allowRecursiveCommitsWithSynchronousMountOnAndroid: function() {
        return allowRecursiveCommitsWithSynchronousMountOnAndroid;
    },
    animatedShouldDebounceQueueFlush: function() {
        return animatedShouldDebounceQueueFlush;
    },
    animatedShouldUseSingleOp: function() {
        return animatedShouldUseSingleOp;
    },
    batchRenderingUpdatesInEventLoop: function() {
        return batchRenderingUpdatesInEventLoop;
    },
    commonTestFlag: function() {
        return commonTestFlag;
    },
    completeReactInstanceCreationOnBgThreadOnAndroid: function() {
        return completeReactInstanceCreationOnBgThreadOnAndroid;
    },
    destroyFabricSurfacesInReactInstanceManager: function() {
        return destroyFabricSurfacesInReactInstanceManager;
    },
    enableAccessToHostTreeInFabric: function() {
        return enableAccessToHostTreeInFabric;
    },
    enableAlignItemsBaselineOnFabricIOS: function() {
        return enableAlignItemsBaselineOnFabricIOS;
    },
    enableAndroidMixBlendModeProp: function() {
        return enableAndroidMixBlendModeProp;
    },
    enableBackgroundStyleApplicator: function() {
        return enableBackgroundStyleApplicator;
    },
    enableCleanTextInputYogaNode: function() {
        return enableCleanTextInputYogaNode;
    },
    enableEagerRootViewAttachment: function() {
        return enableEagerRootViewAttachment;
    },
    enableEventEmitterRetentionDuringGesturesOnAndroid: function() {
        return enableEventEmitterRetentionDuringGesturesOnAndroid;
    },
    enableFabricLogs: function() {
        return enableFabricLogs;
    },
    enableFabricRendererExclusively: function() {
        return enableFabricRendererExclusively;
    },
    enableGranularShadowTreeStateReconciliation: function() {
        return enableGranularShadowTreeStateReconciliation;
    },
    enableIOSViewClipToPaddingBox: function() {
        return enableIOSViewClipToPaddingBox;
    },
    enableLayoutAnimationsOnIOS: function() {
        return enableLayoutAnimationsOnIOS;
    },
    enableLongTaskAPI: function() {
        return enableLongTaskAPI;
    },
    enableMicrotasks: function() {
        return enableMicrotasks;
    },
    enableOptimisedVirtualizedCells: function() {
        return enableOptimisedVirtualizedCells;
    },
    enablePropsUpdateReconciliationAndroid: function() {
        return enablePropsUpdateReconciliationAndroid;
    },
    enableReportEventPaintTime: function() {
        return enableReportEventPaintTime;
    },
    enableSynchronousStateUpdates: function() {
        return enableSynchronousStateUpdates;
    },
    enableUIConsistency: function() {
        return enableUIConsistency;
    },
    enableViewRecycling: function() {
        return enableViewRecycling;
    },
    excludeYogaFromRawProps: function() {
        return excludeYogaFromRawProps;
    },
    fetchImagesInViewPreallocation: function() {
        return fetchImagesInViewPreallocation;
    },
    fixIncorrectScrollViewStateUpdateOnAndroid: function() {
        return fixIncorrectScrollViewStateUpdateOnAndroid;
    },
    fixMappingOfEventPrioritiesBetweenFabricAndReact: function() {
        return fixMappingOfEventPrioritiesBetweenFabricAndReact;
    },
    fixMissedFabricStateUpdatesOnAndroid: function() {
        return fixMissedFabricStateUpdatesOnAndroid;
    },
    fixMountingCoordinatorReportedPendingTransactionsOnAndroid: function() {
        return fixMountingCoordinatorReportedPendingTransactionsOnAndroid;
    },
    forceBatchingMountItemsOnAndroid: function() {
        return forceBatchingMountItemsOnAndroid;
    },
    fuseboxEnabledDebug: function() {
        return fuseboxEnabledDebug;
    },
    fuseboxEnabledRelease: function() {
        return fuseboxEnabledRelease;
    },
    initEagerTurboModulesOnNativeModulesQueueAndroid: function() {
        return initEagerTurboModulesOnNativeModulesQueueAndroid;
    },
    isLayoutAnimationEnabled: function() {
        return isLayoutAnimationEnabled;
    },
    jsOnlyTestFlag: function() {
        return jsOnlyTestFlag;
    },
    lazyAnimationCallbacks: function() {
        return lazyAnimationCallbacks;
    },
    loadVectorDrawablesOnImages: function() {
        return loadVectorDrawablesOnImages;
    },
    override: function() {
        return override;
    },
    setAndroidLayoutDirection: function() {
        return setAndroidLayoutDirection;
    },
    shouldSkipStateUpdatesForLoopingAnimations: function() {
        return shouldSkipStateUpdatesForLoopingAnimations;
    },
    shouldUseAnimatedObjectForTransform: function() {
        return shouldUseAnimatedObjectForTransform;
    },
    shouldUseRemoveClippedSubviewsAsDefaultOnIOS: function() {
        return shouldUseRemoveClippedSubviewsAsDefaultOnIOS;
    },
    shouldUseSetNativePropsInFabric: function() {
        return shouldUseSetNativePropsInFabric;
    },
    shouldUseSetNativePropsInNativeAnimationsInFabric: function() {
        return shouldUseSetNativePropsInNativeAnimationsInFabric;
    },
    traceTurboModulePromiseRejectionsOnAndroid: function() {
        return traceTurboModulePromiseRejectionsOnAndroid;
    },
    useFabricInterop: function() {
        return useFabricInterop;
    },
    useImmediateExecutorInAndroidBridgeless: function() {
        return useImmediateExecutorInAndroidBridgeless;
    },
    useModernRuntimeScheduler: function() {
        return useModernRuntimeScheduler;
    },
    useNativeViewConfigsInBridgelessMode: function() {
        return useNativeViewConfigsInBridgelessMode;
    },
    useNewReactImageViewBackgroundDrawing: function() {
        return useNewReactImageViewBackgroundDrawing;
    },
    useOptimisedViewPreallocationOnAndroid: function() {
        return useOptimisedViewPreallocationOnAndroid;
    },
    useOptimizedEventBatchingOnAndroid: function() {
        return useOptimizedEventBatchingOnAndroid;
    },
    usePassiveEffectsForAnimations: function() {
        return usePassiveEffectsForAnimations;
    },
    useRefsForTextInputState: function() {
        return useRefsForTextInputState;
    },
    useRuntimeShadowNodeReferenceUpdate: function() {
        return useRuntimeShadowNodeReferenceUpdate;
    },
    useRuntimeShadowNodeReferenceUpdateOnLayout: function() {
        return useRuntimeShadowNodeReferenceUpdateOnLayout;
    },
    useStateAlignmentMechanism: function() {
        return useStateAlignmentMechanism;
    },
    useTurboModuleInterop: function() {
        return useTurboModuleInterop;
    }
});
var _ReactNativeFeatureFlagsBase = __webpack_require__(51575);
var jsOnlyTestFlag = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('jsOnlyTestFlag', false);
var animatedShouldDebounceQueueFlush = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldDebounceQueueFlush', false);
var animatedShouldUseSingleOp = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldUseSingleOp', false);
var enableAccessToHostTreeInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAccessToHostTreeInFabric', false);
var enableOptimisedVirtualizedCells = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableOptimisedVirtualizedCells', false);
var isLayoutAnimationEnabled = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('isLayoutAnimationEnabled', true);
var shouldSkipStateUpdatesForLoopingAnimations = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldSkipStateUpdatesForLoopingAnimations', false);
var shouldUseAnimatedObjectForTransform = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseAnimatedObjectForTransform', false);
var shouldUseRemoveClippedSubviewsAsDefaultOnIOS = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);
var shouldUseSetNativePropsInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseSetNativePropsInFabric', true);
var shouldUseSetNativePropsInNativeAnimationsInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseSetNativePropsInNativeAnimationsInFabric', false);
var usePassiveEffectsForAnimations = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('usePassiveEffectsForAnimations', false);
var useRefsForTextInputState = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('useRefsForTextInputState', false);
var commonTestFlag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlag', false);
var allowRecursiveCommitsWithSynchronousMountOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('allowRecursiveCommitsWithSynchronousMountOnAndroid', false);
var batchRenderingUpdatesInEventLoop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('batchRenderingUpdatesInEventLoop', false);
var completeReactInstanceCreationOnBgThreadOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('completeReactInstanceCreationOnBgThreadOnAndroid', false);
var destroyFabricSurfacesInReactInstanceManager = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('destroyFabricSurfacesInReactInstanceManager', false);
var enableAlignItemsBaselineOnFabricIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableAlignItemsBaselineOnFabricIOS', true);
var enableAndroidMixBlendModeProp = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableAndroidMixBlendModeProp', false);
var enableBackgroundStyleApplicator = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableBackgroundStyleApplicator', true);
var enableCleanTextInputYogaNode = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableCleanTextInputYogaNode', false);
var enableEagerRootViewAttachment = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableEagerRootViewAttachment', false);
var enableEventEmitterRetentionDuringGesturesOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableEventEmitterRetentionDuringGesturesOnAndroid', false);
var enableFabricLogs = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricLogs', false);
var enableFabricRendererExclusively = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricRendererExclusively', false);
var enableGranularShadowTreeStateReconciliation = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableGranularShadowTreeStateReconciliation', false);
var enableIOSViewClipToPaddingBox = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableIOSViewClipToPaddingBox', false);
var enableLayoutAnimationsOnIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnIOS', true);
var enableLongTaskAPI = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLongTaskAPI', false);
var enableMicrotasks = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableMicrotasks', false);
var enablePropsUpdateReconciliationAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePropsUpdateReconciliationAndroid', false);
var enableReportEventPaintTime = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableReportEventPaintTime', false);
var enableSynchronousStateUpdates = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableSynchronousStateUpdates', false);
var enableUIConsistency = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableUIConsistency', false);
var enableViewRecycling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecycling', false);
var excludeYogaFromRawProps = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('excludeYogaFromRawProps', false);
var fetchImagesInViewPreallocation = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fetchImagesInViewPreallocation', false);
var fixIncorrectScrollViewStateUpdateOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixIncorrectScrollViewStateUpdateOnAndroid', false);
var fixMappingOfEventPrioritiesBetweenFabricAndReact = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMappingOfEventPrioritiesBetweenFabricAndReact', false);
var fixMissedFabricStateUpdatesOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMissedFabricStateUpdatesOnAndroid', false);
var fixMountingCoordinatorReportedPendingTransactionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMountingCoordinatorReportedPendingTransactionsOnAndroid', false);
var forceBatchingMountItemsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('forceBatchingMountItemsOnAndroid', false);
var fuseboxEnabledDebug = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxEnabledDebug', true);
var fuseboxEnabledRelease = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxEnabledRelease', false);
var initEagerTurboModulesOnNativeModulesQueueAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('initEagerTurboModulesOnNativeModulesQueueAndroid', false);
var lazyAnimationCallbacks = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('lazyAnimationCallbacks', false);
var loadVectorDrawablesOnImages = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('loadVectorDrawablesOnImages', false);
var setAndroidLayoutDirection = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('setAndroidLayoutDirection', false);
var traceTurboModulePromiseRejectionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('traceTurboModulePromiseRejectionsOnAndroid', false);
var useFabricInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useFabricInterop', false);
var useImmediateExecutorInAndroidBridgeless = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useImmediateExecutorInAndroidBridgeless', false);
var useModernRuntimeScheduler = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useModernRuntimeScheduler', false);
var useNativeViewConfigsInBridgelessMode = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useNativeViewConfigsInBridgelessMode', false);
var useNewReactImageViewBackgroundDrawing = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useNewReactImageViewBackgroundDrawing', false);
var useOptimisedViewPreallocationOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useOptimisedViewPreallocationOnAndroid', false);
var useOptimizedEventBatchingOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useOptimizedEventBatchingOnAndroid', false);
var useRuntimeShadowNodeReferenceUpdate = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useRuntimeShadowNodeReferenceUpdate', false);
var useRuntimeShadowNodeReferenceUpdateOnLayout = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useRuntimeShadowNodeReferenceUpdateOnLayout', false);
var useStateAlignmentMechanism = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useStateAlignmentMechanism', false);
var useTurboModuleInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModuleInterop', false);
var override = _ReactNativeFeatureFlagsBase.setOverrides;


}),
"51575": (function (__unused_webpack_module, exports, __webpack_require__) {
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict-local
 * @format
 */ Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createJavaScriptFlagGetter: function() {
        return createJavaScriptFlagGetter;
    },
    createNativeFlagGetter: function() {
        return createNativeFlagGetter;
    },
    getOverrides: function() {
        return getOverrides;
    },
    setOverrides: function() {
        return setOverrides;
    }
});
var _NativeReactNativeFeatureFlags = /*#__PURE__*/ _interop_require_default(__webpack_require__(27424));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var accessedFeatureFlags = new Set();
var overrides;
function createGetter(configName, customValueGetter, defaultValue) {
    var cachedValue;
    return function() {
        if (cachedValue == null) {
            var _customValueGetter;
            cachedValue = (_customValueGetter = customValueGetter()) != null ? _customValueGetter : defaultValue;
        }
        return cachedValue;
    };
}
function createJavaScriptFlagGetter(configName, defaultValue) {
    return createGetter(configName, function() {
        var _overrides_configName;
        accessedFeatureFlags.add(configName);
        return overrides == null ? void 0 : (_overrides_configName = overrides[configName]) == null ? void 0 : _overrides_configName.call(overrides);
    }, defaultValue);
}
function createNativeFlagGetter(configName, defaultValue) {
    return createGetter(configName, function() {
        var _NativeReactNativeFeatureFlags_configName;
        var valueFromNative = _NativeReactNativeFeatureFlags.default == null ? void 0 : (_NativeReactNativeFeatureFlags_configName = _NativeReactNativeFeatureFlags.default[configName]) == null ? void 0 : _NativeReactNativeFeatureFlags_configName.call(_NativeReactNativeFeatureFlags.default);
        if (valueFromNative == null) {
            logUnavailableNativeModuleError(configName);
        }
        return valueFromNative;
    }, defaultValue);
}
function getOverrides() {
    return overrides;
}
function setOverrides(newOverrides) {
    if (overrides != null) {
        throw new Error('Feature flags cannot be overridden more than once');
    }
    if (accessedFeatureFlags.size > 0) {
        var accessedFeatureFlagsStr = Array.from(accessedFeatureFlags).join(', ');
        throw new Error("Feature flags were accessed before being overridden: " + accessedFeatureFlagsStr);
    }
    overrides = newOverrides;
}
var reportedConfigNames = new Set();
function logUnavailableNativeModuleError(configName) {
    if (!reportedConfigNames.has(configName)) {
        reportedConfigNames.add(configName);
        console.error("Could not access feature flag '" + configName + "' because native module method was not available");
    }
}


}),

}]);//# sourceMappingURL=vendors-node_modules_pnpm_react-native_0_76_3__babel_core_7_26_0__babel_preset-env_7_26_0__ba-60e338.chunk.bundle.map?platform=android