{"version":3,"file":"vendors-node_modules_pnpm_react-native_virtualized-lists_0_76_3__types_react_18_2_27_react-na-eccb7c.chunk.bundle","sources":["webpack://sas-auth/../../node_modules/.pnpm/@react-native+virtualized-lists@0.76.3_@types+react@18.2.27_react-native@0.76.3_@babel+core@7_zir2vdgrjgh5lvp3ntzlz3u5gu/node_modules/@react-native/virtualized-lists/Interaction/Batchinator.js","webpack://sas-auth/../../node_modules/.pnpm/@react-native+virtualized-lists@0.76.3_@types+react@18.2.27_react-native@0.76.3_@babel+core@7_zir2vdgrjgh5lvp3ntzlz3u5gu/node_modules/@react-native/virtualized-lists/Lists/CellRenderMask.js","webpack://sas-auth/../../node_modules/.pnpm/@react-native+virtualized-lists@0.76.3_@types+react@18.2.27_react-native@0.76.3_@babel+core@7_zir2vdgrjgh5lvp3ntzlz3u5gu/node_modules/@react-native/virtualized-lists/Lists/ChildListCollection.js","webpack://sas-auth/../../node_modules/.pnpm/@react-native+virtualized-lists@0.76.3_@types+react@18.2.27_react-native@0.76.3_@babel+core@7_zir2vdgrjgh5lvp3ntzlz3u5gu/node_modules/@react-native/virtualized-lists/Lists/FillRateHelper.js","webpack://sas-auth/../../node_modules/.pnpm/@react-native+virtualized-lists@0.76.3_@types+react@18.2.27_react-native@0.76.3_@babel+core@7_zir2vdgrjgh5lvp3ntzlz3u5gu/node_modules/@react-native/virtualized-lists/Lists/ListMetricsAggregator.js","webpack://sas-auth/../../node_modules/.pnpm/@react-native+virtualized-lists@0.76.3_@types+react@18.2.27_react-native@0.76.3_@babel+core@7_zir2vdgrjgh5lvp3ntzlz3u5gu/node_modules/@react-native/virtualized-lists/Lists/StateSafePureComponent.js","webpack://sas-auth/../../node_modules/.pnpm/@react-native+virtualized-lists@0.76.3_@types+react@18.2.27_react-native@0.76.3_@babel+core@7_zir2vdgrjgh5lvp3ntzlz3u5gu/node_modules/@react-native/virtualized-lists/Lists/ViewabilityHelper.js","webpack://sas-auth/../../node_modules/.pnpm/@react-native+virtualized-lists@0.76.3_@types+react@18.2.27_react-native@0.76.3_@babel+core@7_zir2vdgrjgh5lvp3ntzlz3u5gu/node_modules/@react-native/virtualized-lists/Lists/VirtualizeUtils.js","webpack://sas-auth/../../node_modules/.pnpm/@react-native+virtualized-lists@0.76.3_@types+react@18.2.27_react-native@0.76.3_@babel+core@7_zir2vdgrjgh5lvp3ntzlz3u5gu/node_modules/@react-native/virtualized-lists/Lists/VirtualizedList.js","webpack://sas-auth/../../node_modules/.pnpm/@react-native+virtualized-lists@0.76.3_@types+react@18.2.27_react-native@0.76.3_@babel+core@7_zir2vdgrjgh5lvp3ntzlz3u5gu/node_modules/@react-native/virtualized-lists/Lists/VirtualizedListCellRenderer.js","webpack://sas-auth/../../node_modules/.pnpm/@react-native+virtualized-lists@0.76.3_@types+react@18.2.27_react-native@0.76.3_@babel+core@7_zir2vdgrjgh5lvp3ntzlz3u5gu/node_modules/@react-native/virtualized-lists/Lists/VirtualizedListContext.js","webpack://sas-auth/../../node_modules/.pnpm/@react-native+virtualized-lists@0.76.3_@types+react@18.2.27_react-native@0.76.3_@babel+core@7_zir2vdgrjgh5lvp3ntzlz3u5gu/node_modules/@react-native/virtualized-lists/Lists/VirtualizedListProps.js","webpack://sas-auth/../../node_modules/.pnpm/@react-native+virtualized-lists@0.76.3_@types+react@18.2.27_react-native@0.76.3_@babel+core@7_zir2vdgrjgh5lvp3ntzlz3u5gu/node_modules/@react-native/virtualized-lists/Lists/VirtualizedSectionList.js","webpack://sas-auth/../../node_modules/.pnpm/@react-native+virtualized-lists@0.76.3_@types+react@18.2.27_react-native@0.76.3_@babel+core@7_zir2vdgrjgh5lvp3ntzlz3u5gu/node_modules/@react-native/virtualized-lists/Utilities/clamp.js","webpack://sas-auth/../../node_modules/.pnpm/@react-native+virtualized-lists@0.76.3_@types+react@18.2.27_react-native@0.76.3_@babel+core@7_zir2vdgrjgh5lvp3ntzlz3u5gu/node_modules/@react-native/virtualized-lists/Utilities/infoLog.js","webpack://sas-auth/../../node_modules/.pnpm/@react-native+virtualized-lists@0.76.3_@types+react@18.2.27_react-native@0.76.3_@babel+core@7_zir2vdgrjgh5lvp3ntzlz3u5gu/node_modules/@react-native/virtualized-lists/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict-local\n */\n\n'use strict';\n\nconst {InteractionManager} = require('react-native');\n\n/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */\nclass Batchinator {\n  _callback            ;\n  _delay        ;\n  _taskHandle                            ;\n  constructor(callback            , delayMS        ) {\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  /*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */\n  dispose(options                        = {abort: false}) {\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n      if (!options.abort) {\n        this._callback();\n      }\n      this._taskHandle = null;\n    }\n  }\n  schedule() {\n    if (this._taskHandle) {\n      return;\n    }\n    const timeoutHandle = setTimeout(() => {\n      this._taskHandle = InteractionManager.runAfterInteractions(() => {\n        // Note that we clear the handle before invoking the callback so that if the callback calls\n        // schedule again, it will actually schedule another task.\n        this._taskHandle = null;\n        this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = {cancel: () => clearTimeout(timeoutHandle)};\n  }\n}\n\nmodule.exports = Batchinator;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict\n * @format\n */\n\nimport invariant from 'invariant';\n\n                          \n                \n               \n                    \n  \n\nexport class CellRenderMask {\n  _numCells        ;\n  _regions                   ;\n\n  constructor(numCells        ) {\n    invariant(\n      numCells >= 0,\n      'CellRenderMask must contain a non-negative number os cells',\n    );\n\n    this._numCells = numCells;\n\n    if (numCells === 0) {\n      this._regions = [];\n    } else {\n      this._regions = [\n        {\n          first: 0,\n          last: numCells - 1,\n          isSpacer: true,\n        },\n      ];\n    }\n  }\n\n  enumerateRegions()                             {\n    return this._regions;\n  }\n\n  addCells(cells                               )       {\n    invariant(\n      cells.first >= 0 &&\n        cells.first < this._numCells &&\n        cells.last >= -1 &&\n        cells.last < this._numCells &&\n        cells.last >= cells.first - 1,\n      'CellRenderMask.addCells called with invalid cell range',\n    );\n\n    // VirtualizedList uses inclusive ranges, where zero-count states are\n    // possible. E.g. [0, -1] for no cells, starting at 0.\n    if (cells.last < cells.first) {\n      return;\n    }\n\n    const [firstIntersect, firstIntersectIdx] = this._findRegion(cells.first);\n    const [lastIntersect, lastIntersectIdx] = this._findRegion(cells.last);\n\n    // Fast-path if the cells to add are already all present in the mask. We\n    // will otherwise need to do some mutation.\n    if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {\n      return;\n    }\n\n    // We need to replace the existing covered regions with 1-3 new regions\n    // depending whether we need to split spacers out of overlapping regions.\n    const newLeadRegion                    = [];\n    const newTailRegion                    = [];\n    const newMainRegion             = {\n      ...cells,\n      isSpacer: false,\n    };\n\n    if (firstIntersect.first < newMainRegion.first) {\n      if (firstIntersect.isSpacer) {\n        newLeadRegion.push({\n          first: firstIntersect.first,\n          last: newMainRegion.first - 1,\n          isSpacer: true,\n        });\n      } else {\n        newMainRegion.first = firstIntersect.first;\n      }\n    }\n\n    if (lastIntersect.last > newMainRegion.last) {\n      if (lastIntersect.isSpacer) {\n        newTailRegion.push({\n          first: newMainRegion.last + 1,\n          last: lastIntersect.last,\n          isSpacer: true,\n        });\n      } else {\n        newMainRegion.last = lastIntersect.last;\n      }\n    }\n\n    const replacementRegions                    = [\n      ...newLeadRegion,\n      newMainRegion,\n      ...newTailRegion,\n    ];\n    const numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;\n    this._regions.splice(\n      firstIntersectIdx,\n      numRegionsToDelete,\n      ...replacementRegions,\n    );\n  }\n\n  numCells()         {\n    return this._numCells;\n  }\n\n  equals(other                )          {\n    return (\n      this._numCells === other._numCells &&\n      this._regions.length === other._regions.length &&\n      this._regions.every(\n        (region, i) =>\n          region.first === other._regions[i].first &&\n          region.last === other._regions[i].last &&\n          region.isSpacer === other._regions[i].isSpacer,\n      )\n    );\n  }\n\n  _findRegion(cellIdx        )                       {\n    let firstIdx = 0;\n    let lastIdx = this._regions.length - 1;\n\n    while (firstIdx <= lastIdx) {\n      const middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n      const middleRegion = this._regions[middleIdx];\n\n      if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {\n        return [middleRegion, middleIdx];\n      } else if (cellIdx < middleRegion.first) {\n        lastIdx = middleIdx - 1;\n      } else if (cellIdx > middleRegion.last) {\n        firstIdx = middleIdx + 1;\n      }\n    }\n\n    invariant(false, `A region was not found containing cellIdx ${cellIdx}`);\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict\n * @format\n */\n\nimport invariant from 'invariant';\n\nexport default class ChildListCollection        {\n  _cellKeyToChildren                          = new Map();\n  _childrenToCellKey                     = new Map();\n\n  add(list       , cellKey        )       {\n    invariant(\n      !this._childrenToCellKey.has(list),\n      'Trying to add already present child list',\n    );\n\n    const cellLists = this._cellKeyToChildren.get(cellKey) ?? new Set();\n    cellLists.add(list);\n    this._cellKeyToChildren.set(cellKey, cellLists);\n\n    this._childrenToCellKey.set(list, cellKey);\n  }\n\n  remove(list       )       {\n    const cellKey = this._childrenToCellKey.get(list);\n    invariant(cellKey != null, 'Trying to remove non-present child list');\n    this._childrenToCellKey.delete(list);\n\n    const cellLists = this._cellKeyToChildren.get(cellKey);\n    invariant(cellLists, '_cellKeyToChildren should contain cellKey');\n    cellLists.delete(list);\n\n    if (cellLists.size === 0) {\n      this._cellKeyToChildren.delete(cellKey);\n    }\n  }\n\n  forEach(fn               )       {\n    for (const listSet of this._cellKeyToChildren.values()) {\n      for (const list of listSet) {\n        fn(list);\n      }\n    }\n  }\n\n  forEachInCell(cellKey        , fn               )       {\n    const listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n    for (const list of listSet) {\n      fn(list);\n    }\n  }\n\n  anyInCell(cellKey        , fn                  )          {\n    const listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n    for (const list of listSet) {\n      if (fn(list)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  size()         {\n    return this._childrenToCellKey.size;\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n'use strict';\n\n                                                             \n\nimport ListMetricsAggregator from './ListMetricsAggregator';\n\n                                \n\nclass Info {\n  any_blank_count         = 0;\n  any_blank_ms         = 0;\n  any_blank_speed_sum         = 0;\n  mostly_blank_count         = 0;\n  mostly_blank_ms         = 0;\n  pixels_blank         = 0;\n  pixels_sampled         = 0;\n  pixels_scrolled         = 0;\n  total_time_spent         = 0;\n  sample_count         = 0;\n}\n\nconst DEBUG = false;\n\nlet _listeners                        = [];\nlet _minSampleCount = 10;\nlet _sampleRate = DEBUG ? 1 : null;\n\n/**\n * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.\n * By default the sampling rate is set to zero and this will do nothing. If you want to collect\n * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.\n *\n * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with\n * `SceneTracker.getActiveScene` to determine the context of the events.\n */\nclass FillRateHelper {\n  _anyBlankStartTime          = null;\n  _enabled = false;\n  _listMetrics                       ;\n  _info       = new Info();\n  _mostlyBlankStartTime          = null;\n  _samplesStartTime          = null;\n\n  static addListener(callback                      )   \n                       \n       \n    {\n    if (_sampleRate === null) {\n      console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n    }\n    _listeners.push(callback);\n    return {\n      remove: () => {\n        _listeners = _listeners.filter(listener => callback !== listener);\n      },\n    };\n  }\n\n  static setSampleRate(sampleRate        ) {\n    _sampleRate = sampleRate;\n  }\n\n  static setMinSampleCount(minSampleCount        ) {\n    _minSampleCount = minSampleCount;\n  }\n\n  constructor(listMetrics                       ) {\n    this._listMetrics = listMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n\n  activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = global.performance.now();\n    }\n  }\n\n  deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n    const start = this._samplesStartTime; // const for flow\n    if (start == null) {\n      DEBUG &&\n        console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n    if (this._info.sample_count < _minSampleCount) {\n      // Don't bother with under-sampled events.\n      this._resetData();\n      return;\n    }\n    const total_time_spent = global.performance.now() - start;\n    const info      = {\n      ...this._info,\n      total_time_spent,\n    };\n    if (DEBUG) {\n      const derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank:\n          this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min:\n          this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min:\n          this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent,\n      };\n      for (const key in derived) {\n        // $FlowFixMe[prop-missing]\n        // $FlowFixMe[invalid-computed-prop]\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n      console.debug('FillRateHelper deactivateAndFlush: ', {derived, info});\n    }\n    _listeners.forEach(listener => listener(info));\n    this._resetData();\n  }\n\n  computeBlankness(\n    props   \n                         \n                                   \n         \n     ,\n    cellsAroundViewport   \n                    \n                   \n         \n     ,\n    scrollMetrics   \n                      \n                     \n                       \n                            \n         \n     ,\n  )         {\n    if (\n      !this._enabled ||\n      props.getItemCount(props.data) === 0 ||\n      cellsAroundViewport.last < cellsAroundViewport.first ||\n      this._samplesStartTime == null\n    ) {\n      return 0;\n    }\n    const {dOffset, offset, velocity, visibleLength} = scrollMetrics;\n\n    // Denominator metrics that we track for all events - most of the time there is no blankness and\n    // we want to capture that.\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    const scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec\n\n    // Whether blank now or not, record the elapsed time blank if we were blank last time.\n    const now = global.performance.now();\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n    this._anyBlankStartTime = null;\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n    this._mostlyBlankStartTime = null;\n\n    let blankTop = 0;\n    let first = cellsAroundViewport.first;\n    let firstFrame = this._listMetrics.getCellMetrics(first, props);\n    while (\n      first <= cellsAroundViewport.last &&\n      (!firstFrame || !firstFrame.isMounted)\n    ) {\n      firstFrame = this._listMetrics.getCellMetrics(first, props);\n      first++;\n    }\n    // Only count blankTop if we aren't rendering the first item, otherwise we will count the header\n    // as blank.\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(\n        visibleLength,\n        Math.max(0, firstFrame.offset - offset),\n      );\n    }\n    let blankBottom = 0;\n    let last = cellsAroundViewport.last;\n    let lastFrame = this._listMetrics.getCellMetrics(last, props);\n    while (\n      last >= cellsAroundViewport.first &&\n      (!lastFrame || !lastFrame.isMounted)\n    ) {\n      lastFrame = this._listMetrics.getCellMetrics(last, props);\n      last--;\n    }\n    // Only count blankBottom if we aren't rendering the last item, otherwise we will count the\n    // footer as blank.\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      const bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(\n        visibleLength,\n        Math.max(0, offset + visibleLength - bottomEdge),\n      );\n    }\n    const pixels_blank = Math.round(blankTop + blankBottom);\n    const blankness = pixels_blank / visibleLength;\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n    return blankness;\n  }\n\n  enabled()          {\n    return this._enabled;\n  }\n\n  _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  }\n}\n\nmodule.exports = FillRateHelper;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict-local\n * @format\n */\n\n                                                                          \n                                                                        \n\nimport {keyExtractor as defaultKeyExtractor} from './VirtualizeUtils';\nimport invariant from 'invariant';\n\n                           \n     \n                                  \n     \n                \n     \n                                                \n     \n                 \n     \n                                                                             \n         \n     \n                 \n     \n                                                 \n     \n                     \n  \n\n// TODO: `inverted` can be incorporated here if it is moved to an order\n// based implementation instead of transform.\n                               \n                      \n               \n  \n\n/**\n * Subset of VirtualizedList props needed to calculate cell metrics\n */\n                               \n                                     \n                                                     \n                                           \n                                                        \n                                                      \n     \n  \n\n/**\n * Provides an interface to query information about the metrics of a list and its cells.\n */\nexport default class ListMetricsAggregator {\n  _averageCellLength = 0;\n  _cellMetrics                           = new Map();\n  _contentLength         ;\n  _highestMeasuredCellIndex = 0;\n  _measuredCellsLength = 0;\n  _measuredCellsCount = 0;\n  _orientation                  = {\n    horizontal: false,\n    rtl: false,\n  };\n\n  /**\n   * Notify the ListMetricsAggregator that a cell has been laid out.\n   *\n   * @returns whether the cell layout has changed since last notification\n   */\n  notifyCellLayout({\n    cellIndex,\n    cellKey,\n    orientation,\n    layout,\n  }   \n                      \n                    \n                                 \n                   \n   )          {\n    this._invalidateIfOrientationChanged(orientation);\n\n    const next              = {\n      index: cellIndex,\n      length: this._selectLength(layout),\n      isMounted: true,\n      offset: this.flowRelativeOffset(layout),\n    };\n    const curr = this._cellMetrics.get(cellKey);\n\n    if (!curr || next.offset !== curr.offset || next.length !== curr.length) {\n      if (curr) {\n        const dLength = next.length - curr.length;\n        this._measuredCellsLength += dLength;\n      } else {\n        this._measuredCellsLength += next.length;\n        this._measuredCellsCount += 1;\n      }\n\n      this._averageCellLength =\n        this._measuredCellsLength / this._measuredCellsCount;\n      this._cellMetrics.set(cellKey, next);\n      this._highestMeasuredCellIndex = Math.max(\n        this._highestMeasuredCellIndex,\n        cellIndex,\n      );\n      return true;\n    } else {\n      curr.isMounted = true;\n      return false;\n    }\n  }\n\n  /**\n   * Notify ListMetricsAggregator that a cell has been unmounted.\n   */\n  notifyCellUnmounted(cellKey        )       {\n    const curr = this._cellMetrics.get(cellKey);\n    if (curr) {\n      curr.isMounted = false;\n    }\n  }\n\n  /**\n   * Notify ListMetricsAggregator that the lists content container has been laid out.\n   */\n  notifyListContentLayout({\n    orientation,\n    layout,\n  }   \n                                 \n                                                       \n   )       {\n    this._invalidateIfOrientationChanged(orientation);\n    this._contentLength = this._selectLength(layout);\n  }\n\n  /**\n   * Return the average length of the cells which have been measured\n   */\n  getAverageCellLength()         {\n    return this._averageCellLength;\n  }\n\n  /**\n   * Return the highest measured cell index (or 0 if nothing has been measured\n   * yet)\n   */\n  getHighestMeasuredCellIndex()         {\n    return this._highestMeasuredCellIndex;\n  }\n\n  /**\n   * Returns the exact metrics of a cell if it has already been laid out,\n   * otherwise an estimate based on the average length of previously measured\n   * cells\n   */\n  getCellMetricsApprox(index        , props                 )              {\n    const frame = this.getCellMetrics(index, props);\n    if (frame && frame.index === index) {\n      // check for invalid frames due to row re-ordering\n      return frame;\n    } else {\n      const {data, getItemCount} = props;\n      invariant(\n        index >= 0 && index < getItemCount(data),\n        'Tried to get frame for out of range index ' + index,\n      );\n      return {\n        length: this._averageCellLength,\n        offset: this._averageCellLength * index,\n        index,\n        isMounted: false,\n      };\n    }\n  }\n\n  /**\n   * Returns the exact metrics of a cell if it has already been laid out\n   */\n  getCellMetrics(index        , props                 )               {\n    const {data, getItem, getItemCount, getItemLayout} = props;\n    invariant(\n      index >= 0 && index < getItemCount(data),\n      'Tried to get metrics for out of range cell index ' + index,\n    );\n    const keyExtractor = props.keyExtractor ?? defaultKeyExtractor;\n    const frame = this._cellMetrics.get(\n      keyExtractor(getItem(data, index), index),\n    );\n    if (frame && frame.index === index) {\n      return frame;\n    }\n\n    if (getItemLayout) {\n      const {length, offset} = getItemLayout(data, index);\n      // TODO: `isMounted` is used for both \"is exact layout\" and \"has been\n      // unmounted\". Should be refactored.\n      return {index, length, offset, isMounted: true};\n    }\n\n    return null;\n  }\n\n  /**\n   * Gets an approximate offset to an item at a given index. Supports\n   * fractional indices.\n   */\n  getCellOffsetApprox(index        , props                 )         {\n    if (Number.isInteger(index)) {\n      return this.getCellMetricsApprox(index, props).offset;\n    } else {\n      const frameMetrics = this.getCellMetricsApprox(Math.floor(index), props);\n      const remainder = index - Math.floor(index);\n      return frameMetrics.offset + remainder * frameMetrics.length;\n    }\n  }\n\n  /**\n   * Returns the length of all ScrollView content along the scrolling axis.\n   */\n  getContentLength()         {\n    return this._contentLength ?? 0;\n  }\n\n  /**\n   * Whether a content length has been observed\n   */\n  hasContentLength()          {\n    return this._contentLength != null;\n  }\n\n  /**\n   * Finds the flow-relative offset (e.g. starting from the left in LTR, but\n   * right in RTL) from a layout box.\n   */\n  flowRelativeOffset(layout        , referenceContentLength          )         {\n    const {horizontal, rtl} = this._orientation;\n\n    if (horizontal && rtl) {\n      const contentLength = referenceContentLength ?? this._contentLength;\n      invariant(\n        contentLength != null,\n        'ListMetricsAggregator must be notified of list content layout before resolving offsets',\n      );\n      return (\n        contentLength -\n        (this._selectOffset(layout) + this._selectLength(layout))\n      );\n    } else {\n      return this._selectOffset(layout);\n    }\n  }\n\n  /**\n   * Converts a flow-relative offset to a cartesian offset\n   */\n  cartesianOffset(flowRelativeOffset        )         {\n    const {horizontal, rtl} = this._orientation;\n\n    if (horizontal && rtl) {\n      invariant(\n        this._contentLength != null,\n        'ListMetricsAggregator must be notified of list content layout before resolving offsets',\n      );\n      return this._contentLength - flowRelativeOffset;\n    } else {\n      return flowRelativeOffset;\n    }\n  }\n\n  _invalidateIfOrientationChanged(orientation                 )       {\n    if (orientation.rtl !== this._orientation.rtl) {\n      this._cellMetrics.clear();\n    }\n\n    if (orientation.horizontal !== this._orientation.horizontal) {\n      this._averageCellLength = 0;\n      this._highestMeasuredCellIndex = 0;\n      this._measuredCellsLength = 0;\n      this._measuredCellsCount = 0;\n    }\n\n    this._orientation = orientation;\n  }\n\n  _selectLength({\n    width,\n    height,\n  }                                                 )         {\n    return this._orientation.horizontal ? width : height;\n  }\n\n  _selectOffset({x, y}                                        )         {\n    return this._orientation.horizontal ? x : y;\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict\n * @format\n */\n\nimport invariant from 'invariant';\nimport * as React from 'react';\n\n/**\n * `setState` is called asynchronously, and should not rely on the value of\n * `this.props` or `this.state`:\n * https://react.dev/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous\n *\n * SafePureComponent adds runtime enforcement, to catch cases where these\n * variables are read in a state updater function, instead of the ones passed\n * in.\n */\nexport default class StateSafePureComponent \n        \n                      \n  extends React.PureComponent               {\n  _inAsyncStateUpdate = false;\n\n  constructor(props       ) {\n    super(props);\n    this._installSetStateHooks();\n  }\n\n  setState(\n    partialState                                                         ,\n    callback              ,\n  )       {\n    if (typeof partialState === 'function') {\n      super.setState((state, props) => {\n        this._inAsyncStateUpdate = true;\n        let ret;\n        try {\n          ret = partialState(state, props);\n        } catch (err) {\n          throw err;\n        } finally {\n          this._inAsyncStateUpdate = false;\n        }\n        return ret;\n      }, callback);\n    } else {\n      super.setState(partialState, callback);\n    }\n  }\n\n  _installSetStateHooks() {\n    const that = this;\n    let {props, state} = this;\n\n    Object.defineProperty(this, 'props', {\n      get() {\n        invariant(\n          !that._inAsyncStateUpdate,\n          '\"this.props\" should not be accessed during state updates',\n        );\n        return props;\n      },\n      set(newProps       ) {\n        props = newProps;\n      },\n    });\n    Object.defineProperty(this, 'state', {\n      get() {\n        invariant(\n          !that._inAsyncStateUpdate,\n          '\"this.state\" should not be acceessed during state updates',\n        );\n        return state;\n      },\n      set(newState       ) {\n        state = newState;\n      },\n    });\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n'use strict';\n\n                                                             \n\nimport ListMetricsAggregator from './ListMetricsAggregator';\n\nconst invariant = require('invariant');\n\n                         \n            \n              \n                 \n                      \n                \n     \n  \n\n                                             \n                                       \n                                  \n                                    \n                              \n       \n             \n     \n  \n\n                                  \n     \n                                                                                                 \n                                                                                                   \n                                                    \n     \n                           \n\n     \n                                                                                       \n                                                                                              \n                                                                                               \n                                                                                               \n     \n                                            \n\n     \n                                                                                                  \n                                                             \n     \n                                       \n\n     \n                                                                                                 \n            \n     \n                               \n   \n\n/**\n * A Utility class for calculating viewable items based on current metrics like scroll position and\n * layout.\n *\n * An item is said to be in a \"viewable\" state when any of the following\n * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n * is true):\n *\n * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n *   visible in the view area >= `itemVisiblePercentThreshold`.\n * - Entirely visible on screen\n */\nclass ViewabilityHelper {\n  _config                   ;\n  _hasInteracted          = false;\n  _timers              = new Set();\n  _viewableIndices                = [];\n  _viewableItems                         = new Map();\n\n  constructor(\n    config                    = {viewAreaCoveragePercentThreshold: 0},\n  ) {\n    this._config = config;\n  }\n\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n  dispose() {\n    /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n     * comment suppresses an error found when Flow v0.63 was deployed. To see\n     * the error delete this comment and run Flow. */\n    this._timers.forEach(clearTimeout);\n  }\n\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n  computeViewableItems(\n    props                 ,\n    scrollOffset        ,\n    viewportHeight        ,\n    listMetrics                       ,\n    // Optional optimization to reduce the scan size\n    renderRange    \n                    \n                   \n         \n     ,\n  )                {\n    const itemCount = props.getItemCount(props.data);\n    const {itemVisiblePercentThreshold, viewAreaCoveragePercentThreshold} =\n      this._config;\n    const viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    const viewablePercentThreshold = viewAreaMode\n      ? viewAreaCoveragePercentThreshold\n      : itemVisiblePercentThreshold;\n    invariant(\n      viewablePercentThreshold != null &&\n        (itemVisiblePercentThreshold != null) !==\n          (viewAreaCoveragePercentThreshold != null),\n      'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold',\n    );\n    const viewableIndices = [];\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n    let firstVisible = -1;\n    const {first, last} = renderRange || {first: 0, last: itemCount - 1};\n    if (last >= itemCount) {\n      console.warn(\n        'Invalid render range computing viewability ' +\n          JSON.stringify({renderRange, itemCount}),\n      );\n      return [];\n    }\n    for (let idx = first; idx <= last; idx++) {\n      const metrics = listMetrics.getCellMetrics(idx, props);\n      if (!metrics) {\n        continue;\n      }\n      const top = Math.floor(metrics.offset - scrollOffset);\n      const bottom = Math.floor(top + metrics.length);\n\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n        if (\n          _isViewable(\n            viewAreaMode,\n            viewablePercentThreshold,\n            top,\n            bottom,\n            viewportHeight,\n            metrics.length,\n          )\n        ) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n    return viewableIndices;\n  }\n\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n  onUpdate(\n    props                 ,\n    scrollOffset        ,\n    viewportHeight        ,\n    listMetrics                       ,\n    createViewToken   \n                    \n                          \n                             \n                  ,\n    onViewableItemsChanged    \n                                      \n                                \n         \n              ,\n    // Optional optimization to reduce the scan size\n    renderRange    \n                    \n                   \n         \n     ,\n  )       {\n    const itemCount = props.getItemCount(props.data);\n    if (\n      (this._config.waitForInteraction && !this._hasInteracted) ||\n      itemCount === 0 ||\n      !listMetrics.getCellMetrics(0, props)\n    ) {\n      return;\n    }\n    let viewableIndices                = [];\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(\n        props,\n        scrollOffset,\n        viewportHeight,\n        listMetrics,\n        renderRange,\n      );\n    }\n    if (\n      this._viewableIndices.length === viewableIndices.length &&\n      this._viewableIndices.every((v, ii) => v === viewableIndices[ii])\n    ) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n    this._viewableIndices = viewableIndices;\n    if (this._config.minimumViewTime) {\n      const handle            = setTimeout(() => {\n        /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n         * comment suppresses an error found when Flow v0.63 was deployed. To\n         * see the error delete this comment and run Flow. */\n        this._timers.delete(handle);\n        this._onUpdateSync(\n          props,\n          viewableIndices,\n          onViewableItemsChanged,\n          createViewToken,\n        );\n      }, this._config.minimumViewTime);\n      /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n       * comment suppresses an error found when Flow v0.63 was deployed. To see\n       * the error delete this comment and run Flow. */\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(\n        props,\n        viewableIndices,\n        onViewableItemsChanged,\n        createViewToken,\n      );\n    }\n  }\n\n  /**\n   * clean-up cached _viewableIndices to evaluate changed items on next update\n   */\n  resetViewableIndices() {\n    this._viewableIndices = [];\n  }\n\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n\n  _onUpdateSync(\n    props                 ,\n    viewableIndicesToCheck               ,\n    onViewableItemsChanged    \n                                \n                                      \n         \n              ,\n    createViewToken   \n                    \n                          \n                             \n                  ,\n  ) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii =>\n      this._viewableIndices.includes(ii),\n    );\n    const prevItems = this._viewableItems;\n    const nextItems = new Map(\n      viewableIndicesToCheck.map(ii => {\n        const viewable = createViewToken(ii, true, props);\n        return [viewable.key, viewable];\n      }),\n    );\n\n    const changed = [];\n    for (const [key, viewable] of nextItems) {\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n    for (const [key, viewable] of prevItems) {\n      if (!nextItems.has(key)) {\n        changed.push({...viewable, isViewable: false});\n      }\n    }\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n        viewabilityConfig: this._config,\n      });\n    }\n  }\n}\n\nfunction _isViewable(\n  viewAreaMode         ,\n  viewablePercentThreshold        ,\n  top        ,\n  bottom        ,\n  viewportHeight        ,\n  itemLength        ,\n)          {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    const pixels = _getPixelsVisible(top, bottom, viewportHeight);\n    const percent =\n      100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(\n  top        ,\n  bottom        ,\n  viewportHeight        ,\n)         {\n  const visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(\n  top        ,\n  bottom        ,\n  viewportHeight        ,\n)          {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nmodule.exports = ViewabilityHelper;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n'use strict';\n\n                                    \n                  \n                                 \n\n/**\n * Used to find the indices of the frames that overlap the given offsets. Useful for finding the\n * items that bound different windows of content, such as the visible area or the buffered overscan\n * area.\n */\nexport function elementsThatOverlapOffsets(\n  offsets               ,\n  props                 ,\n  listMetrics                       ,\n  zoomScale         = 1,\n)                {\n  const itemCount = props.getItemCount(props.data);\n  const result = [];\n  for (let offsetIndex = 0; offsetIndex < offsets.length; offsetIndex++) {\n    const currentOffset = offsets[offsetIndex];\n    let left = 0;\n    let right = itemCount - 1;\n\n    while (left <= right) {\n      const mid = left + Math.floor((right - left) / 2);\n      const frame = listMetrics.getCellMetricsApprox(mid, props);\n      const scaledOffsetStart = frame.offset * zoomScale;\n      const scaledOffsetEnd = (frame.offset + frame.length) * zoomScale;\n\n      // We want the first frame that contains the offset, with inclusive bounds. Thus, for the\n      // first frame the scaledOffsetStart is inclusive, while for other frames it is exclusive.\n      if (\n        (mid === 0 && currentOffset < scaledOffsetStart) ||\n        (mid !== 0 && currentOffset <= scaledOffsetStart)\n      ) {\n        right = mid - 1;\n      } else if (currentOffset > scaledOffsetEnd) {\n        left = mid + 1;\n      } else {\n        result[offsetIndex] = mid;\n        break;\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Computes the number of elements in the `next` range that are new compared to the `prev` range.\n * Handy for calculating how many new items will be rendered when the render window changes so we\n * can restrict the number of new items render at once so that content can appear on the screen\n * faster.\n */\nexport function newRangeCount(\n  prev   \n                  \n                 \n       \n   ,\n  next   \n                  \n                 \n       \n   ,\n)         {\n  return (\n    next.last -\n    next.first +\n    1 -\n    Math.max(\n      0,\n      1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first),\n    )\n  );\n}\n\n/**\n * Custom logic for determining which items should be rendered given the current frame and scroll\n * metrics, as well as the previous render state. The algorithm may evolve over time, but generally\n * prioritizes the visible area first, then expands that with overscan regions ahead and behind,\n * biased in the direction of scroll.\n */\nexport function computeWindowedRenderLimits(\n  props                 ,\n  maxToRenderPerBatch        ,\n  windowSize        ,\n  prev   \n                  \n                 \n   ,\n  listMetrics                       ,\n  scrollMetrics   \n               \n                   \n                     \n                          \n                      \n       \n   ,\n)   \n                \n               \n  {\n  const itemCount = props.getItemCount(props.data);\n  if (itemCount === 0) {\n    return {first: 0, last: -1};\n  }\n  const {offset, velocity, visibleLength, zoomScale = 1} = scrollMetrics;\n\n  // Start with visible area, then compute maximum overscan region by expanding from there, biased\n  // in the direction of scroll. Total overscan area is capped, which should cap memory consumption\n  // too.\n  const visibleBegin = Math.max(0, offset);\n  const visibleEnd = visibleBegin + visibleLength;\n  const overscanLength = (windowSize - 1) * visibleLength;\n\n  // Considering velocity seems to introduce more churn than it's worth.\n  const leadFactor = 0.5; // Math.max(0, Math.min(1, velocity / 25 + 0.5));\n\n  const fillPreference =\n    velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n\n  const overscanBegin = Math.max(\n    0,\n    visibleBegin - (1 - leadFactor) * overscanLength,\n  );\n  const overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n\n  const lastItemOffset =\n    listMetrics.getCellMetricsApprox(itemCount - 1, props).offset * zoomScale;\n  if (lastItemOffset < overscanBegin) {\n    // Entire list is before our overscan window\n    return {\n      first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n      last: itemCount - 1,\n    };\n  }\n\n  // Find the indices that correspond to the items at the render boundaries we're targeting.\n  let [overscanFirst, first, last, overscanLast] = elementsThatOverlapOffsets(\n    [overscanBegin, visibleBegin, visibleEnd, overscanEnd],\n    props,\n    listMetrics,\n    zoomScale,\n  );\n  overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n  first = first == null ? Math.max(0, overscanFirst) : first;\n  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n  last =\n    last == null\n      ? Math.min(overscanLast, first + maxToRenderPerBatch - 1)\n      : last;\n  const visible = {first, last};\n\n  // We want to limit the number of new cells we're rendering per batch so that we can fill the\n  // content on the screen quickly. If we rendered the entire overscan window at once, the user\n  // could be staring at white space for a long time waiting for a bunch of offscreen content to\n  // render.\n  let newCellCount = newRangeCount(prev, visible);\n\n  while (true) {\n    if (first <= overscanFirst && last >= overscanLast) {\n      // If we fill the entire overscan range, we're done.\n      break;\n    }\n    const maxNewCells = newCellCount >= maxToRenderPerBatch;\n    const firstWillAddMore = first <= prev.first || first > prev.last;\n    const firstShouldIncrement =\n      first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n    const lastWillAddMore = last >= prev.last || last < prev.first;\n    const lastShouldIncrement =\n      last < overscanLast && (!maxNewCells || !lastWillAddMore);\n    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n      // We only want to stop if we've hit maxNewCells AND we cannot increment first or last\n      // without rendering new items. This let's us preserve as many already rendered items as\n      // possible, reducing render churn and keeping the rendered overscan range as large as\n      // possible.\n      break;\n    }\n    if (\n      firstShouldIncrement &&\n      !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)\n    ) {\n      if (firstWillAddMore) {\n        newCellCount++;\n      }\n      first--;\n    }\n    if (\n      lastShouldIncrement &&\n      !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)\n    ) {\n      if (lastWillAddMore) {\n        newCellCount++;\n      }\n      last++;\n    }\n  }\n  if (\n    !(\n      last >= first &&\n      first >= 0 &&\n      last < itemCount &&\n      first >= overscanFirst &&\n      last <= overscanLast &&\n      first <= visible.first &&\n      last >= visible.last\n    )\n  ) {\n    throw new Error(\n      'Bad window calculation ' +\n        JSON.stringify({\n          first,\n          last,\n          itemCount,\n          overscanFirst,\n          overscanLast,\n          visible,\n        }),\n    );\n  }\n  return {first, last};\n}\n\nexport function keyExtractor(item     , index        )         {\n  if (typeof item === 'object' && item?.key != null) {\n    return item.key;\n  }\n  if (typeof item === 'object' && item?.id != null) {\n    return item.id;\n  }\n  return String(index);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n                                                                              \n                                                   \n             \n       \n        \n                  \n                 \n             \n                                \n                                                                                                 \n                                                                                \n             \n              \n              \n                                                     \n\nimport Batchinator from '../Interaction/Batchinator';\nimport clamp from '../Utilities/clamp';\nimport infoLog from '../Utilities/infoLog';\nimport {CellRenderMask} from './CellRenderMask';\nimport ChildListCollection from './ChildListCollection';\nimport FillRateHelper from './FillRateHelper';\nimport ListMetricsAggregator from './ListMetricsAggregator';\nimport StateSafePureComponent from './StateSafePureComponent';\nimport ViewabilityHelper from './ViewabilityHelper';\nimport CellRenderer from './VirtualizedListCellRenderer';\nimport {\n  VirtualizedListCellContextProvider,\n  VirtualizedListContext,\n  VirtualizedListContextProvider,\n} from './VirtualizedListContext.js';\nimport {\n  horizontalOrDefault,\n  initialNumToRenderOrDefault,\n  maxToRenderPerBatchOrDefault,\n  onEndReachedThresholdOrDefault,\n  onStartReachedThresholdOrDefault,\n  windowSizeOrDefault,\n} from './VirtualizedListProps';\nimport {\n  computeWindowedRenderLimits,\n  keyExtractor as defaultKeyExtractor,\n} from './VirtualizeUtils';\nimport invariant from 'invariant';\nimport nullthrows from 'nullthrows';\nimport * as React from 'react';\nimport {\n  I18nManager,\n  Platform,\n  RefreshControl,\n  ScrollView,\n  StyleSheet,\n  View,\n  findNodeHandle,\n} from 'react-native';\n\n                                                          \n\nconst ON_EDGE_REACHED_EPSILON = 0.001;\n\nlet _usedIndexForKey = false;\nlet _keylessItemComponentName         = '';\n\n                                       \n                                       \n                                  \n                                    \n                              \n       \n             \n     \n  \n\n              \n                             \n                                                     \n                                                                                           \n                               \n                                                                                             \n                                   \n  \n\nfunction getScrollingThreshold(threshold        , visibleLength        ) {\n  return (threshold * visibleLength) / 2;\n}\n\n/**\n * Base implementation for the more convenient [`<FlatList>`](https://reactnative.dev/docs/flatlist)\n * and [`<SectionList>`](https://reactnative.dev/docs/sectionlist) components, which are also better\n * documented. In general, this should only really be used if you need more flexibility than\n * `FlatList` provides, e.g. for use with immutable data instead of plain arrays.\n *\n * Virtualization massively improves memory consumption and performance of large lists by\n * maintaining a finite render window of active items and replacing all items outside of the render\n * window with appropriately sized blank space. The window adapts to scrolling behavior, and items\n * are rendered incrementally with low-pri (after any running interactions) if they are far from the\n * visible area, or with hi-pri otherwise to minimize the potential of seeing blank space.\n *\n * Some caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` or `id` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n * - As an effort to remove defaultProps, use helper functions when referencing certain props\n *\n */\nclass VirtualizedList extends StateSafePureComponent               {\n  static contextType                                = VirtualizedListContext;\n\n  // scrollToEnd may be janky without getItemLayout prop\n  scrollToEnd(params                              ) {\n    const animated = params ? params.animated : true;\n    const veryLast = this.props.getItemCount(this.props.data) - 1;\n    if (veryLast < 0) {\n      return;\n    }\n    const frame = this._listMetrics.getCellMetricsApprox(veryLast, this.props);\n    const offset = Math.max(\n      0,\n      frame.offset +\n        frame.length +\n        this._footerLength -\n        this._scrollMetrics.visibleLength,\n    );\n\n    // TODO: consider using `ref.scrollToEnd` directly\n    this.scrollToOffset({animated, offset});\n  }\n\n  // scrollToIndex may be janky without getItemLayout prop\n  scrollToIndex(params   \n                        \n                  \n                        \n                          \n       \n   )             {\n    const {data, getItemCount, getItemLayout, onScrollToIndexFailed} =\n      this.props;\n    const {animated, index, viewOffset, viewPosition} = params;\n    invariant(\n      index >= 0,\n      `scrollToIndex out of range: requested index ${index} but minimum is 0`,\n    );\n    invariant(\n      getItemCount(data) >= 1,\n      `scrollToIndex out of range: item length ${getItemCount(\n        data,\n      )} but minimum is 1`,\n    );\n    invariant(\n      index < getItemCount(data),\n      `scrollToIndex out of range: requested index ${index} is out of 0 to ${\n        getItemCount(data) - 1\n      }`,\n    );\n    if (\n      !getItemLayout &&\n      index > this._listMetrics.getHighestMeasuredCellIndex()\n    ) {\n      invariant(\n        !!onScrollToIndexFailed,\n        'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' +\n          'otherwise there is no way to know the location of offscreen indices or handle failures.',\n      );\n      onScrollToIndexFailed({\n        averageItemLength: this._listMetrics.getAverageCellLength(),\n        highestMeasuredFrameIndex:\n          this._listMetrics.getHighestMeasuredCellIndex(),\n        index,\n      });\n      return;\n    }\n    const frame = this._listMetrics.getCellMetricsApprox(\n      Math.floor(index),\n      this.props,\n    );\n    const offset =\n      Math.max(\n        0,\n        this._listMetrics.getCellOffsetApprox(index, this.props) -\n          (viewPosition || 0) *\n            (this._scrollMetrics.visibleLength - frame.length),\n      ) - (viewOffset || 0);\n\n    this.scrollToOffset({offset, animated});\n  }\n\n  // scrollToItem may be janky without getItemLayout prop. Required linear scan through items -\n  // use scrollToIndex instead if possible.\n  scrollToItem(params   \n                        \n               \n                        \n                          \n       \n   ) {\n    const {item} = params;\n    const {data, getItem, getItemCount} = this.props;\n    const itemCount = getItemCount(data);\n    for (let index = 0; index < itemCount; index++) {\n      if (getItem(data, index) === item) {\n        this.scrollToIndex({...params, index});\n        break;\n      }\n    }\n  }\n\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Param `offset` expects the offset to scroll to.\n   * In case of `horizontal` is true, the offset is the x-value,\n   * in any other case the offset is the y-value.\n   *\n   * Param `animated` (`true` by default) defines whether the list\n   * should do an animation while scrolling.\n   */\n  scrollToOffset(params                                            ) {\n    const {animated, offset} = params;\n    const scrollRef = this._scrollRef;\n\n    if (scrollRef == null) {\n      return;\n    }\n\n    if (scrollRef.scrollTo == null) {\n      console.warn(\n        'No scrollTo method provided. This may be because you have two nested ' +\n          'VirtualizedLists with the same orientation, or because you are ' +\n          'using a custom component that does not implement scrollTo.',\n      );\n      return;\n    }\n\n    const {horizontal, rtl} = this._orientation();\n    if (horizontal && rtl && !this._listMetrics.hasContentLength()) {\n      console.warn(\n        'scrollToOffset may not be called in RTL before content is laid out',\n      );\n      return;\n    }\n\n    scrollRef.scrollTo({\n      animated,\n      ...this._scrollToParamsFromOffset(offset),\n    });\n  }\n\n  _scrollToParamsFromOffset(offset        )                           {\n    const {horizontal, rtl} = this._orientation();\n    if (horizontal && rtl) {\n      // Add the visible length of the scrollview so that the offset is right-aligned\n      const cartOffset = this._listMetrics.cartesianOffset(\n        offset + this._scrollMetrics.visibleLength,\n      );\n      return horizontal ? {x: cartOffset} : {y: cartOffset};\n    } else {\n      return horizontal ? {x: offset} : {y: offset};\n    }\n  }\n\n  recordInteraction() {\n    this._nestedChildLists.forEach(childList => {\n      childList.recordInteraction();\n    });\n    this._viewabilityTuples.forEach(t => {\n      t.viewabilityHelper.recordInteraction();\n    });\n    this._updateViewableItems(this.props, this.state.cellsAroundViewport);\n  }\n\n  flashScrollIndicators() {\n    if (this._scrollRef == null) {\n      return;\n    }\n\n    this._scrollRef.flashScrollIndicators();\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   * Note that `this._scrollRef` might not be a `ScrollView`, so we\n   * need to check that it responds to `getScrollResponder` before calling it.\n   */\n  getScrollResponder()                       {\n    if (this._scrollRef && this._scrollRef.getScrollResponder) {\n      return this._scrollRef.getScrollResponder();\n    }\n  }\n\n  getScrollableNode()          {\n    if (this._scrollRef && this._scrollRef.getScrollableNode) {\n      return this._scrollRef.getScrollableNode();\n    } else {\n      return findNodeHandle(this._scrollRef);\n    }\n  }\n\n  getScrollRef() \n                                          \n                                     {\n    if (this._scrollRef && this._scrollRef.getScrollRef) {\n      return this._scrollRef.getScrollRef();\n    } else {\n      return this._scrollRef;\n    }\n  }\n\n  setNativeProps(props        ) {\n    if (this._scrollRef) {\n      this._scrollRef.setNativeProps(props);\n    }\n  }\n\n  _getCellKey()         {\n    return this.context?.cellKey || 'rootList';\n  }\n\n  // $FlowFixMe[missing-local-annot]\n  _getScrollMetrics = () => {\n    return this._scrollMetrics;\n  };\n\n  hasMore()          {\n    return this._hasMore;\n  }\n\n  // $FlowFixMe[missing-local-annot]\n  _getOutermostParentListRef = () => {\n    if (this._isNestedWithSameOrientation()) {\n      return this.context.getOutermostParentListRef();\n    } else {\n      return this;\n    }\n  };\n\n  _registerAsNestedChild = (childList   \n                    \n                                                  \n   )       => {\n    this._nestedChildLists.add(childList.ref, childList.cellKey);\n    if (this._hasInteracted) {\n      childList.ref.recordInteraction();\n    }\n  };\n\n  _unregisterAsNestedChild = (childList   \n                                                  \n   )       => {\n    this._nestedChildLists.remove(childList.ref);\n  };\n\n  state       ;\n\n  constructor(props       ) {\n    super(props);\n    this._checkProps(props);\n\n    this._fillRateHelper = new FillRateHelper(this._listMetrics);\n    this._updateCellsToRenderBatcher = new Batchinator(\n      this._updateCellsToRender,\n      this.props.updateCellsBatchingPeriod ?? 50,\n    );\n\n    if (this.props.viewabilityConfigCallbackPairs) {\n      this._viewabilityTuples = this.props.viewabilityConfigCallbackPairs.map(\n        pair => ({\n          viewabilityHelper: new ViewabilityHelper(pair.viewabilityConfig),\n          onViewableItemsChanged: pair.onViewableItemsChanged,\n        }),\n      );\n    } else {\n      const {onViewableItemsChanged, viewabilityConfig} = this.props;\n      if (onViewableItemsChanged) {\n        this._viewabilityTuples.push({\n          viewabilityHelper: new ViewabilityHelper(viewabilityConfig),\n          onViewableItemsChanged: onViewableItemsChanged,\n        });\n      }\n    }\n\n    const initialRenderRegion = VirtualizedList._initialRenderRegion(props);\n\n    const minIndexForVisible =\n      this.props.maintainVisibleContentPosition?.minIndexForVisible ?? 0;\n\n    this.state = {\n      cellsAroundViewport: initialRenderRegion,\n      renderMask: VirtualizedList._createRenderMask(props, initialRenderRegion),\n      firstVisibleItemKey:\n        this.props.getItemCount(this.props.data) > minIndexForVisible\n          ? VirtualizedList._getItemKey(this.props, minIndexForVisible)\n          : null,\n      // When we have a non-zero initialScrollIndex, we will receive a\n      // scroll event later so this will prevent the window from updating\n      // until we get a valid offset.\n      pendingScrollUpdateCount:\n        this.props.initialScrollIndex != null &&\n        this.props.initialScrollIndex > 0\n          ? 1\n          : 0,\n    };\n  }\n\n  _checkProps(props       ) {\n    const {onScroll, windowSize, getItemCount, data, initialScrollIndex} =\n      props;\n\n    invariant(\n      // $FlowFixMe[prop-missing]\n      !onScroll || !onScroll.__isNative,\n      'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' +\n        'to support native onScroll events with useNativeDriver',\n    );\n    invariant(\n      windowSizeOrDefault(windowSize) > 0,\n      'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.',\n    );\n\n    invariant(\n      getItemCount,\n      'VirtualizedList: The \"getItemCount\" prop must be provided',\n    );\n\n    const itemCount = getItemCount(data);\n\n    if (\n      initialScrollIndex != null &&\n      !this._hasTriggeredInitialScrollToIndex &&\n      (initialScrollIndex < 0 ||\n        (itemCount > 0 && initialScrollIndex >= itemCount)) &&\n      !this._hasWarned.initialScrollIndex\n    ) {\n      console.warn(\n        `initialScrollIndex \"${initialScrollIndex}\" is not valid (list has ${itemCount} items)`,\n      );\n      this._hasWarned.initialScrollIndex = true;\n    }\n\n    if (__DEV__ && !this._hasWarned.flexWrap) {\n      // $FlowFixMe[underconstrained-implicit-instantiation]\n      const flatStyles = StyleSheet.flatten(this.props.contentContainerStyle);\n      if (flatStyles != null && flatStyles.flexWrap === 'wrap') {\n        console.warn(\n          '`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' +\n            'Consider using `numColumns` with `FlatList` instead.',\n        );\n        this._hasWarned.flexWrap = true;\n      }\n    }\n  }\n\n  static _findItemIndexWithKey(\n    props       ,\n    key        ,\n    hint         ,\n  )          {\n    const itemCount = props.getItemCount(props.data);\n    if (hint != null && hint >= 0 && hint < itemCount) {\n      const curKey = VirtualizedList._getItemKey(props, hint);\n      if (curKey === key) {\n        return hint;\n      }\n    }\n    for (let ii = 0; ii < itemCount; ii++) {\n      const curKey = VirtualizedList._getItemKey(props, ii);\n      if (curKey === key) {\n        return ii;\n      }\n    }\n    return null;\n  }\n\n  static _getItemKey(\n    props   \n                          \n                                \n                                          \n         \n     ,\n    index        ,\n  )         {\n    const item = props.getItem(props.data, index);\n    return VirtualizedList._keyExtractor(item, index, props);\n  }\n\n  static _createRenderMask(\n    props       ,\n    cellsAroundViewport                               ,\n    additionalRegions                                                 ,\n  )                 {\n    const itemCount = props.getItemCount(props.data);\n\n    invariant(\n      cellsAroundViewport.first >= 0 &&\n        cellsAroundViewport.last >= cellsAroundViewport.first - 1 &&\n        cellsAroundViewport.last < itemCount,\n      `Invalid cells around viewport \"[${cellsAroundViewport.first}, ${cellsAroundViewport.last}]\" was passed to VirtualizedList._createRenderMask`,\n    );\n\n    const renderMask = new CellRenderMask(itemCount);\n\n    if (itemCount > 0) {\n      const allRegions = [cellsAroundViewport, ...(additionalRegions ?? [])];\n      for (const region of allRegions) {\n        renderMask.addCells(region);\n      }\n\n      // The initially rendered cells are retained as part of the\n      // \"scroll-to-top\" optimization\n      if (props.initialScrollIndex == null || props.initialScrollIndex <= 0) {\n        const initialRegion = VirtualizedList._initialRenderRegion(props);\n        renderMask.addCells(initialRegion);\n      }\n\n      // The layout coordinates of sticker headers may be off-screen while the\n      // actual header is on-screen. Keep the most recent before the viewport\n      // rendered, even if its layout coordinates are not in viewport.\n      const stickyIndicesSet = new Set(props.stickyHeaderIndices);\n      VirtualizedList._ensureClosestStickyHeader(\n        props,\n        stickyIndicesSet,\n        renderMask,\n        cellsAroundViewport.first,\n      );\n    }\n\n    return renderMask;\n  }\n\n  static _initialRenderRegion(props       )                                {\n    const itemCount = props.getItemCount(props.data);\n\n    const firstCellIndex = Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(props.initialScrollIndex ?? 0)),\n    );\n\n    const lastCellIndex =\n      Math.min(\n        itemCount,\n        firstCellIndex + initialNumToRenderOrDefault(props.initialNumToRender),\n      ) - 1;\n\n    return {\n      first: firstCellIndex,\n      last: lastCellIndex,\n    };\n  }\n\n  static _ensureClosestStickyHeader(\n    props       ,\n    stickyIndicesSet             ,\n    renderMask                ,\n    cellIdx        ,\n  ) {\n    const stickyOffset = props.ListHeaderComponent ? 1 : 0;\n\n    for (let itemIdx = cellIdx - 1; itemIdx >= 0; itemIdx--) {\n      if (stickyIndicesSet.has(itemIdx + stickyOffset)) {\n        renderMask.addCells({first: itemIdx, last: itemIdx});\n        break;\n      }\n    }\n  }\n\n  _adjustCellsAroundViewport(\n    props       ,\n    cellsAroundViewport                               ,\n    pendingScrollUpdateCount        ,\n  )                                {\n    const {data, getItemCount} = props;\n    const onEndReachedThreshold = onEndReachedThresholdOrDefault(\n      props.onEndReachedThreshold,\n    );\n    const {offset, visibleLength} = this._scrollMetrics;\n    const contentLength = this._listMetrics.getContentLength();\n    const distanceFromEnd = contentLength - visibleLength - offset;\n\n    // Wait until the scroll view metrics have been set up. And until then,\n    // we will trust the initialNumToRender suggestion\n    if (visibleLength <= 0 || contentLength <= 0) {\n      return cellsAroundViewport.last >= getItemCount(data)\n        ? VirtualizedList._constrainToItemCount(cellsAroundViewport, props)\n        : cellsAroundViewport;\n    }\n\n    let newCellsAroundViewport                               ;\n    if (props.disableVirtualization) {\n      const renderAhead =\n        distanceFromEnd < onEndReachedThreshold * visibleLength\n          ? maxToRenderPerBatchOrDefault(props.maxToRenderPerBatch)\n          : 0;\n\n      newCellsAroundViewport = {\n        first: 0,\n        last: Math.min(\n          cellsAroundViewport.last + renderAhead,\n          getItemCount(data) - 1,\n        ),\n      };\n    } else {\n      // If we have a pending scroll update, we should not adjust the render window as it\n      // might override the correct window.\n      if (pendingScrollUpdateCount > 0) {\n        return cellsAroundViewport.last >= getItemCount(data)\n          ? VirtualizedList._constrainToItemCount(cellsAroundViewport, props)\n          : cellsAroundViewport;\n      }\n\n      newCellsAroundViewport = computeWindowedRenderLimits(\n        props,\n        maxToRenderPerBatchOrDefault(props.maxToRenderPerBatch),\n        windowSizeOrDefault(props.windowSize),\n        cellsAroundViewport,\n        this._listMetrics,\n        this._scrollMetrics,\n      );\n      invariant(\n        newCellsAroundViewport.last < getItemCount(data),\n        'computeWindowedRenderLimits() should return range in-bounds',\n      );\n    }\n\n    if (this._nestedChildLists.size() > 0) {\n      // If some cell in the new state has a child list in it, we should only render\n      // up through that item, so that we give that list a chance to render.\n      // Otherwise there's churn from multiple child lists mounting and un-mounting\n      // their items.\n\n      // Will this prevent rendering if the nested list doesn't realize the end?\n      const childIdx = this._findFirstChildWithMore(\n        newCellsAroundViewport.first,\n        newCellsAroundViewport.last,\n      );\n\n      newCellsAroundViewport.last = childIdx ?? newCellsAroundViewport.last;\n    }\n\n    return newCellsAroundViewport;\n  }\n\n  _findFirstChildWithMore(first        , last        )                {\n    for (let ii = first; ii <= last; ii++) {\n      const cellKeyForIndex = this._indicesToKeys.get(ii);\n      if (\n        cellKeyForIndex != null &&\n        this._nestedChildLists.anyInCell(cellKeyForIndex, childList =>\n          childList.hasMore(),\n        )\n      ) {\n        return ii;\n      }\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    if (this._isNestedWithSameOrientation()) {\n      this.context.registerAsNestedChild({\n        ref: this,\n        cellKey: this.context.cellKey,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this._isNestedWithSameOrientation()) {\n      this.context.unregisterAsNestedChild({ref: this});\n    }\n    this._updateCellsToRenderBatcher.dispose({abort: true});\n    this._viewabilityTuples.forEach(tuple => {\n      tuple.viewabilityHelper.dispose();\n    });\n    this._fillRateHelper.deactivateAndFlush();\n  }\n\n  static getDerivedStateFromProps(newProps       , prevState       )        {\n    // first and last could be stale (e.g. if a new, shorter items props is passed in), so we make\n    // sure we're rendering a reasonable range here.\n    const itemCount = newProps.getItemCount(newProps.data);\n    if (itemCount === prevState.renderMask.numCells()) {\n      return prevState;\n    }\n\n    let maintainVisibleContentPositionAdjustment          = null;\n    const prevFirstVisibleItemKey = prevState.firstVisibleItemKey;\n    const minIndexForVisible =\n      newProps.maintainVisibleContentPosition?.minIndexForVisible ?? 0;\n    const newFirstVisibleItemKey =\n      newProps.getItemCount(newProps.data) > minIndexForVisible\n        ? VirtualizedList._getItemKey(newProps, minIndexForVisible)\n        : null;\n    if (\n      newProps.maintainVisibleContentPosition != null &&\n      prevFirstVisibleItemKey != null &&\n      newFirstVisibleItemKey != null\n    ) {\n      if (newFirstVisibleItemKey !== prevFirstVisibleItemKey) {\n        // Fast path if items were added at the start of the list.\n        const hint =\n          itemCount - prevState.renderMask.numCells() + minIndexForVisible;\n        const firstVisibleItemIndex = VirtualizedList._findItemIndexWithKey(\n          newProps,\n          prevFirstVisibleItemKey,\n          hint,\n        );\n        maintainVisibleContentPositionAdjustment =\n          firstVisibleItemIndex != null\n            ? firstVisibleItemIndex - minIndexForVisible\n            : null;\n      } else {\n        maintainVisibleContentPositionAdjustment = null;\n      }\n    }\n\n    const constrainedCells = VirtualizedList._constrainToItemCount(\n      maintainVisibleContentPositionAdjustment != null\n        ? {\n            first:\n              prevState.cellsAroundViewport.first +\n              maintainVisibleContentPositionAdjustment,\n            last:\n              prevState.cellsAroundViewport.last +\n              maintainVisibleContentPositionAdjustment,\n          }\n        : prevState.cellsAroundViewport,\n      newProps,\n    );\n\n    return {\n      cellsAroundViewport: constrainedCells,\n      renderMask: VirtualizedList._createRenderMask(newProps, constrainedCells),\n      firstVisibleItemKey: newFirstVisibleItemKey,\n      pendingScrollUpdateCount:\n        maintainVisibleContentPositionAdjustment != null\n          ? prevState.pendingScrollUpdateCount + 1\n          : prevState.pendingScrollUpdateCount,\n    };\n  }\n\n  _pushCells(\n    cells               ,\n    stickyHeaderIndices               ,\n    stickyIndicesFromProps             ,\n    first        ,\n    last        ,\n    inversionStyle               ,\n  ) {\n    const {\n      CellRendererComponent,\n      ItemSeparatorComponent,\n      ListHeaderComponent,\n      ListItemComponent,\n      data,\n      debug,\n      getItem,\n      getItemCount,\n      getItemLayout,\n      horizontal,\n      renderItem,\n    } = this.props;\n    const stickyOffset = ListHeaderComponent ? 1 : 0;\n    const end = getItemCount(data) - 1;\n    let prevCellKey;\n    last = Math.min(end, last);\n\n    for (let ii = first; ii <= last; ii++) {\n      const item = getItem(data, ii);\n      const key = VirtualizedList._keyExtractor(item, ii, this.props);\n\n      this._indicesToKeys.set(ii, key);\n      if (stickyIndicesFromProps.has(ii + stickyOffset)) {\n        stickyHeaderIndices.push(cells.length);\n      }\n\n      const shouldListenForLayout =\n        getItemLayout == null || debug || this._fillRateHelper.enabled();\n\n      cells.push(\n        <CellRenderer\n          CellRendererComponent={CellRendererComponent}\n          ItemSeparatorComponent={ii < end ? ItemSeparatorComponent : undefined}\n          ListItemComponent={ListItemComponent}\n          cellKey={key}\n          horizontal={horizontal}\n          index={ii}\n          inversionStyle={inversionStyle}\n          item={item}\n          key={key}\n          prevCellKey={prevCellKey}\n          onUpdateSeparators={this._onUpdateSeparators}\n          onCellFocusCapture={this._onCellFocusCapture}\n          onUnmount={this._onCellUnmount}\n          ref={ref => {\n            this._cellRefs[key] = ref;\n          }}\n          renderItem={renderItem}\n          {...(shouldListenForLayout && {\n            onCellLayout: this._onCellLayout,\n          })}\n        />,\n      );\n      prevCellKey = key;\n    }\n  }\n\n  static _constrainToItemCount(\n    cells                               ,\n    props       ,\n  )                                {\n    const itemCount = props.getItemCount(props.data);\n    const lastPossibleCellIndex = itemCount - 1;\n\n    // Constraining `last` may significantly shrink the window. Adjust `first`\n    // to expand the window if the new `last` results in a new window smaller\n    // than the number of cells rendered per batch.\n    const maxToRenderPerBatch = maxToRenderPerBatchOrDefault(\n      props.maxToRenderPerBatch,\n    );\n    const maxFirst = Math.max(0, lastPossibleCellIndex - maxToRenderPerBatch);\n\n    return {\n      first: clamp(0, cells.first, maxFirst),\n      last: Math.min(lastPossibleCellIndex, cells.last),\n    };\n  }\n\n  _onUpdateSeparators = (keys                , newProps        ) => {\n    keys.forEach(key => {\n      const ref = key != null && this._cellRefs[key];\n      ref && ref.updateSeparatorProps(newProps);\n    });\n  };\n\n  _isNestedWithSameOrientation()          {\n    const nestedContext = this.context;\n    return !!(\n      nestedContext &&\n      !!nestedContext.horizontal === horizontalOrDefault(this.props.horizontal)\n    );\n  }\n\n  _getSpacerKey = (isVertical         )         =>\n    isVertical ? 'height' : 'width';\n\n  static _keyExtractor(\n    item      ,\n    index        ,\n    props   \n                                                            \n         \n     ,\n  )         {\n    if (props.keyExtractor != null) {\n      return props.keyExtractor(item, index);\n    }\n\n    const key = defaultKeyExtractor(item, index);\n    if (key === String(index)) {\n      _usedIndexForKey = true;\n      if (item.type && item.type.displayName) {\n        _keylessItemComponentName = item.type.displayName;\n      }\n    }\n    return key;\n  }\n\n  render()             {\n    this._checkProps(this.props);\n    const {ListEmptyComponent, ListFooterComponent, ListHeaderComponent} =\n      this.props;\n    const {data, horizontal} = this.props;\n    const inversionStyle = this.props.inverted\n      ? horizontalOrDefault(this.props.horizontal)\n        ? styles.horizontallyInverted\n        : styles.verticallyInverted\n      : null;\n    const cells                          = [];\n    const stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);\n    const stickyHeaderIndices = [];\n\n    // 1. Add cell for ListHeaderComponent\n    if (ListHeaderComponent) {\n      if (stickyIndicesFromProps.has(0)) {\n        stickyHeaderIndices.push(0);\n      }\n      const element = React.isValidElement(ListHeaderComponent) ? (\n        ListHeaderComponent\n      ) : (\n        // $FlowFixMe[not-a-component]\n        // $FlowFixMe[incompatible-type-arg]\n        <ListHeaderComponent />\n      );\n      cells.push(\n        <VirtualizedListCellContextProvider\n          cellKey={this._getCellKey() + '-header'}\n          key=\"$header\">\n          <View\n            // We expect that header component will be a single native view so make it\n            // not collapsable to avoid this view being flattened and make this assumption\n            // no longer true.\n            collapsable={false}\n            onLayout={this._onLayoutHeader}\n            style={StyleSheet.compose(\n              inversionStyle,\n              this.props.ListHeaderComponentStyle,\n            )}>\n            {\n              // $FlowFixMe[incompatible-type] - Typing ReactNativeComponent revealed errors\n              element\n            }\n          </View>\n        </VirtualizedListCellContextProvider>,\n      );\n    }\n\n    // 2a. Add a cell for ListEmptyComponent if applicable\n    const itemCount = this.props.getItemCount(data);\n    if (itemCount === 0 && ListEmptyComponent) {\n      const element                                    = ((React.isValidElement(\n        ListEmptyComponent,\n      ) ? (\n        ListEmptyComponent\n      ) : (\n        // $FlowFixMe[not-a-component]\n        // $FlowFixMe[incompatible-type-arg]\n        <ListEmptyComponent />\n      ))     );\n      cells.push(\n        <VirtualizedListCellContextProvider\n          cellKey={this._getCellKey() + '-empty'}\n          key=\"$empty\">\n          {React.cloneElement(element, {\n            onLayout: (event             ) => {\n              this._onLayoutEmpty(event);\n              // $FlowFixMe[prop-missing] React.Element internal inspection\n              if (element.props.onLayout) {\n                element.props.onLayout(event);\n              }\n            },\n            // $FlowFixMe[prop-missing] React.Element internal inspection\n            style: StyleSheet.compose(inversionStyle, element.props.style),\n          })}\n        </VirtualizedListCellContextProvider>,\n      );\n    }\n\n    // 2b. Add cells and spacers for each item\n    if (itemCount > 0) {\n      _usedIndexForKey = false;\n      _keylessItemComponentName = '';\n      const spacerKey = this._getSpacerKey(!horizontal);\n\n      const renderRegions = this.state.renderMask.enumerateRegions();\n      const lastRegion = renderRegions[renderRegions.length - 1];\n      const lastSpacer = lastRegion?.isSpacer ? lastRegion : null;\n\n      for (const section of renderRegions) {\n        if (section.isSpacer) {\n          // Legacy behavior is to avoid spacers when virtualization is\n          // disabled (including head spacers on initial render).\n          if (this.props.disableVirtualization) {\n            continue;\n          }\n\n          // Without getItemLayout, we limit our tail spacer to the _highestMeasuredFrameIndex to\n          // prevent the user for hyperscrolling into un-measured area because otherwise content will\n          // likely jump around as it renders in above the viewport.\n          const isLastSpacer = section === lastSpacer;\n          const constrainToMeasured = isLastSpacer && !this.props.getItemLayout;\n          const last = constrainToMeasured\n            ? clamp(\n                section.first - 1,\n                section.last,\n                this._listMetrics.getHighestMeasuredCellIndex(),\n              )\n            : section.last;\n\n          const firstMetrics = this._listMetrics.getCellMetricsApprox(\n            section.first,\n            this.props,\n          );\n          const lastMetrics = this._listMetrics.getCellMetricsApprox(\n            last,\n            this.props,\n          );\n          const spacerSize =\n            lastMetrics.offset + lastMetrics.length - firstMetrics.offset;\n          cells.push(\n            <View\n              key={`$spacer-${section.first}`}\n              style={{[spacerKey]: spacerSize}}\n            />,\n          );\n        } else {\n          this._pushCells(\n            cells,\n            stickyHeaderIndices,\n            stickyIndicesFromProps,\n            section.first,\n            section.last,\n            inversionStyle,\n          );\n        }\n      }\n\n      if (!this._hasWarned.keys && _usedIndexForKey) {\n        console.warn(\n          'VirtualizedList: missing keys for items, make sure to specify a key or id property on each ' +\n            'item or provide a custom keyExtractor.',\n          _keylessItemComponentName,\n        );\n        this._hasWarned.keys = true;\n      }\n    }\n\n    // 3. Add cell for ListFooterComponent\n    if (ListFooterComponent) {\n      const element = React.isValidElement(ListFooterComponent) ? (\n        ListFooterComponent\n      ) : (\n        // $FlowFixMe[not-a-component]\n        // $FlowFixMe[incompatible-type-arg]\n        <ListFooterComponent />\n      );\n      cells.push(\n        <VirtualizedListCellContextProvider\n          cellKey={this._getFooterCellKey()}\n          key=\"$footer\">\n          <View\n            onLayout={this._onLayoutFooter}\n            style={StyleSheet.compose(\n              inversionStyle,\n              this.props.ListFooterComponentStyle,\n            )}>\n            {\n              // $FlowFixMe[incompatible-type] - Typing ReactNativeComponent revealed errors\n              element\n            }\n          </View>\n        </VirtualizedListCellContextProvider>,\n      );\n    }\n\n    // 4. Render the ScrollView\n    const scrollProps = {\n      ...this.props,\n      onContentSizeChange: this._onContentSizeChange,\n      onLayout: this._onLayout,\n      onScroll: this._onScroll,\n      onScrollBeginDrag: this._onScrollBeginDrag,\n      onScrollEndDrag: this._onScrollEndDrag,\n      onMomentumScrollBegin: this._onMomentumScrollBegin,\n      onMomentumScrollEnd: this._onMomentumScrollEnd,\n      // iOS/macOS requires a non-zero scrollEventThrottle to fire more than a\n      // single notification while scrolling. This will otherwise no-op.\n      scrollEventThrottle: this.props.scrollEventThrottle ?? 0.0001,\n      invertStickyHeaders:\n        this.props.invertStickyHeaders !== undefined\n          ? this.props.invertStickyHeaders\n          : this.props.inverted,\n      stickyHeaderIndices,\n      style: inversionStyle\n        ? [inversionStyle, this.props.style]\n        : this.props.style,\n      isInvertedVirtualizedList: this.props.inverted,\n      maintainVisibleContentPosition:\n        this.props.maintainVisibleContentPosition != null\n          ? {\n              ...this.props.maintainVisibleContentPosition,\n              // Adjust index to account for ListHeaderComponent.\n              minIndexForVisible:\n                this.props.maintainVisibleContentPosition.minIndexForVisible +\n                (this.props.ListHeaderComponent ? 1 : 0),\n            }\n          : undefined,\n    };\n\n    this._hasMore = this.state.cellsAroundViewport.last < itemCount - 1;\n\n    const innerRet = (\n      <VirtualizedListContextProvider\n        value={{\n          cellKey: null,\n          getScrollMetrics: this._getScrollMetrics,\n          horizontal: horizontalOrDefault(this.props.horizontal),\n          getOutermostParentListRef: this._getOutermostParentListRef,\n          registerAsNestedChild: this._registerAsNestedChild,\n          unregisterAsNestedChild: this._unregisterAsNestedChild,\n        }}>\n        {React.cloneElement(\n          (\n            this.props.renderScrollComponent ||\n            this._defaultRenderScrollComponent\n          )(scrollProps),\n          {\n            ref: this._captureScrollRef,\n          },\n          cells,\n        )}\n      </VirtualizedListContextProvider>\n    );\n    let ret             = innerRet;\n    if (__DEV__) {\n      ret = (\n        <ScrollView.Context.Consumer>\n          {scrollContext => {\n            if (\n              scrollContext != null &&\n              !scrollContext.horizontal ===\n                !horizontalOrDefault(this.props.horizontal) &&\n              !this._hasWarned.nesting &&\n              this.context == null &&\n              this.props.scrollEnabled !== false\n            ) {\n              console.error(\n                'VirtualizedLists should never be nested inside plain ScrollViews with the same ' +\n                  'orientation because it can break windowing and other functionality - use another ' +\n                  'VirtualizedList-backed container instead.',\n              );\n              this._hasWarned.nesting = true;\n            }\n            return innerRet;\n          }}\n        </ScrollView.Context.Consumer>\n      );\n    }\n    if (this.props.debug) {\n      return (\n        <View style={styles.debug}>\n          {ret}\n          {this._renderDebugOverlay()}\n        </View>\n      );\n    } else {\n      return ret;\n    }\n  }\n\n  componentDidUpdate(prevProps       ) {\n    const {data, extraData} = this.props;\n    if (data !== prevProps.data || extraData !== prevProps.extraData) {\n      // clear the viewableIndices cache to also trigger\n      // the onViewableItemsChanged callback with the new data\n      this._viewabilityTuples.forEach(tuple => {\n        tuple.viewabilityHelper.resetViewableIndices();\n      });\n    }\n    // The `this._hiPriInProgress` is guaranteeing a hiPri cell update will only happen\n    // once per fiber update. The `_scheduleCellsToRenderUpdate` will set it to true\n    // if a hiPri update needs to perform. If `componentDidUpdate` is triggered with\n    // `this._hiPriInProgress=true`, means it's triggered by the hiPri update. The\n    // `_scheduleCellsToRenderUpdate` will check this condition and not perform\n    // another hiPri update.\n    const hiPriInProgress = this._hiPriInProgress;\n    this._scheduleCellsToRenderUpdate();\n    // Make sure setting `this._hiPriInProgress` back to false after `componentDidUpdate`\n    // is triggered with `this._hiPriInProgress = true`\n    if (hiPriInProgress) {\n      this._hiPriInProgress = false;\n    }\n  }\n\n  _cellRefs                                       = {};\n  _fillRateHelper                ;\n  _listMetrics                        = new ListMetricsAggregator();\n  _footerLength = 0;\n  // Used for preventing scrollToIndex from being called multiple times for initialScrollIndex\n  _hasTriggeredInitialScrollToIndex = false;\n  _hasInteracted = false;\n  _hasMore = false;\n  _hasWarned                      = {};\n  _headerLength = 0;\n  _hiPriInProgress          = false; // flag to prevent infinite hiPri cell limit update\n  _indicesToKeys                      = new Map();\n  _lastFocusedCellKey          = null;\n  _nestedChildLists                                       =\n    new ChildListCollection();\n  _offsetFromParentVirtualizedList         = 0;\n  _pendingViewabilityUpdate          = false;\n  _prevParentOffset         = 0;\n  _scrollMetrics   \n                    \n               \n                   \n                      \n                     \n                          \n                      \n    = {\n    dOffset: 0,\n    dt: 10,\n    offset: 0,\n    timestamp: 0,\n    velocity: 0,\n    visibleLength: 0,\n    zoomScale: 1,\n  };\n  _scrollRef                         = null;\n  _sentStartForContentLength = 0;\n  _sentEndForContentLength = 0;\n  _updateCellsToRenderBatcher             ;\n  _viewabilityTuples                                        = [];\n\n  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n   * LTI update could not be added via codemod */\n  _captureScrollRef = ref => {\n    this._scrollRef = ref;\n  };\n\n  _computeBlankness() {\n    this._fillRateHelper.computeBlankness(\n      this.props,\n      this.state.cellsAroundViewport,\n      this._scrollMetrics,\n    );\n  }\n\n  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n   * LTI update could not be added via codemod */\n  _defaultRenderScrollComponent = props => {\n    const onRefresh = props.onRefresh;\n    if (this._isNestedWithSameOrientation()) {\n      // Prevent VirtualizedList._onContentSizeChange from being triggered by a bubbling onContentSizeChange event.\n      // This could lead to internal inconsistencies within VirtualizedList.\n      const {onContentSizeChange, ...otherProps} = props;\n      return <View {...otherProps} />;\n    } else if (onRefresh) {\n      invariant(\n        typeof props.refreshing === 'boolean',\n        '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' +\n          JSON.stringify(props.refreshing ?? 'undefined') +\n          '`',\n      );\n      return (\n        // $FlowFixMe[prop-missing] Invalid prop usage\n        // $FlowFixMe[incompatible-use]\n        <ScrollView\n          {...props}\n          refreshControl={\n            props.refreshControl == null ? (\n              <RefreshControl\n                // $FlowFixMe[incompatible-type]\n                refreshing={props.refreshing}\n                onRefresh={onRefresh}\n                progressViewOffset={props.progressViewOffset}\n              />\n            ) : (\n              props.refreshControl\n            )\n          }\n        />\n      );\n    } else {\n      // $FlowFixMe[prop-missing] Invalid prop usage\n      // $FlowFixMe[incompatible-use]\n      return <ScrollView {...props} />;\n    }\n  };\n\n  _onCellLayout = (\n    e             ,\n    cellKey        ,\n    cellIndex        ,\n  )       => {\n    const layoutHasChanged = this._listMetrics.notifyCellLayout({\n      cellIndex,\n      cellKey,\n      layout: e.nativeEvent.layout,\n      orientation: this._orientation(),\n    });\n\n    if (layoutHasChanged) {\n      this._scheduleCellsToRenderUpdate();\n    }\n\n    this._triggerRemeasureForChildListsInCell(cellKey);\n    this._computeBlankness();\n    this._updateViewableItems(this.props, this.state.cellsAroundViewport);\n  };\n\n  _onCellFocusCapture = (cellKey        ) => {\n    this._lastFocusedCellKey = cellKey;\n    this._updateCellsToRender();\n  };\n\n  _onCellUnmount = (cellKey        ) => {\n    delete this._cellRefs[cellKey];\n    this._listMetrics.notifyCellUnmounted(cellKey);\n  };\n\n  _triggerRemeasureForChildListsInCell(cellKey        )       {\n    this._nestedChildLists.forEachInCell(cellKey, childList => {\n      childList.measureLayoutRelativeToContainingList();\n    });\n  }\n\n  measureLayoutRelativeToContainingList()       {\n    // TODO (T35574538): findNodeHandle sometimes crashes with \"Unable to find\n    // node on an unmounted component\" during scrolling\n    try {\n      if (!this._scrollRef) {\n        return;\n      }\n      // We are assuming that getOutermostParentListRef().getScrollRef()\n      // is a non-null reference to a ScrollView\n      this._scrollRef.measureLayout(\n        this.context.getOutermostParentListRef().getScrollRef(),\n        (x, y, width, height) => {\n          this._offsetFromParentVirtualizedList = this._selectOffset({x, y});\n          this._listMetrics.notifyListContentLayout({\n            layout: {width, height},\n            orientation: this._orientation(),\n          });\n          const scrollMetrics = this._convertParentScrollMetrics(\n            this.context.getScrollMetrics(),\n          );\n\n          const metricsChanged =\n            this._scrollMetrics.visibleLength !== scrollMetrics.visibleLength ||\n            this._scrollMetrics.offset !== scrollMetrics.offset;\n\n          if (metricsChanged) {\n            this._scrollMetrics.visibleLength = scrollMetrics.visibleLength;\n            this._scrollMetrics.offset = scrollMetrics.offset;\n\n            // If metrics of the scrollView changed, then we triggered remeasure for child list\n            // to ensure VirtualizedList has the right information.\n            this._nestedChildLists.forEach(childList => {\n              childList.measureLayoutRelativeToContainingList();\n            });\n          }\n        },\n        error => {\n          console.warn(\n            \"VirtualizedList: Encountered an error while measuring a list's\" +\n              ' offset from its containing VirtualizedList.',\n          );\n        },\n      );\n    } catch (error) {\n      console.warn(\n        'measureLayoutRelativeToContainingList threw an error',\n        error.stack,\n      );\n    }\n  }\n\n  _onLayout = (e             ) => {\n    if (this._isNestedWithSameOrientation()) {\n      // Need to adjust our scroll metrics to be relative to our containing\n      // VirtualizedList before we can make claims about list item viewability\n      this.measureLayoutRelativeToContainingList();\n    } else {\n      this._scrollMetrics.visibleLength = this._selectLength(\n        e.nativeEvent.layout,\n      );\n    }\n    this.props.onLayout && this.props.onLayout(e);\n    this._scheduleCellsToRenderUpdate();\n    this._maybeCallOnEdgeReached();\n  };\n\n  _onLayoutEmpty = (e             ) => {\n    this.props.onLayout && this.props.onLayout(e);\n  };\n\n  _getFooterCellKey()         {\n    return this._getCellKey() + '-footer';\n  }\n\n  _onLayoutFooter = (e             ) => {\n    this._triggerRemeasureForChildListsInCell(this._getFooterCellKey());\n    this._footerLength = this._selectLength(e.nativeEvent.layout);\n  };\n\n  _onLayoutHeader = (e             ) => {\n    this._headerLength = this._selectLength(e.nativeEvent.layout);\n  };\n\n  // $FlowFixMe[missing-local-annot]\n  _renderDebugOverlay() {\n    const normalize =\n      this._scrollMetrics.visibleLength /\n      (this._listMetrics.getContentLength() || 1);\n    const framesInLayout = [];\n    const itemCount = this.props.getItemCount(this.props.data);\n    for (let ii = 0; ii < itemCount; ii++) {\n      const frame = this._listMetrics.getCellMetricsApprox(ii, this.props);\n      if (frame.isMounted) {\n        framesInLayout.push(frame);\n      }\n    }\n    const windowTop = this._listMetrics.getCellMetricsApprox(\n      this.state.cellsAroundViewport.first,\n      this.props,\n    ).offset;\n    const frameLast = this._listMetrics.getCellMetricsApprox(\n      this.state.cellsAroundViewport.last,\n      this.props,\n    );\n    const windowLen = frameLast.offset + frameLast.length - windowTop;\n    const visTop = this._scrollMetrics.offset;\n    const visLen = this._scrollMetrics.visibleLength;\n\n    return (\n      <View style={[styles.debugOverlayBase, styles.debugOverlay]}>\n        {framesInLayout.map((f, ii) => (\n          <View\n            key={'f' + ii}\n            style={[\n              styles.debugOverlayBase,\n              styles.debugOverlayFrame,\n              {\n                top: f.offset * normalize,\n                height: f.length * normalize,\n              },\n            ]}\n          />\n        ))}\n        <View\n          style={[\n            styles.debugOverlayBase,\n            styles.debugOverlayFrameLast,\n            {\n              top: windowTop * normalize,\n              height: windowLen * normalize,\n            },\n          ]}\n        />\n        <View\n          style={[\n            styles.debugOverlayBase,\n            styles.debugOverlayFrameVis,\n            {\n              top: visTop * normalize,\n              height: visLen * normalize,\n            },\n          ]}\n        />\n      </View>\n    );\n  }\n\n  _selectLength(\n    metrics             \n                     \n                    \n         \n      ,\n  )         {\n    return !horizontalOrDefault(this.props.horizontal)\n      ? metrics.height\n      : metrics.width;\n  }\n\n  _selectOffset({x, y}                                        )         {\n    return this._orientation().horizontal ? x : y;\n  }\n\n  _orientation()                  {\n    return {\n      horizontal: horizontalOrDefault(this.props.horizontal),\n      rtl: I18nManager.isRTL,\n    };\n  }\n\n  _maybeCallOnEdgeReached() {\n    const {\n      data,\n      getItemCount,\n      onStartReached,\n      onStartReachedThreshold,\n      onEndReached,\n      onEndReachedThreshold,\n    } = this.props;\n    // If we have any pending scroll updates it means that the scroll metrics\n    // are out of date and we should not call any of the edge reached callbacks.\n    if (this.state.pendingScrollUpdateCount > 0) {\n      return;\n    }\n\n    const {visibleLength, offset} = this._scrollMetrics;\n    let distanceFromStart = offset;\n    let distanceFromEnd =\n      this._listMetrics.getContentLength() - visibleLength - offset;\n\n    // Especially when oERT is zero it's necessary to 'floor' very small distance values to be 0\n    // since debouncing causes us to not fire this event for every single \"pixel\" we scroll and can thus\n    // be at the edge of the list with a distance approximating 0 but not quite there.\n    if (distanceFromStart < ON_EDGE_REACHED_EPSILON) {\n      distanceFromStart = 0;\n    }\n    if (distanceFromEnd < ON_EDGE_REACHED_EPSILON) {\n      distanceFromEnd = 0;\n    }\n\n    // TODO: T121172172 Look into why we're \"defaulting\" to a threshold of 2px\n    // when oERT is not present (different from 2 viewports used elsewhere)\n    const DEFAULT_THRESHOLD_PX = 2;\n\n    const startThreshold =\n      onStartReachedThreshold != null\n        ? onStartReachedThreshold * visibleLength\n        : DEFAULT_THRESHOLD_PX;\n    const endThreshold =\n      onEndReachedThreshold != null\n        ? onEndReachedThreshold * visibleLength\n        : DEFAULT_THRESHOLD_PX;\n    const isWithinStartThreshold = distanceFromStart <= startThreshold;\n    const isWithinEndThreshold = distanceFromEnd <= endThreshold;\n\n    // First check if the user just scrolled within the end threshold\n    // and call onEndReached only once for a given content length,\n    // and only if onStartReached is not being executed\n    if (\n      onEndReached &&\n      this.state.cellsAroundViewport.last === getItemCount(data) - 1 &&\n      isWithinEndThreshold &&\n      this._listMetrics.getContentLength() !== this._sentEndForContentLength\n    ) {\n      this._sentEndForContentLength = this._listMetrics.getContentLength();\n      onEndReached({distanceFromEnd});\n    }\n\n    // Next check if the user just scrolled within the start threshold\n    // and call onStartReached only once for a given content length,\n    // and only if onEndReached is not being executed\n    if (\n      onStartReached != null &&\n      this.state.cellsAroundViewport.first === 0 &&\n      isWithinStartThreshold &&\n      this._listMetrics.getContentLength() !== this._sentStartForContentLength\n    ) {\n      this._sentStartForContentLength = this._listMetrics.getContentLength();\n      onStartReached({distanceFromStart});\n    }\n\n    // If the user scrolls away from the start or end and back again,\n    // cause onStartReached or onEndReached to be triggered again\n    if (!isWithinStartThreshold) {\n      this._sentStartForContentLength = 0;\n    }\n    if (!isWithinEndThreshold) {\n      this._sentEndForContentLength = 0;\n    }\n  }\n\n  _onContentSizeChange = (width        , height        ) => {\n    this._listMetrics.notifyListContentLayout({\n      layout: {width, height},\n      orientation: this._orientation(),\n    });\n\n    this._maybeScrollToInitialScrollIndex(width, height);\n\n    if (this.props.onContentSizeChange) {\n      this.props.onContentSizeChange(width, height);\n    }\n    this._scheduleCellsToRenderUpdate();\n    this._maybeCallOnEdgeReached();\n  };\n\n  /**\n   * Scroll to a specified `initialScrollIndex` prop after the ScrollView\n   * content has been laid out, if it is still valid. Only a single scroll is\n   * triggered throughout the lifetime of the list.\n   */\n  _maybeScrollToInitialScrollIndex(\n    contentWidth        ,\n    contentHeight        ,\n  ) {\n    if (\n      contentWidth > 0 &&\n      contentHeight > 0 &&\n      this.props.initialScrollIndex != null &&\n      this.props.initialScrollIndex > 0 &&\n      !this._hasTriggeredInitialScrollToIndex\n    ) {\n      if (this.props.contentOffset == null) {\n        if (\n          this.props.initialScrollIndex <\n          this.props.getItemCount(this.props.data)\n        ) {\n          this.scrollToIndex({\n            animated: false,\n            index: nullthrows(this.props.initialScrollIndex),\n          });\n        } else {\n          this.scrollToEnd({animated: false});\n        }\n      }\n      this._hasTriggeredInitialScrollToIndex = true;\n    }\n  }\n\n  /* Translates metrics from a scroll event in a parent VirtualizedList into\n   * coordinates relative to the child list.\n   */\n  _convertParentScrollMetrics = (metrics   \n                          \n                   \n       \n   )             => {\n    // Offset of the top of the nested list relative to the top of its parent's viewport\n    const offset = metrics.offset - this._offsetFromParentVirtualizedList;\n    // Child's visible length is the same as its parent's\n    const visibleLength = metrics.visibleLength;\n    const dOffset = offset - this._scrollMetrics.offset;\n    const contentLength = this._listMetrics.getContentLength();\n\n    return {\n      visibleLength,\n      contentLength,\n      offset,\n      dOffset,\n    };\n  };\n\n  _onScroll = (e        ) => {\n    this._nestedChildLists.forEach(childList => {\n      childList._onScroll(e);\n    });\n    if (this.props.onScroll) {\n      this.props.onScroll(e);\n    }\n    const timestamp = e.timeStamp;\n    let visibleLength = this._selectLength(e.nativeEvent.layoutMeasurement);\n    let contentLength = this._selectLength(e.nativeEvent.contentSize);\n    let offset = this._offsetFromScrollEvent(e);\n    let dOffset = offset - this._scrollMetrics.offset;\n\n    if (this._isNestedWithSameOrientation()) {\n      if (this._listMetrics.getContentLength() === 0) {\n        // Ignore scroll events until onLayout has been called and we\n        // know our offset from our offset from our parent\n        return;\n      }\n      ({visibleLength, contentLength, offset, dOffset} =\n        this._convertParentScrollMetrics({\n          visibleLength,\n          offset,\n        }));\n    }\n\n    const dt = this._scrollMetrics.timestamp\n      ? Math.max(1, timestamp - this._scrollMetrics.timestamp)\n      : 1;\n    const velocity = dOffset / dt;\n\n    if (\n      dt > 500 &&\n      this._scrollMetrics.dt > 500 &&\n      contentLength > 5 * visibleLength &&\n      !this._hasWarned.perf\n    ) {\n      infoLog(\n        'VirtualizedList: You have a large list that is slow to update - make sure your ' +\n          'renderItem function renders components that follow React performance best practices ' +\n          'like PureComponent, shouldComponentUpdate, etc.',\n        {dt, prevDt: this._scrollMetrics.dt, contentLength},\n      );\n      this._hasWarned.perf = true;\n    }\n\n    // For invalid negative values (w/ RTL), set this to 1.\n    const zoomScale = e.nativeEvent.zoomScale < 0 ? 1 : e.nativeEvent.zoomScale;\n    this._scrollMetrics = {\n      dt,\n      dOffset,\n      offset,\n      timestamp,\n      velocity,\n      visibleLength,\n      zoomScale,\n    };\n    if (this.state.pendingScrollUpdateCount > 0) {\n      this.setState(state => ({\n        pendingScrollUpdateCount: state.pendingScrollUpdateCount - 1,\n      }));\n    }\n    this._updateViewableItems(this.props, this.state.cellsAroundViewport);\n    if (!this.props) {\n      return;\n    }\n    this._maybeCallOnEdgeReached();\n    if (velocity !== 0) {\n      this._fillRateHelper.activate();\n    }\n    this._computeBlankness();\n    this._scheduleCellsToRenderUpdate();\n  };\n\n  _offsetFromScrollEvent(e             )         {\n    const {contentOffset, contentSize, layoutMeasurement} = e.nativeEvent;\n    const {horizontal, rtl} = this._orientation();\n    if (horizontal && rtl) {\n      return (\n        this._selectLength(contentSize) -\n        (this._selectOffset(contentOffset) +\n          this._selectLength(layoutMeasurement))\n      );\n    } else {\n      return this._selectOffset(contentOffset);\n    }\n  }\n\n  _scheduleCellsToRenderUpdate() {\n    // Only trigger high-priority updates if we've actually rendered cells,\n    // and with that size estimate, accurately compute how many cells we should render.\n    // Otherwise, it would just render as many cells as it can (of zero dimension),\n    // each time through attempting to render more (limited by maxToRenderPerBatch),\n    // starving the renderer from actually laying out the objects and computing _averageCellLength.\n    // If this is triggered in an `componentDidUpdate` followed by a hiPri cellToRenderUpdate\n    // We shouldn't do another hipri cellToRenderUpdate\n    if (\n      (this._listMetrics.getAverageCellLength() > 0 ||\n        this.props.getItemLayout != null) &&\n      this._shouldRenderWithPriority() &&\n      !this._hiPriInProgress\n    ) {\n      this._hiPriInProgress = true;\n      // Don't worry about interactions when scrolling quickly; focus on filling content as fast\n      // as possible.\n      this._updateCellsToRenderBatcher.dispose({abort: true});\n      this._updateCellsToRender();\n      return;\n    } else {\n      this._updateCellsToRenderBatcher.schedule();\n    }\n  }\n\n  _shouldRenderWithPriority()          {\n    const {first, last} = this.state.cellsAroundViewport;\n    const {offset, visibleLength, velocity} = this._scrollMetrics;\n    const itemCount = this.props.getItemCount(this.props.data);\n    let hiPri = false;\n    const onStartReachedThreshold = onStartReachedThresholdOrDefault(\n      this.props.onStartReachedThreshold,\n    );\n    const onEndReachedThreshold = onEndReachedThresholdOrDefault(\n      this.props.onEndReachedThreshold,\n    );\n    // Mark as high priority if we're close to the start of the first item\n    // But only if there are items before the first rendered item\n    if (first > 0) {\n      const distTop =\n        offset -\n        this._listMetrics.getCellMetricsApprox(first, this.props).offset;\n      hiPri =\n        distTop < 0 ||\n        (velocity < -2 &&\n          distTop <\n            getScrollingThreshold(onStartReachedThreshold, visibleLength));\n    }\n    // Mark as high priority if we're close to the end of the last item\n    // But only if there are items after the last rendered item\n    if (!hiPri && last >= 0 && last < itemCount - 1) {\n      const distBottom =\n        this._listMetrics.getCellMetricsApprox(last, this.props).offset -\n        (offset + visibleLength);\n      hiPri =\n        distBottom < 0 ||\n        (velocity > 2 &&\n          distBottom <\n            getScrollingThreshold(onEndReachedThreshold, visibleLength));\n    }\n\n    return hiPri;\n  }\n\n  _onScrollBeginDrag = (e             )       => {\n    this._nestedChildLists.forEach(childList => {\n      childList._onScrollBeginDrag(e);\n    });\n    this._viewabilityTuples.forEach(tuple => {\n      tuple.viewabilityHelper.recordInteraction();\n    });\n    this._hasInteracted = true;\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  };\n\n  _onScrollEndDrag = (e             )       => {\n    this._nestedChildLists.forEach(childList => {\n      childList._onScrollEndDrag(e);\n    });\n    const {velocity} = e.nativeEvent;\n    if (velocity) {\n      this._scrollMetrics.velocity = this._selectOffset(velocity);\n    }\n    this._computeBlankness();\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  };\n\n  _onMomentumScrollBegin = (e             )       => {\n    this._nestedChildLists.forEach(childList => {\n      childList._onMomentumScrollBegin(e);\n    });\n    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\n  };\n\n  _onMomentumScrollEnd = (e             )       => {\n    this._nestedChildLists.forEach(childList => {\n      childList._onMomentumScrollEnd(e);\n    });\n    this._scrollMetrics.velocity = 0;\n    this._computeBlankness();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  };\n\n  _updateCellsToRender = () => {\n    this._updateViewableItems(this.props, this.state.cellsAroundViewport);\n\n    this.setState((state, props) => {\n      const cellsAroundViewport = this._adjustCellsAroundViewport(\n        props,\n        state.cellsAroundViewport,\n        state.pendingScrollUpdateCount,\n      );\n      const renderMask = VirtualizedList._createRenderMask(\n        props,\n        cellsAroundViewport,\n        this._getNonViewportRenderRegions(props),\n      );\n\n      if (\n        cellsAroundViewport.first === state.cellsAroundViewport.first &&\n        cellsAroundViewport.last === state.cellsAroundViewport.last &&\n        renderMask.equals(state.renderMask)\n      ) {\n        return null;\n      }\n\n      return {cellsAroundViewport, renderMask};\n    });\n  };\n\n  _createViewToken = (\n    index        ,\n    isViewable         ,\n    props                 ,\n    // $FlowFixMe[missing-local-annot]\n  ) => {\n    const {data, getItem} = props;\n    const item = getItem(data, index);\n    return {\n      index,\n      item,\n      key: VirtualizedList._keyExtractor(item, index, props),\n      isViewable,\n    };\n  };\n\n  __getListMetrics()                        {\n    return this._listMetrics;\n  }\n\n  _getNonViewportRenderRegions = (\n    props                 ,\n  ) =>                  \n                  \n                 \n        {\n    // Keep a viewport's worth of content around the last focused cell to allow\n    // random navigation around it without any blanking. E.g. tabbing from one\n    // focused item out of viewport to another.\n    if (\n      !(this._lastFocusedCellKey && this._cellRefs[this._lastFocusedCellKey])\n    ) {\n      return [];\n    }\n\n    const lastFocusedCellRenderer = this._cellRefs[this._lastFocusedCellKey];\n    const focusedCellIndex = lastFocusedCellRenderer.props.index;\n    const itemCount = props.getItemCount(props.data);\n\n    // The last cell we rendered may be at a new index. Bail if we don't know\n    // where it is.\n    if (\n      focusedCellIndex >= itemCount ||\n      VirtualizedList._getItemKey(props, focusedCellIndex) !==\n        this._lastFocusedCellKey\n    ) {\n      return [];\n    }\n\n    let first = focusedCellIndex;\n    let heightOfCellsBeforeFocused = 0;\n    for (\n      let i = first - 1;\n      i >= 0 && heightOfCellsBeforeFocused < this._scrollMetrics.visibleLength;\n      i--\n    ) {\n      first--;\n      heightOfCellsBeforeFocused += this._listMetrics.getCellMetricsApprox(\n        i,\n        props,\n      ).length;\n    }\n\n    let last = focusedCellIndex;\n    let heightOfCellsAfterFocused = 0;\n    for (\n      let i = last + 1;\n      i < itemCount &&\n      heightOfCellsAfterFocused < this._scrollMetrics.visibleLength;\n      i++\n    ) {\n      last++;\n      heightOfCellsAfterFocused += this._listMetrics.getCellMetricsApprox(\n        i,\n        props,\n      ).length;\n    }\n\n    return [{first, last}];\n  };\n\n  _updateViewableItems(\n    props                 ,\n    cellsAroundViewport                               ,\n  ) {\n    // If we have any pending scroll updates it means that the scroll metrics\n    // are out of date and we should not call any of the visibility callbacks.\n    if (this.state.pendingScrollUpdateCount > 0) {\n      return;\n    }\n    this._viewabilityTuples.forEach(tuple => {\n      tuple.viewabilityHelper.onUpdate(\n        props,\n        this._scrollMetrics.offset,\n        this._scrollMetrics.visibleLength,\n        this._listMetrics,\n        this._createViewToken,\n        tuple.onViewableItemsChanged,\n        cellsAroundViewport,\n      );\n    });\n  }\n}\n\nconst styles = StyleSheet.create({\n  verticallyInverted:\n    Platform.OS === 'android'\n      ? {transform: [{scale: -1}]}\n      : {transform: [{scaleY: -1}]},\n  horizontallyInverted: {\n    transform: [{scaleX: -1}],\n  },\n  debug: {\n    flex: 1,\n  },\n  debugOverlayBase: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n  },\n  debugOverlay: {\n    bottom: 0,\n    width: 20,\n    borderColor: 'blue',\n    borderWidth: 1,\n  },\n  debugOverlayFrame: {\n    left: 0,\n    backgroundColor: 'orange',\n  },\n  debugOverlayFrameLast: {\n    left: 0,\n    borderColor: 'green',\n    borderWidth: 2,\n  },\n  debugOverlayFrameVis: {\n    left: 0,\n    borderColor: 'red',\n    borderWidth: 2,\n  },\n});\n\nmodule.exports = VirtualizedList;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\nimport * as ReactNativeFeatureFlags from 'react-native/src/private/featureflags/ReactNativeFeatureFlags';\n                                                                              \n                                                                                \n             \n             \n              \n                                                     \n\nimport {VirtualizedListCellContextProvider} from './VirtualizedListContext.js';\nimport invariant from 'invariant';\nimport * as React from 'react';\nimport {StyleSheet, View} from 'react-native';\n\n                            \n                                                                         \n                                               \n                                                      \n    \n                                                                       \n                  \n                       \n                \n                                \n              \n                                                                              \n                                                 \n                                       \n                       \n                             \n                                          \n            \n                       \n                                      \n     \n  \n\n                                         \n                       \n                      \n    \n\n                     \n                                        \n     \n  \n\nexport default class CellRenderer        extends React.PureComponent \n               \n               \n  {\n  state               = {\n    separatorProps: {\n      highlighted: false,\n      leadingItem: this.props.item,\n    },\n  };\n\n  static getDerivedStateFromProps(\n    props              ,\n    prevState              ,\n  )                {\n    if (ReactNativeFeatureFlags.enableOptimisedVirtualizedCells()) {\n      if (props.item !== prevState.separatorProps.leadingItem) {\n        return {\n          separatorProps: {\n            ...prevState.separatorProps,\n            leadingItem: props.item,\n          },\n        };\n      }\n      return null;\n    } else {\n      return {\n        separatorProps: {\n          ...prevState.separatorProps,\n          leadingItem: props.item,\n        },\n      };\n    }\n  }\n\n  // TODO: consider factoring separator stuff out of VirtualizedList into FlatList since it's not\n  // reused by SectionList and we can keep VirtualizedList simpler.\n  // $FlowFixMe[missing-local-annot]\n  _separators = {\n    highlight: () => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators([cellKey, prevCellKey], {\n        highlighted: true,\n      });\n    },\n    unhighlight: () => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators([cellKey, prevCellKey], {\n        highlighted: false,\n      });\n    },\n    updateProps: (\n      select                        ,\n      newProps                       ,\n    ) => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators(\n        [select === 'leading' ? prevCellKey : cellKey],\n        newProps,\n      );\n    },\n  };\n\n  updateSeparatorProps(newProps                       ) {\n    this.setState(state => ({\n      separatorProps: {...state.separatorProps, ...newProps},\n    }));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnmount(this.props.cellKey);\n  }\n\n  _onLayout = (nativeEvent             )       => {\n    this.props.onCellLayout?.(\n      nativeEvent,\n      this.props.cellKey,\n      this.props.index,\n    );\n  };\n\n  _onCellFocusCapture = (e            )       => {\n    this.props.onCellFocusCapture?.(this.props.cellKey);\n  };\n\n  _renderElement(\n    renderItem                        ,\n    ListItemComponent     ,\n    item       ,\n    index        ,\n  )             {\n    if (renderItem && ListItemComponent) {\n      console.warn(\n        'VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take' +\n          ' precedence over renderItem.',\n      );\n    }\n\n    if (ListItemComponent) {\n      return (\n        <ListItemComponent\n          item={item}\n          index={index}\n          separators={this._separators}\n        />\n      );\n    }\n\n    if (renderItem) {\n      return renderItem({\n        item,\n        index,\n        separators: this._separators,\n      });\n    }\n\n    invariant(\n      false,\n      'VirtualizedList: Either ListItemComponent or renderItem props are required but none were found.',\n    );\n  }\n\n  render()             {\n    const {\n      CellRendererComponent,\n      ItemSeparatorComponent,\n      ListItemComponent,\n      cellKey,\n      horizontal,\n      item,\n      index,\n      inversionStyle,\n      onCellLayout,\n      renderItem,\n    } = this.props;\n    const element = this._renderElement(\n      renderItem,\n      ListItemComponent,\n      item,\n      index,\n    );\n\n    // NOTE: that when this is a sticky header, `onLayout` will get automatically extracted and\n    // called explicitly by `ScrollViewStickyHeader`.\n    const itemSeparator             = React.isValidElement(\n      ItemSeparatorComponent,\n    )\n      ? // $FlowFixMe[incompatible-type]\n        ItemSeparatorComponent\n      : // $FlowFixMe[incompatible-type]\n        ItemSeparatorComponent && (\n          <ItemSeparatorComponent {...this.state.separatorProps} />\n        );\n    const cellStyle = inversionStyle\n      ? horizontal\n        ? [styles.rowReverse, inversionStyle]\n        : [styles.columnReverse, inversionStyle]\n      : horizontal\n        ? [styles.row, inversionStyle]\n        : inversionStyle;\n    const result = !CellRendererComponent ? (\n      <View\n        style={cellStyle}\n        onFocusCapture={this._onCellFocusCapture}\n        {...(onCellLayout && {onLayout: this._onLayout})}>\n        {element}\n        {itemSeparator}\n      </View>\n    ) : (\n      <CellRendererComponent\n        cellKey={cellKey}\n        index={index}\n        item={item}\n        style={cellStyle}\n        onFocusCapture={this._onCellFocusCapture}\n        {...(onCellLayout && {onLayout: this._onLayout})}>\n        {element}\n        {itemSeparator}\n      </CellRendererComponent>\n    );\n\n    return (\n      <VirtualizedListCellContextProvider cellKey={this.props.cellKey}>\n        {result}\n      </VirtualizedListCellContextProvider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  rowReverse: {\n    flexDirection: 'row-reverse',\n  },\n  columnReverse: {\n    flexDirection: 'column-reverse',\n  },\n});\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict-local\n * @format\n */\n\n                                                       \n\nimport * as React from 'react';\nimport {useContext, useMemo} from 'react';\n\n                          \n                   \n                           \n                          \n                    \n               \n                   \n                      \n                     \n                          \n                      \n    \n                       \n                                                                     \n                           \n                    \n                                           \n             \n                                                                              \n   \n\nexport const VirtualizedListContext                          =\n  React.createContext(null);\nif (__DEV__) {\n  VirtualizedListContext.displayName = 'VirtualizedListContext';\n}\n\n/**\n * Resets the context. Intended for use by portal-like components (e.g. Modal).\n */\nexport function VirtualizedListContextResetter({\n  children,\n}   \n                       \n )             {\n  return (\n    <VirtualizedListContext.Provider value={null}>\n      {children}\n    </VirtualizedListContext.Provider>\n  );\n}\n\n/**\n * Sets the context with memoization. Intended to be used by `VirtualizedList`.\n */\nexport function VirtualizedListContextProvider({\n  children,\n  value,\n}   \n                       \n                 \n )             {\n  // Avoid setting a newly created context object if the values are identical.\n  const context = useMemo(\n    () => ({\n      cellKey: null,\n      getScrollMetrics: value.getScrollMetrics,\n      horizontal: value.horizontal,\n      getOutermostParentListRef: value.getOutermostParentListRef,\n      registerAsNestedChild: value.registerAsNestedChild,\n      unregisterAsNestedChild: value.unregisterAsNestedChild,\n    }),\n    [\n      value.getScrollMetrics,\n      value.horizontal,\n      value.getOutermostParentListRef,\n      value.registerAsNestedChild,\n      value.unregisterAsNestedChild,\n    ],\n  );\n  return (\n    <VirtualizedListContext.Provider value={context}>\n      {children}\n    </VirtualizedListContext.Provider>\n  );\n}\n\n/**\n * Sets the `cellKey`. Intended to be used by `VirtualizedList` for each cell.\n */\nexport function VirtualizedListCellContextProvider({\n  cellKey,\n  children,\n}   \n                  \n                       \n )             {\n  // Avoid setting a newly created context object if the values are identical.\n  const currContext = useContext(VirtualizedListContext);\n  const context = useMemo(\n    () => (currContext == null ? null : {...currContext, cellKey}),\n    [currContext, cellKey],\n  );\n  return (\n    <VirtualizedListContext.Provider value={context}>\n      {children}\n    </VirtualizedListContext.Provider>\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n             \n                    \n                                \n            \n                             \n                                                                                \n             \n             \n              \n                                                     \n\nimport * as React from 'react';\nimport {                 } from 'react-native';\n\n                       \n\n                          \n                        \n                          \n                                                                          \n     \n  \n\n                                      \n              \n                \n                         \n     \n  \n\n                                                  \n                  \n                       \n                \n              \n                                               \n                                          \n                       \n   \n\n                                     \n                               \n                \n\n                       \n     \n                                                                                                              \n                                                                                    \n     \n             \n     \n                                                                          \n     \n                                               \n     \n                                                    \n     \n                                      \n   \n                       \n                                     \n     \n                                                                                                \n                                                     \n     \n                   \n     \n                                                                                                    \n                                                                                                    \n                                                    \n     \n                                   \n     \n                                                                                                  \n                                                                                               \n                                                       \n     \n                  \n                   \n                   \n              \n                  \n        \n                   \n                   \n                  \n       \n    \n                        \n     \n                                                                                                    \n                                                                                                   \n                                                               \n     \n                               \n     \n                                                                                            \n                                                                                              \n                                                                                               \n                                       \n     \n                               \n     \n                                                                   \n     \n                      \n                                                        \n     \n                                                                   \n                                                                      \n                                                                           \n                                                       \n     \n                                                                        \n     \n                                                                                               \n                                                                                                 \n                                                                                     \n                              \n     \n                                                     \n     \n                                                                           \n    \n                  \n                                                                                    \n                                                                               \n             \n                                                       \n                                                       \n                                \n                                                  \n                                                    \n                                                       \n                                                        \n                                          \n                      \n                                  \n             \n           \n    \n                                                                                        \n                                                                                                \n                                                                                            \n                                                                                                   \n                   \n     \n                        \n                              \n                                       \n    \n     \n                                                                                           \n                        \n     \n                         \n                              \n                                       \n    \n     \n                                                                                                   \n                        \n     \n                          \n                              \n                                       \n    \n     \n                                                      \n     \n                                           \n     \n                                                                                                \n                        \n     \n                          \n                              \n                                       \n    \n     \n                                                      \n     \n                                           \n     \n                                                                                                 \n                                                                                                \n                                                                    \n     \n                                \n     \n                                                                                    \n                                      \n     \n                                                                 \n     \n                                                                                           \n                                                                                     \n                                                                                    \n                                                \n     \n                                  \n     \n                                                                                                   \n                                                      \n     \n                          \n     \n                                                                                                   \n                                                                                                    \n                                                        \n     \n                                   \n                  \n                                      \n                              \n       \n             \n     \n                                                                                      \n                                        \n     \n                                                                     \n     \n                                                                                            \n                                                                                         \n                                                                                        \n                                                \n     \n                                    \n     \n                                                                   \n                              \n     \n                                    \n                                    \n                              \n       \n             \n                                 \n     \n                                                                                \n     \n                              \n     \n                                                                         \n                                                                              \n                                                                     \n     \n                                                      \n     \n                                                             \n     \n                        \n     \n                                                                                        \n    \n                                                         \n     \n                                  \n     \n                                                                                       \n     \n                                                                               \n     \n                                                                                                  \n                                                                                \n     \n                                      \n     \n                                                                     \n     \n                                        \n     \n                                                                                              \n                                                                                  \n     \n                                                                        \n     \n                                                                                             \n                                                                                                 \n                                                                                                   \n                                                                                                  \n                                                                                       \n     \n                       \n     \n                                                      \n     \n                               \n   \n\n                      \n                                     \n                   \n                   \n   \n\n/**\n * Default Props Helper Functions\n * Use the following helper functions for default values\n */\n\n// horizontalOrDefault(this.props.horizontal)\nexport function horizontalOrDefault(horizontal          )          {\n  return horizontal ?? false;\n}\n\n// initialNumToRenderOrDefault(this.props.initialNumToRender)\nexport function initialNumToRenderOrDefault(\n  initialNumToRender         ,\n)         {\n  return initialNumToRender ?? 10;\n}\n\n// maxToRenderPerBatchOrDefault(this.props.maxToRenderPerBatch)\nexport function maxToRenderPerBatchOrDefault(\n  maxToRenderPerBatch         ,\n)         {\n  return maxToRenderPerBatch ?? 10;\n}\n\n// onStartReachedThresholdOrDefault(this.props.onStartReachedThreshold)\nexport function onStartReachedThresholdOrDefault(\n  onStartReachedThreshold         ,\n)         {\n  return onStartReachedThreshold ?? 2;\n}\n\n// onEndReachedThresholdOrDefault(this.props.onEndReachedThreshold)\nexport function onEndReachedThresholdOrDefault(\n  onEndReachedThreshold         ,\n)         {\n  return onEndReachedThreshold ?? 2;\n}\n\n// windowSizeOrDefault(this.props.windowSize)\nexport function windowSizeOrDefault(windowSize         )         {\n  return windowSize ?? 21;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n * @format\n */\n\n                                                   \n\nimport VirtualizedList from './VirtualizedList';\nimport {keyExtractor as defaultKeyExtractor} from './VirtualizeUtils';\nimport invariant from 'invariant';\nimport * as React from 'react';\n                \n\n                                         \n     \n                                                  \n     \n                                     \n     \n                                                                                                  \n                                             \n     \n               \n                                                                        \n                        \n                       \n                  \n                                       \n                 \n                            \n                              \n                                                                              \n         \n      \n       \n                                  \n                                                     \n                                                                 \n     \n  \n\n                                                   \n                                     \n   \n\n                                                   \n     \n                                                      \n     \n                       \n               \n                  \n                      \n                 \n                            \n                              \n                                                                              \n         \n      \n       \n                          \n     \n                                                                                                  \n                                            \n     \n                                                                               \n     \n                                            \n     \n                                                                               \n     \n                                                                                \n                                                                                                   \n                                                                                                \n                                                                                                 \n                                                        \n     \n                                                        \n     \n                                                                                                \n                                                                           \n     \n                                        \n                                                           \n   \n\n                                                                        \n\n                                \n                             \n                             \n           \n                         \n     \n                                                                    \n                                                        \n         \n      \n    \n   \n                                           \n                      \n                    \n                       \n                      \n                        \n   \n\n                                                     \n\n/**\n * Right now this just flattens everything into one list and uses VirtualizedList under the\n * hood. The only operation that might not scale well is concatting the data arrays of all the\n * sections when new props are received, which should be plenty fast for up to ~10,000 items.\n */\nclass VirtualizedSectionList \n                             \n  extends React.PureComponent                         {\n  scrollToLocation(params                            ) {\n    let index = params.itemIndex;\n    for (let i = 0; i < params.sectionIndex; i++) {\n      index += this.props.getItemCount(this.props.sections[i].data) + 2;\n    }\n    let viewOffset = params.viewOffset || 0;\n    if (this._listRef == null) {\n      return;\n    }\n    const listRef = this._listRef;\n    if (params.itemIndex > 0 && this.props.stickySectionHeadersEnabled) {\n      const frame = listRef\n        .__getListMetrics()\n        .getCellMetricsApprox(index - params.itemIndex, listRef.props);\n      viewOffset += frame.length;\n    }\n    const toIndexParams = {\n      ...params,\n      viewOffset,\n      index,\n    };\n    // $FlowFixMe[incompatible-use]\n    this._listRef.scrollToIndex(toIndexParams);\n  }\n\n  getListRef()                                            {\n    return this._listRef;\n  }\n\n  render()             {\n    const {\n      ItemSeparatorComponent, // don't pass through, rendered with renderItem\n      SectionSeparatorComponent,\n      renderItem: _renderItem,\n      renderSectionFooter,\n      renderSectionHeader,\n      sections: _sections,\n      stickySectionHeadersEnabled,\n      ...passThroughProps\n    } = this.props;\n\n    const listHeaderOffset = this.props.ListHeaderComponent ? 1 : 0;\n\n    const stickyHeaderIndices = this.props.stickySectionHeadersEnabled\n      ? ([]               )\n      : undefined;\n\n    let itemCount = 0;\n    for (const section of this.props.sections) {\n      // Track the section header indices\n      if (stickyHeaderIndices != null) {\n        stickyHeaderIndices.push(itemCount + listHeaderOffset);\n      }\n\n      // Add two for the section header and footer.\n      itemCount += 2;\n      itemCount += this.props.getItemCount(section.data);\n    }\n    const renderItem = this._renderItem(itemCount);\n\n    return (\n      <VirtualizedList\n        {...passThroughProps}\n        keyExtractor={this._keyExtractor}\n        stickyHeaderIndices={stickyHeaderIndices}\n        renderItem={renderItem}\n        data={this.props.sections}\n        getItem={(sections, index) =>\n          this._getItem(this.props, sections, index)\n        }\n        getItemCount={() => itemCount}\n        onViewableItemsChanged={\n          this.props.onViewableItemsChanged\n            ? this._onViewableItemsChanged\n            : undefined\n        }\n        ref={this._captureRef}\n      />\n    );\n  }\n\n  _getItem(\n    props                 ,\n    sections                       ,\n    index        ,\n  )        {\n    if (!sections) {\n      return null;\n    }\n    let itemIdx = index - 1;\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      const sectionData = section.data;\n      const itemCount = props.getItemCount(sectionData);\n      if (itemIdx === -1 || itemIdx === itemCount) {\n        // We intend for there to be overflow by one on both ends of the list.\n        // This will be for headers and footers. When returning a header or footer\n        // item the section itself is the item.\n        return section;\n      } else if (itemIdx < itemCount) {\n        // If we are in the bounds of the list's data then return the item.\n        return props.getItem(sectionData, itemIdx);\n      } else {\n        itemIdx -= itemCount + 2; // Add two for the header and footer\n      }\n    }\n    return null;\n  }\n\n  // $FlowFixMe[missing-local-annot]\n  _keyExtractor = (item      , index        ) => {\n    const info = this._subExtractor(index);\n    return (info && info.key) || String(index);\n  };\n\n  _subExtractor(index        )    \n                      \n                                                            \n                \n                                        \n                   \n                                         \n                      \n                        \n                               \n                         \n                                \n       \n    {\n    let itemIndex = index;\n    const {getItem, getItemCount, keyExtractor, sections} = this.props;\n    for (let i = 0; i < sections.length; i++) {\n      const section = sections[i];\n      const sectionData = section.data;\n      const key = section.key || String(i);\n      itemIndex -= 1; // The section adds an item for the header\n      if (itemIndex >= getItemCount(sectionData) + 1) {\n        itemIndex -= getItemCount(sectionData) + 1; // The section adds an item for the footer.\n      } else if (itemIndex === -1) {\n        return {\n          section,\n          key: key + ':header',\n          index: null,\n          header: true,\n          trailingSection: sections[i + 1],\n        };\n      } else if (itemIndex === getItemCount(sectionData)) {\n        return {\n          section,\n          key: key + ':footer',\n          index: null,\n          header: false,\n          trailingSection: sections[i + 1],\n        };\n      } else {\n        const extractor =\n          section.keyExtractor || keyExtractor || defaultKeyExtractor;\n        return {\n          section,\n          key:\n            key + ':' + extractor(getItem(sectionData, itemIndex), itemIndex),\n          index: itemIndex,\n          leadingItem: getItem(sectionData, itemIndex - 1),\n          leadingSection: sections[i - 1],\n          trailingItem: getItem(sectionData, itemIndex + 1),\n          trailingSection: sections[i + 1],\n        };\n      }\n    }\n  }\n\n  _convertViewable = (viewable           )             => {\n    invariant(viewable.index != null, 'Received a broken ViewToken');\n    const info = this._subExtractor(viewable.index);\n    if (!info) {\n      return null;\n    }\n    const keyExtractorWithNullableIndex = info.section.keyExtractor;\n    const keyExtractorWithNonNullableIndex =\n      this.props.keyExtractor || defaultKeyExtractor;\n    const key =\n      keyExtractorWithNullableIndex != null\n        ? keyExtractorWithNullableIndex(viewable.item, info.index)\n        : keyExtractorWithNonNullableIndex(viewable.item, info.index ?? 0);\n\n    return {\n      ...viewable,\n      index: info.index,\n      key,\n      section: info.section,\n    };\n  };\n\n  _onViewableItemsChanged = ({\n    viewableItems,\n    changed,\n  }   \n                                    \n                              \n       \n   ) => {\n    const onViewableItemsChanged = this.props.onViewableItemsChanged;\n    if (onViewableItemsChanged != null) {\n      onViewableItemsChanged({\n        viewableItems: viewableItems\n          .map(this._convertViewable, this)\n          .filter(Boolean),\n        changed: changed.map(this._convertViewable, this).filter(Boolean),\n      });\n    }\n  };\n\n  _renderItem =\n    (listItemCount        )             =>\n    // eslint-disable-next-line react/no-unstable-nested-components\n    ({item, index}                                  ) => {\n      const info = this._subExtractor(index);\n      if (!info) {\n        return null;\n      }\n      const infoIndex = info.index;\n      if (infoIndex == null) {\n        const {section} = info;\n        if (info.header === true) {\n          const {renderSectionHeader} = this.props;\n          return renderSectionHeader ? renderSectionHeader({section}) : null;\n        } else {\n          const {renderSectionFooter} = this.props;\n          return renderSectionFooter ? renderSectionFooter({section}) : null;\n        }\n      } else {\n        const renderItem = info.section.renderItem || this.props.renderItem;\n        const SeparatorComponent = this._getSeparatorComponent(\n          index,\n          info,\n          listItemCount,\n        );\n        invariant(renderItem, 'no renderItem!');\n        return (\n          <ItemWithSeparator\n            SeparatorComponent={SeparatorComponent}\n            LeadingSeparatorComponent={\n              infoIndex === 0 ? this.props.SectionSeparatorComponent : undefined\n            }\n            cellKey={info.key}\n            index={infoIndex}\n            item={item}\n            leadingItem={info.leadingItem}\n            leadingSection={info.leadingSection}\n            prevCellKey={(this._subExtractor(index - 1) || {}).key}\n            // Callback to provide updateHighlight for this item\n            setSelfHighlightCallback={this._setUpdateHighlightFor}\n            setSelfUpdatePropsCallback={this._setUpdatePropsFor}\n            // Provide child ability to set highlight/updateProps for previous item using prevCellKey\n            updateHighlightFor={this._updateHighlightFor}\n            updatePropsFor={this._updatePropsFor}\n            renderItem={renderItem}\n            section={info.section}\n            trailingItem={info.trailingItem}\n            trailingSection={info.trailingSection}\n            inverted={!!this.props.inverted}\n          />\n        );\n      }\n    };\n\n  _updatePropsFor = (cellKey        , value     ) => {\n    const updateProps = this._updatePropsMap[cellKey];\n    if (updateProps != null) {\n      updateProps(value);\n    }\n  };\n\n  _updateHighlightFor = (cellKey        , value         ) => {\n    const updateHighlight = this._updateHighlightMap[cellKey];\n    if (updateHighlight != null) {\n      updateHighlight(value);\n    }\n  };\n\n  _setUpdateHighlightFor = (\n    cellKey        ,\n    updateHighlightFn                    ,\n  ) => {\n    if (updateHighlightFn != null) {\n      this._updateHighlightMap[cellKey] = updateHighlightFn;\n    } else {\n      // $FlowFixMe[prop-missing]\n      delete this._updateHighlightFor[cellKey];\n    }\n  };\n\n  _setUpdatePropsFor = (cellKey        , updatePropsFn                    ) => {\n    if (updatePropsFn != null) {\n      this._updatePropsMap[cellKey] = updatePropsFn;\n    } else {\n      delete this._updatePropsMap[cellKey];\n    }\n  };\n\n  _getSeparatorComponent(\n    index        ,\n    info          ,\n    listItemCount        ,\n  )                            {\n    info = info || this._subExtractor(index);\n    if (!info) {\n      return null;\n    }\n    const ItemSeparatorComponent =\n      info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;\n    const {SectionSeparatorComponent} = this.props;\n    const isLastItemInList = index === listItemCount - 1;\n    const isLastItemInSection =\n      info.index === this.props.getItemCount(info.section.data) - 1;\n    if (SectionSeparatorComponent && isLastItemInSection) {\n      return SectionSeparatorComponent;\n    }\n    if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {\n      return ItemSeparatorComponent;\n    }\n    return null;\n  }\n\n  _updateHighlightMap                                = {};\n  _updatePropsMap                                       = {};\n  _listRef                  ;\n  _captureRef = (ref                        ) => {\n    this._listRef = ref;\n  };\n}\n\n                                                \n                     \n                          \n                  \n                      \n                           \n    \n\n                                          \n                                  \n                                                       \n                                                \n                  \n                \n             \n                             \n                    \n                                 \n            \n                               \n                    \n                                 \n            \n                        \n                                                                    \n                                                               \n                       \n                    \n    \n\nfunction ItemWithSeparator(props                        )             {\n  const {\n    LeadingSeparatorComponent,\n    // this is the trailing separator and is associated with this item\n    SeparatorComponent,\n    cellKey,\n    prevCellKey,\n    setSelfHighlightCallback,\n    updateHighlightFor,\n    setSelfUpdatePropsCallback,\n    updatePropsFor,\n    item,\n    index,\n    section,\n    inverted,\n  } = props;\n\n  const [leadingSeparatorHiglighted, setLeadingSeparatorHighlighted] =\n    React.useState(false);\n\n  const [separatorHighlighted, setSeparatorHighlighted] = React.useState(false);\n\n  const [leadingSeparatorProps, setLeadingSeparatorProps] = React.useState({\n    leadingItem: props.leadingItem,\n    leadingSection: props.leadingSection,\n    section: props.section,\n    trailingItem: props.item,\n    trailingSection: props.trailingSection,\n  });\n  const [separatorProps, setSeparatorProps] = React.useState({\n    leadingItem: props.item,\n    leadingSection: props.leadingSection,\n    section: props.section,\n    trailingItem: props.trailingItem,\n    trailingSection: props.trailingSection,\n  });\n\n  React.useEffect(() => {\n    setSelfHighlightCallback(cellKey, setSeparatorHighlighted);\n    // $FlowFixMe[incompatible-call]\n    setSelfUpdatePropsCallback(cellKey, setSeparatorProps);\n\n    return () => {\n      setSelfUpdatePropsCallback(cellKey, null);\n      setSelfHighlightCallback(cellKey, null);\n    };\n  }, [\n    cellKey,\n    setSelfHighlightCallback,\n    setSeparatorProps,\n    setSelfUpdatePropsCallback,\n  ]);\n\n  const separators = {\n    highlight: () => {\n      setLeadingSeparatorHighlighted(true);\n      setSeparatorHighlighted(true);\n      if (prevCellKey != null) {\n        updateHighlightFor(prevCellKey, true);\n      }\n    },\n    unhighlight: () => {\n      setLeadingSeparatorHighlighted(false);\n      setSeparatorHighlighted(false);\n      if (prevCellKey != null) {\n        updateHighlightFor(prevCellKey, false);\n      }\n    },\n    updateProps: (\n      select                        ,\n      newProps                                       ,\n    ) => {\n      if (select === 'leading') {\n        if (LeadingSeparatorComponent != null) {\n          setLeadingSeparatorProps({...leadingSeparatorProps, ...newProps});\n        } else if (prevCellKey != null) {\n          // update the previous item's separator\n          updatePropsFor(prevCellKey, {...leadingSeparatorProps, ...newProps});\n        }\n      } else if (select === 'trailing' && SeparatorComponent != null) {\n        setSeparatorProps({...separatorProps, ...newProps});\n      }\n    },\n  };\n  const element = props.renderItem({\n    item,\n    index,\n    section,\n    separators,\n  });\n  const leadingSeparator = LeadingSeparatorComponent != null && (\n    <LeadingSeparatorComponent\n      highlighted={leadingSeparatorHiglighted}\n      {...leadingSeparatorProps}\n    />\n  );\n  const separator = SeparatorComponent != null && (\n    <SeparatorComponent\n      highlighted={separatorHighlighted}\n      {...separatorProps}\n    />\n  );\n  const RenderSeparator = leadingSeparator || separator;\n  const firstSeparator = inverted === false ? leadingSeparator : separator;\n  const secondSeparator = inverted === false ? separator : leadingSeparator;\n\n  return (\n    <>\n      {RenderSeparator ? firstSeparator : null}\n      {element}\n      {RenderSeparator ? secondSeparator : null}\n    </>\n  );\n}\n\n/* $FlowFixMe[class-object-subtyping] added when improving typing for this\n * parameters */\n// $FlowFixMe[method-unbinding]\nmodule.exports = (VirtualizedSectionList                          \n                                                     \n             \n                                                                \n                                                                   \n       \n     \n );\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict\n */\n\n'use strict';\n\nfunction clamp(min        , value        , max        )         {\n  if (value < min) {\n    return min;\n  }\n  if (value > max) {\n    return max;\n  }\n  return value;\n}\n\nmodule.exports = clamp;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict\n */\n\n'use strict';\n\n/**\n * Intentional info-level logging for clear separation from ad-hoc console debug logging.\n */\nfunction infoLog(...args              )       {\n  return console.log(...args);\n}\n\nmodule.exports = infoLog;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *      \n */\n\n'use strict';\n\n                                                           \n                                                                 \n                                                             \n                                                                           \n\nimport {                                     } from './Lists/VirtualizedListContext';\nimport {keyExtractor} from './Lists/VirtualizeUtils';\n\n             \n            \n                    \n                                \n                                   \n             \n                    \n                  \n                 \n             \n                                      \n             \n                                       \n                             \n              \n                                        \n                                                         \n\nmodule.exports = {\n  keyExtractor,\n\n  get VirtualizedList()                  {\n    return require('./Lists/VirtualizedList');\n  },\n  get VirtualizedSectionList()                         {\n    return require('./Lists/VirtualizedSectionList');\n  },\n  get VirtualizedListContextResetter()                                 {\n    const VirtualizedListContext = require('./Lists/VirtualizedListContext');\n    return VirtualizedListContext.VirtualizedListContextResetter;\n  },\n  get ViewabilityHelper()                    {\n    return require('./Lists/ViewabilityHelper');\n  },\n  get FillRateHelper()                 {\n    return require('./Lists/FillRateHelper');\n  },\n};\n"],"names":["InteractionManager","require","Batchinator","callback","delayMS","dispose","options","schedule","timeoutHandle","setTimeout","clearTimeout","module","CellRenderMask","numCells","_invariant","enumerateRegions","addCells","cells","_this__regions","_this__findRegion","firstIntersect","firstIntersectIdx","_this__findRegion1","lastIntersect","lastIntersectIdx","newLeadRegion","newTailRegion","newMainRegion","replacementRegions","numRegionsToDelete","equals","other","region","i","_findRegion","cellIdx","firstIdx","lastIdx","middleIdx","Math","middleRegion","ChildListCollection","Map","add","list","cellKey","_this__cellKeyToChildren_get","cellLists","Set","remove","forEach","fn","_this__cellKeyToChildren_values","listSet","forEachInCell","anyInCell","size","Info","DEBUG","_listeners","_minSampleCount","_sampleRate","FillRateHelper","listMetrics","activate","console","global","deactivateAndFlush","start","total_time_spent","info","derived","key","listener","computeBlankness","props","cellsAroundViewport","scrollMetrics","dOffset","offset","velocity","visibleLength","scrollSpeed","now","blankTop","first","firstFrame","blankBottom","last","lastFrame","bottomEdge","pixels_blank","blankness","enabled","_resetData","addListener","setSampleRate","sampleRate","setMinSampleCount","minSampleCount","ListMetricsAggregator","notifyCellLayout","param","cellIndex","orientation","layout","next","curr","dLength","notifyCellUnmounted","notifyListContentLayout","getAverageCellLength","getHighestMeasuredCellIndex","getCellMetricsApprox","index","frame","data","getItemCount","getCellMetrics","getItem","getItemLayout","_props_keyExtractor","keyExtractor","_VirtualizeUtils","_getItemLayout","length","getCellOffsetApprox","Number","frameMetrics","remainder","getContentLength","_this__contentLength","hasContentLength","flowRelativeOffset","referenceContentLength","_this__orientation","horizontal","rtl","contentLength","cartesianOffset","_invalidateIfOrientationChanged","_selectLength","width","height","_selectOffset","x","y","StateSafePureComponent","setState","partialState","state","ret","err","_installSetStateHooks","that","_this","Object","newProps","newState","_react","invariant","ViewabilityHelper","config","computeViewableItems","scrollOffset","viewportHeight","renderRange","itemCount","_this__config","itemVisiblePercentThreshold","viewAreaCoveragePercentThreshold","viewAreaMode","viewablePercentThreshold","viewableIndices","firstVisible","_ref","JSON","idx","metrics","top","bottom","_isViewable","onUpdate","createViewToken","onViewableItemsChanged","v","ii","handle","resetViewableIndices","recordInteraction","_onUpdateSync","viewableIndicesToCheck","prevItems","nextItems","viewable","changed","key1","viewable1","Array","itemLength","_isEntirelyVisible","pixels","_getPixelsVisible","percent","visibleHeight","computeWindowedRenderLimits","elementsThatOverlapOffsets","newRangeCount","offsets","zoomScale","result","offsetIndex","currentOffset","left","right","mid","scaledOffsetStart","scaledOffsetEnd","prev","maxToRenderPerBatch","windowSize","visibleBegin","visibleEnd","overscanLength","leadFactor","fillPreference","overscanBegin","overscanEnd","lastItemOffset","_elementsThatOverlapOffsets","overscanFirst","overscanLast","visible","newCellCount","maxNewCells","firstWillAddMore","firstShouldIncrement","lastWillAddMore","lastShouldIncrement","Error","item","_type_of","String","ON_EDGE_REACHED_EPSILON","_usedIndexForKey","_keylessItemComponentName","getScrollingThreshold","threshold","VirtualizedList","_this_props_maintainVisibleContentPosition_minIndexForVisible","childList","keys","ref","isVertical","_ListMetricsAggregator","_ChildListCollection","onRefresh","onContentSizeChange","otherProps","_reactnative","_props_refreshing","e","layoutHasChanged","timestamp","dt","_infoLog","tuple","renderMask","isViewable","lastFocusedCellRenderer","focusedCellIndex","heightOfCellsBeforeFocused","heightOfCellsAfterFocused","i1","_FillRateHelper","_this_props_updateCellsBatchingPeriod","_Batchinator","pair","_ViewabilityHelper","_this_props","viewabilityConfig","initialRenderRegion","minIndexForVisible","scrollToEnd","params","animated","veryLast","scrollToIndex","onScrollToIndexFailed","viewOffset","viewPosition","scrollToItem","scrollToOffset","scrollRef","_scrollToParamsFromOffset","cartOffset","t","flashScrollIndicators","getScrollResponder","getScrollableNode","getScrollRef","setNativeProps","_getCellKey","_this_context","hasMore","_checkProps","onScroll","initialScrollIndex","_VirtualizedListProps","__DEV__","flatStyles","_adjustCellsAroundViewport","pendingScrollUpdateCount","onEndReachedThreshold","_this__scrollMetrics","distanceFromEnd","newCellsAroundViewport","renderAhead","childIdx","_findFirstChildWithMore","cellKeyForIndex","componentDidMount","componentWillUnmount","_pushCells","stickyHeaderIndices","stickyIndicesFromProps","inversionStyle","stickyOffset","shouldListenForLayout","debug","_VirtualizedListCellRenderer","CellRendererComponent","end","ItemSeparatorComponent","undefined","ListItemComponent","prevCellKey","renderItem","ListHeaderComponent","_isNestedWithSameOrientation","nestedContext","render","ListEmptyComponent","ListFooterComponent","_this_props1","styles","element","_VirtualizedListContext","element1","event","spacerKey","renderRegions","lastRegion","lastSpacer","section","isLastSpacer","constrainToMeasured","_clamp","firstMetrics","lastMetrics","spacerSize","element2","_this_props_scrollEventThrottle","scrollProps","innerRet","scrollContext","componentDidUpdate","prevProps","extraData","hiPriInProgress","_computeBlankness","_triggerRemeasureForChildListsInCell","measureLayoutRelativeToContainingList","metricsChanged","error","_getFooterCellKey","_renderDebugOverlay","normalize","framesInLayout","windowTop","frameLast","windowLen","visTop","visLen","f","_orientation","_maybeCallOnEdgeReached","onStartReached","onStartReachedThreshold","onEndReached","distanceFromStart","DEFAULT_THRESHOLD_PX","startThreshold","endThreshold","isWithinStartThreshold","isWithinEndThreshold","_maybeScrollToInitialScrollIndex","contentWidth","contentHeight","_nullthrows","_offsetFromScrollEvent","_e_nativeEvent","contentOffset","contentSize","layoutMeasurement","_scheduleCellsToRenderUpdate","_shouldRenderWithPriority","_this_state_cellsAroundViewport","hiPri","distTop","distBottom","__getListMetrics","_updateViewableItems","_findItemIndexWithKey","hint","curKey","curKey1","_getItemKey","_createRenderMask","additionalRegions","_CellRenderMask","allRegions","initialRegion","stickyIndicesSet","_initialRenderRegion","_props_initialScrollIndex","firstCellIndex","lastCellIndex","_ensureClosestStickyHeader","itemIdx","getDerivedStateFromProps","prevState","_newProps_maintainVisibleContentPosition_minIndexForVisible","maintainVisibleContentPositionAdjustment","prevFirstVisibleItemKey","newFirstVisibleItemKey","firstVisibleItemIndex","constrainedCells","_constrainToItemCount","lastPossibleCellIndex","maxFirst","_keyExtractor","_StateSafePureComponent","CellRenderer","select","nativeEvent","updateSeparatorProps","_renderElement","onCellLayout","itemSeparator","cellStyle","_ReactNativeFeatureFlags","VirtualizedListCellContextProvider","VirtualizedListContext","VirtualizedListContextProvider","VirtualizedListContextResetter","children","value","context","currContext","horizontalOrDefault","initialNumToRenderOrDefault","maxToRenderPerBatchOrDefault","onEndReachedThresholdOrDefault","onStartReachedThresholdOrDefault","windowSizeOrDefault","initialNumToRender","VirtualizedSectionList","keyExtractorWithNullableIndex","keyExtractorWithNonNullableIndex","_info_index","viewableItems","Boolean","listItemCount","infoIndex","renderSectionHeader","renderSectionFooter","SeparatorComponent","ItemWithSeparator","updateProps","updateHighlight","updateHighlightFn","updatePropsFn","scrollToLocation","listRef","toIndexParams","getListRef","SectionSeparatorComponent","_renderItem","_sections","stickySectionHeadersEnabled","passThroughProps","listHeaderOffset","_this_props_sections","_VirtualizedList","sections","_getItem","sectionData","_subExtractor","itemIndex","extractor","_getSeparatorComponent","isLastItemInList","isLastItemInSection","LeadingSeparatorComponent","setSelfHighlightCallback","updateHighlightFor","setSelfUpdatePropsCallback","updatePropsFor","inverted","_React_useState","leadingSeparatorHiglighted","setLeadingSeparatorHighlighted","_React_useState1","separatorHighlighted","setSeparatorHighlighted","_React_useState2","leadingSeparatorProps","setLeadingSeparatorProps","_React_useState3","separatorProps","setSeparatorProps","separators","leadingSeparator","separator","RenderSeparator","firstSeparator","secondSeparator","clamp","min","max","infoLog","_key","args","_console"],"mappings":"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"}